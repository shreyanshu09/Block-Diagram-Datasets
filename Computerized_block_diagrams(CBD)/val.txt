<H> Login <R> connected_with <T> Products_Page <H> Products_Page <R> connected_with <T> Product <H> Product <R> connected_with <T> Customer_Testimonals <H> Customer_Testimonals <R> connected_with <T> Plans_Page <H> Plans_Page <R> connected_with <T> Compare <H> Compare <R> connected_with <T> Purchase_Page <H> Purchase_Page <R> connected_with <T> Customer_make_a_purchase? <H> Customer_make_a_purchase? <R> Yes <T> Feedback <H> Customer_make_a_purchase? <R> No <T> Exit_intent_pop-up_with_discount || Login is connected with Products Page which is then connected with Product which is further connected with Customer Testimonials. Customer Testimonials is connected with Plans Page which is then connected with Compare. Compare is connected with Purchase Page which is then connected with Customer make a purchase?. If Customer make a purchase? is Yes then Feedback and If Customer make a purchase? is No then Exit intent pop-up with discount.
<H> Order_palced <R> connected_with <T> Transaction_started_in_order_system <H> Transaction_started_in_order_system <R> connected_with <T> Verification <H> Verification <R> connected_with <T> Credit_card_valid? <H> Credit_card_valid? <R> NO <T> Retry <H> Credit_card_valid? <R> YES <T> Money? <H> Money? <R> NO <T> Retry <H> Retry <R> connected_with <T> Transaction_started_in_order_system <H> Money? <R> YES <T> Transaction_completed_in_order_system <H> Transaction_completed_in_order_system <R> connected_with <T> Customer_Information_Database <H> Transaction_completed_in_order_system <R> connected_with <T> confirmation_bill <H> Transaction_completed_in_order_system <R> connected_with <T> Thank_you_page <H> Thank_you_page <R> connected_with <T> Entries_are_reconciled_at_end_of_month || Order placed is connected with Transaction started in order system which is then connected with Verification which is further connected with Credit card valid?. If Credit card valid? is No then Retry and if Credit card valid? is Yes then Money?. If Money? is No then Retry and if Money? is Yes then Transaction completed in order system. Retry is connected with Transaction started in order system. Transaction completed in order system is connected with Customer Information Database, confirmation bill and also with Thank you page which is finally connected with Entries are reconciled at end of month. 
<H> Take_order <R> connected_with <T> Distribution_Centre <H> Distribution_Centre <R> connected_with <T> Available <H> Available <R> Yes <T> Print_Invoice <H> Available <R> No <T> Check_again <H> Check_again <R> connected_with <T> Inform_Customer || Take order is connected with Distribution Centre which is then connected with Available. If Available is Yes then Print Invoice and if Available is No then Check again which is then connected with Inform Customer.
<H> Begin <R> connected_with <T> Check_Prequalification <H> Check_Prequalification <R> connected_with <T> small_loan <H> small_loan <R> No <T> Loan_amount_greater_than_50%_of_Monthly_Salary <H> small_loan <R> Yes <T> Submit_Loan_Application <H> Submit_Loan_Application <R> connected_with <T> Review_Loan <H> Review_Loan <R> No <T> Decline_Application <H> Review_Loan <R> No <T> Pend_Application_and_Request_additional_Info <H> Review_Loan <R> Yes <T> Confirm_Application_Confirm_Application <H> Decline_Application <R> connected_with <T> End <H> Pend_Application_and_Request_additional_Info <R> connected_with <T> Review <H> Confirm_Application_Confirm_Application <R> connected_with <T> confirmation <H> Review <R> No <T> Decline_Application <H> Review <R> Yes <T> Confirm_Application_Confirm_Application <H> Decline_Application <R> connected_with <T> End <H> Confirmation <R> No <T> Decline_Application <H> Confirmation <R> Yes <T> Approve_Application <H> Decline_Application <R> connected_with <T> End <H> Approve_Application <R> connected_with <T> End || Start is connected with Check Prequalification which is then connected with small loan which if small loan is No then Loan amount greater than 50% of Monthly Salary and if small loan is Yes then Submit Loan Application which is then connected with Review Loan. If Review Loan is No then Decline Application and Pend Application and Request additional info and if Review Loan is Yes then Confirm Application Confirm Application. Decline Application is connected with End and Pend Application and Request additional Info is connected with Review. If Review is Yes then Confirm Application Confirm Application and If Review is No then Decline Application which is then connected with End. Confirm Application Confirm Application is connected with Confirmation. If Confirmation is No then Decline Application and if Confirmation is Yes then Approve Application. Decline Application and Approve Application are connected with End.
<H> Like_an_item <R> connected_with <T> Do_I_have_enough_money? <H> Do_I_have_enough_money? <R> Yes <T> Buy_the_item <H> Do_I_have_enough_money? <R> No <T> Don't_buy_the_item || Like an item is connected with Do I have enough money?. If Do I have enough money? is Yes then Buy the item and if Do I have enough money? is No then Don't buy the item.
<H> Start <R> connected_with <T> Does_the_TV_turn_on? <H> Does_the_TV_turn_on? <R> Yes <T> Are_there_any_error_messages? <H> Does_the_TV_turn_on? <R> No <T> Is_the_TV_power_light_on? <H> Are_there_any_error_messages? <R> Yes <T> Perform_a_search_for_the_error_message <H> Are_there_any_error_messages? <R> No <T> TV_is_fine <H> Is_the_TV_power_light_on? <R> Yes <T> Turn_the_TV_monitor_on <H> Is_the_TV_power_light_on? <R> No <T> Check_the_TV_power_cord || Start is connected with Does the TV turn on?. If Does the TV turn on? is Yes then Are there any error messages? and if Does the TV turn on? is No then Is the TV power light on?. If Are there any error messages? is Yes then Perform a search for the error message and if Are there any error messages? is No then TV is fine. If Is the TV power light on? is Yes then Turn the TV monitor on and if Is the TV power light on? is No then Check the TV power cord.  
<H> Begin <R> connected_with <T> Enter_ID_and_password <H> Enter_ID_and_password <R> No <T> Process <H> Enter_ID_and_password <R> connected_with <T> Process <H> Process <R> Yes <T> Success <H> Success <R> connected_with <T> End || Begin is connected with Enter ID and Password which if Enter ID and Password is No then Process otherwise also process. If process is Yes then Success which is finally connected with End. 
<H> Begin <R> connected_with <T> Initial_Step <H> Initial_Step <R> connected_with <T> Small_loan <H> Small_loan <R> No <T> Loan_not_possible <H> Small_loan <R> Yes <T> Submit_Loan_Application <H> Submit_Loan_Application <R> connected_with <T> Review <H> Review <R> No <T> Decline_Application <H> Review <R> No <T> Pend_Application_and_Request_additional_Info <H> Review <R> Yes <T> Application_Confirmation <H> Application_Confirmation <R> connected_with <T> Approve <H> Pend_Application_and_Request_additional_Info <R> connected_with <T> Review <H> Review <R> No <T> Decline_Application <H> Review <R> Yes <T> Application_Confirmation || Begin is connected with Initial Step which is then connected with Small Loan. If Small Loan is No then Loan not possible and if Small Loan is Yes then Submit Loan Application which is then connected with Review. If Review is No then Decline Application and Pend Application and Request additional Info and if Review is Yes then Application Confirmation. Pend Application and Request additional Info is connected with Review. If Review is No then Decline Application and if Review is Yes then Application Confirmation which is finally connected with Approve. 
<H> Begin <R> connected_with <T> Check_Round_Status <H> Check_Round_Status <R> connected_with <T> Is_it_round_15? <H> Is_it_round_15? <R> NO <T> Chill <H> Is_it_round_15? <R> YES <T> Keep_rolling <H> Keep_rolling <R> connected_with <T> End <H> Chill <R> connected_with <T> Check_Round_Status || Begin is connected with Check Round Status which is then connected with Is it round 15?. If Is it round 5? is No then Chill and if Is it round 15? is Yes then Keep rolling which is then connected with End and chill is again connected with Check Round Status.
<H> Monitor <R> connected_with <T> Does_the_Monitor_turn_on? <H> Does_the_Monitor_turn_on? <R> Yes <T> Are_there_any_error_messages? <H> Does_the_Monitor_turn_on? <R> No <T> Is_the_Monitor_power_light_on? <H> Are_there_any_error_messages? <R> Yes <T> Perform_a_search_for_the_error_message <H> Are_there_any_error_messages? <R> No <T> Monitor_is_fine <H> Is_the_Monitor_power_light_on? <R> Yes <T> Turn_the_monitor_on <H> Is_the_Monitor_power_light_on? <R> No <T> Check_the_Monitor_power_cord || Monitor is connected with Does the Monitor turn on?. If Does the Monitor turn on? is Yes then Are there any error messages? and if Does the Monitor turn on? is No then Is the Monitor power light on?. If Are there any error messages? is Yes then Perform a search for the error message and if Are there any error messages? is No then Monitor is fine. If Is the Monitor power light on? is Yes then Turn the monitor on and if Is the Monitor power light on? is No then Check the Monitor power cord.  
<H> Begin <R> connected_with <T> User_navigates_to <H> User_navigates_to <R> connected_with <T> Is_User_Logged_In? <H> Is_User_Logged_In? <R> No <T> Redirect_to_Login <H> Redirect_to_Login <R> connected_with <T> User_Logs_In <H> User_Logs_In <R> connected_with <T> User_navigates_to <H> Is_User_Logged_In? <R> Yes <T> User_Type? <H> User_Type? <R> Parent <T> Back_to_homepage <H> User_Type? <R> Staff <T> Back <H> User_Type? <R> Student <T> End || Begin is connected with User navigates to which is then connected with Is User Logged In?. If Is User Logged In? is No then Redirect to Login which is then connected with User Logs In which is further connected with User navigates to. If Is User Logged In? is Yes then User Type?. If User Type? is Parent then Back to homepage and if User Type? is Staff then Back and if User Type? is Student then End. 
<H> Start <R> connected_with <T> Complete_Purchase_Requistion_Form <H> Complete_Purchase_Requistion_Form <R> connected_with <T> Approved <H> Approved <R> NO <T> Purchase_Requisition <H> Approved <R> YES <T> Money <H> Money <R> Cash <T> Is_It_an_Independent_Contractor? <H> Money <R> Credit_Cash <T> Fill_Form <H> Is_It_an_Independent_Contractor? <R> NO <T> Take_permission <H> Is_It_an_Independent_Contractor? <R> YES <T> IC's_Agreement_filled_out_or_on_File <H> IC's_Agreement_filled_out_or_on_File <R> connected_with <T> Take_permission <H> Fill_Form <R> connected_with <T> Invoice_CCPR <H> Invoice_CCPR <R> connected_with <T> Approval <H> Take_permission <R> connected_with <T> Invoice_P.O. <H> Invoice_P.O. <R> To_Controller <T> Approval || Start is connected with Complete Purchase Requistion Form which is then connected with Approved. If Approved is NO then Purchase Requistion and if Approved is YES then Money. If Money is Cash then Is it an Independent Contractor? and if Money is Credit Card then Fill Form. If Is it an Independent Contractor? is No then Take permision and if Is it an Independent Contractor? is YES then IC's Agreement filled out or on File which is then connected with Take permission. Fill Form is connected with Invoice CCPR which is then connected with Approval. Take permission is connected with Invoice P.O. which if Invoice P.O. is To Controller then Approval.
<H> Start <R> connected_with <T> Review_Invoice_for_Compliance <H> Review_Invoice_for_Compliance <R> connected_with <T> Invoice_Meets_Requirements? <H> Invoice_Meets_Requirements? <R> No <T> Back <H> Invoice_Meets_Requirements? <R> Yes <T> Dept_Included_Required_Information_&_Approvals? <H> Dept_Included_Required_Information_&_Approvals? <R> No <T> Contact_again <H> Dept_Included_Required_Information_&_Approvals? <R> Yes <T> Wait <H> Wait <R> connected_with <T> Payment_Processed <H> Action_Taken,_Issue_Resolved? <R> No <T> Contact_again <H> Action_Taken,_Issue_Resolved? <R> Yes <T> Dept_Included_Required_Information_&_Approvals? || Start is connected with Review Invoice for Compliance which is then connected with Invoice Meets Requirements?. If Invoice Meets Requirements? is No then Back and if Invoice Meets Requirements? is Yes then Dept Included Required Information & Approvals?. If Dept Included Required Information & Approvals? is No then Contact again and if Dept Included Required Information & Approvals? is Yes then Wait which is then connected with Payment Processed. If Action Taken, Issue Resolved? is No then Contact again and if Action Taken, Issue Resolved? is Yes then Dept Included Required Information & Approvals?   
<H> Start <R> connected_with <T> Hungry? <H> Hungry? <R> Yes <T> Enjoy_your_lunch <H> Hungry? <R> No <T> Look_for_food_in_the_fridge <H> Look_for_food_in_the_fridge <R> connected_with <T> Found? <H> Found? <R> Yes <T> Enjoy_your_lunch <H> Found? <R> No <T> Feel_lazy_to_go_out? <H> Feel_lazy_to_go_out? <R> I_want_to_go_out_for_some_fresh_air <T> Find_a_restaurant <H> Feel_lazy_to_go_out? <R> Yes,_I_am_Very_lazy_to_go_out <T> Order_take_out <H> Order_take_out <R> connected_with <T> Hungry <H> Find_a_restaurant <R> connected_with <T> Hungry <H> Hungry <R> Yes <T> Enjoy_your_lunch <H> Hungry <R> No <T> End || Start is connected with Hungry? which if Hungry is Yes then Enjoy your lunch and if Hungry? is No then Look for food in the fridge which is then connected with Found?. If Found is Yes then Enjoy your lunch and if Found? is No then Feel lazy to go Out?. If Feel Lazy to go out? is I want to go out for some fresh air then Find a restraunt which is then connected with Hungry. If Feel lazy to go out? is Yes, I am very lazy to go out then Order take out which is then connected with Hungry. If Hungry is Yes then Enjoy your lunch and if Hungry is No then End.
<H> Start <R> connected_with <T> Documents <H> Documents <R> connected_with <T> Invoice_Meets_Requirements? <H> Invoice_Meets_Requirements? <R> No <T> Return_Invoice_to_Supplier <H> Invoice_Meets_Requirements? <R> Yes <T> Approval <H> Approval <R> No <T> Require_action <H> Approval <R> Yes <T> Invoice_Placed_in_payment_Queue <H> Invoice_Placed_in_payment_Queue <R> connected_with <T> Payment_Processed <H> Require_action <R> connected_with <T> Action_Taken,_Issue_Resolved? <H> Action_Taken,_Issue_Resolved? <R> No <T> Require_action <H> Action_Taken,_Issue_Resolved? <R> Yes <T> Approval || Start is connected with Documents which is then connected with Invoice Meets Requirements?. If Invoice Meets Requirements? is No then Return Invoice to Supplier and if Invoice Meets Requirements? is Yes then Approval . If Approval is No then Require action and if Approval is Yes then Invoice Placed in Payment Queue which is then connected with Payment Processed and Require action is connected with Action Taken, Issue Resolved?. If Action Taken, Issue Resolved? is No then Require action and if Action Taken, Issue Resolved? is Yes then Approval.  
<H> Start <R> connected_with <T> Deal? <H> Deal? <R> No <T> Contact_Again <H> Deal? <R> Yes <T> Contract_Signing <H> Contract_Signing <R> connected_with <T> Documentation <H> Documentation <R> connected_with <T> Custom_Clearance <H> Custom_Clearance <R> connected_with <T> Shipment <H> Shipment <R> connected_with <T> Delivery <H> Delivery <R> connected_with <T> Service_Payment <H> Service_Payment <R> connected_with <T> Pay_Foreign_Exchange? <H> Pay_Foreign_Exchange? <R> No <T> End <H> Pay_Foreign_Exchange? <R> yes <T> Payment <H> Payment <R> connected_with <T> End || Start is connected with Deal? which if Deal? is No then Contact Again and if Deal? is Yes then Contract Signing which is then connected with Documentation which is further connected with Custom Clearance. Custom clearance is connected with Shipment which is then connected with Delivery which is further connected with Service Payment. Service Payment is connected with Pay Foreign Exchange? which if Pay Foreign Exchange? is No then End and if Pay Foreign Exchange? is Yes then Payment which is finally connected with End. 
<H> Start <R> connected_with <T> Step_1 <H> Step_1 <R> connected_with <T> Decision <H> Decision <R> No <T> Step_2 <H> Step_2 <R> connected_with <T> Step_1 <H> Decision <R> yes <T> End || Begin is connected with Step 1 which is then connected with Decision. If Decision is NO then Step 2 which is then connected with Step 1 and if Decision is Yes then End.
<H> Start <R> connected_with <T> SMOOTH <H> SMOOTH <R> connected_with <T> Threshold <H> CALIBRATE <R> connected_with <T> Threshold <H> Threshold <R> connected_with <T> INTERPOLATE <H> INTERPOLATE <R> connected_with <T> DISPLAY <H> DISPLAY <R> connected_with <T> End || Start is connected with SMOOTH which is then connected with Threshold. CALIBRATE is connected with Threshold which is then connected with INTERPOLATE which is further connected with DISPLAY which is finally connected with End.
<H> Begin <R> connected_with <T> Initialize <H> Initialize <R> connected_with <T> Decision <H> Decision <R> Yes <T> Operation <H> Decision <R> No <T> Action <H> Operation <R> connected_with <T> End <H> Action <R> connected_with <T> End || Begin is connected with Initialize which is then connected with Decision. If Decision is Yes then Operation and if Decision is No then Action. Operation and Action both are connected with End.
<H> Control_group <R> connected_with <T> Collect_BALF <H> Exposure_group <R> connected_with <T> Collect_BALF <H> Collect_BALF <R> connected_with <T> Protein_extractions <H> Protein_extractions <R> connected_with <T> Documentation <H> Documentation <R> connected_with <T> Excision_of_relevant_spots_&_in-gel_digestion <H> Excision_of_relevant_spots_&_in-gel_digestion <R> connected_with <T> Chipset <H> Chipset <R> connected_with <T> Data_analysis_and_bioinformatics || Control group and Exposure group both are connected with Collect BALF which is then connected with Protein extractions which is further connected with Documentation. Documentation is connected with Excision of relevant spots & in-gel digestion which is then connected with Chipset which is finally connected with Data analysis and bioinformatics. 
<H> Start <R> connected_with <T> Head_extracted <H> Head_extracted <R> connected_with <T> Head_tracking <H> Head_tracking <R> connected_with <T> check_threshold <H> check_threshold <R> NO <T> Head_tracking <H> check_threshold <R> YES <T> Centroid_height_lower_than_threshold <H> Centroid_height_lower_than_threshold <R> NO <T> head_tracking <H> Centroid_height_lower_than_threshold <R> YES <T> End || Start is connected with Head extracted which is then connected with Head tracking. Head Tracking is connected with check threshold. If check threshold is NO then Head tracking and if check threshold is YES then Centroid height lower than threshold. If Centroid height lower than threshold is NO then also Head tracking and if Centroid height lower than threshold is YES then End.  
<H> Begin <R> connected_with <T> re-sample_subset_i <H> re-sample_subset_i <R> connected_with <T> Select_operators <H> Select_operators <R> connected_with <T> iterations_T_i<=T <H> iterations_T_i<=T <R> Yes <T> re-sample_subset_i <H> iterations_T_i<=T <R> No <T> EI_evaluate_and_sort_variables <H> EI_evaluate_and_sort_variables <R> connected_with <T> Finalize_it <H> Finalize_it <R> connected_with <T> model <H> Testing_Samples <R> connected_with <T> model <H> model <R> connected_with <T> Prediction_results || Begin is connected with re-sample subset i which is then connected with Select operators. Select operators is then connected with iterations T i<=T. If iterations T i<=T is Yes then re-sample subset i and if iterations T i<=T is No then EI evaluate and sort variables which is then connected with Finalize it which is further connected with model. Testing Samples is connected with model which is then connected with Prediction results.  
<H> Start <R> connected_with <T> do_something <H> do_something <R> connected_with <T> Yes_or_No? <H> Yes_or_No? <R> no <T> update <H> update <R> connected_with <T> do_something <H> Yes_or_No? <R> yes <T> Print <H> Print <R> connected_with <T> End || Start is connected with do something which is then connected with Yes or No?. If Yes or No? is No then update which is then connected with do something. If Yes or No? is Yes then Print which is finally connected with End. 
<H> Begin <R> connected_with <T> Initialize_variables <H> Initialize_variables <R> connected_with <T> Initialize_the_k_clustering_centers <H> Initialize_the_k_clustering_centers <R> connected_with <T> Assign_each_data_object_to_the_closet_class <H> Assign_each_data_object_to_the_closet_class <R> connected_with <T> Recalculate_the_centers_of_the_clusters <H> Recalculate_the_centers_of_the_clusters <R> connected_with <T> value_greater_than_threshold? <H> value_greater_than_threshold? <R> No <T> Assign_each_data_object_to_the_closet_class <H> value_greater_than_threshold? <R> Yes <T> Gather_all_information <H> Gather_all_information <R> connected_with <T> Print_Results <H> Print_Results <R> connected_with <T> End || Begin is connected with Initialize variables which is then connected with Initialize the k clustering centers which is further connected with Assign each data object to the closet class. Assign each data object to the closet class is connected with Recalculate the centers of the clusters which is then connected with value greater than threshold?. If value greater than threshold? is NO then Assign each data object to the closet class and if value greater than threshold? is Yes then Gather all information which is then connected with Print Results which is finally connected with End. 
<H> Start <R> connected_with <T> Create_a_store_category <H> Create_a_store_category <R> connected_with <T> Create_a_store_type <H> Create_a_store_type <R> connected_with <T> Create_a_store <H> Create_a_store <R> Purchase <T> Add_items_to_a_store <H> Create_a_store <R> Sales <T> Create_an_item_category <H> Add_items_to_a_store <R> connected_with <T> Paper_work <H> Create_an_item_category <R> connected_with <T> Add_items_to_a_store <H> Paper_work <R> connected_with <T> Raise_an_indent <H> Add_items_to_a_store <R> connected_with <T> Bill_Check <H> Raise_an_indent <R> connected_with <T> Create_a_purchase_order <H> Create_a_purchase_order <R> connected_with <T> End || Start is connected with Create a store category which is then connected with Create a store type. Create a store type is connected with Create a store which if Create a store is purchase then Add items to a store and if Create a store is Sales then Create an item category. Add items to a store is connected with Paper work and Create an item category is connected with Add items to a store. Paper work is then connected with Raise an indent and Add items to a store is connected with Bill Check. Raise an indent is connected with Create a purchase order which is finally connected with End.  
<H> Start <R> connected_with <T> If_registered? <H> If_registered? <R> No <T> Registration <H> Registration <R> connected_with <T> Login <H> If_registered? <R> Yes <T> Login <H> Login <R> connected_with <T> Is_valid? <H> Is_valid? <R> No <T> Login <H> Is_valid? <R> Yes <T> Is_Admin? <H> Is_Admin? <R> Yes <T> Add_information <H> Is_Admin? <R> No <T> Search_vehicle <H> Add_information <R> connected_with <T> Update_all_information <H> Search_vehicle <R> connected_with <T> Car_reserved <H> Update_all_information <R> connected_with <T> Travelling_information_update <H> Car_reserved <R> connected_with <T> Get_ID <H> Travelling_information_update <R> connected_with <T> Log_out <H> Get_ID <R> connected_with <T> Log_out <H> Log_out <R> connected_with <T> Stop || Start is connected with If registered? which if registered? is No then Registration which is then connected with Login and if registered? is Yes then Login. Login is connected with Is valid? which if Is valid? is No then again Login and if Is valid is Yes then Is Admin?. If Is Admin? is Yes then Add information and if Is Admin? is No then Search vehicle. Add information is connected with Update all information and Search vehicle is connected with Car reserved. Update all information is connected with Travelling information update and Car reserved is connected with Get ID. Travelling information update and Get ID both are connected with Log out which is finally connected with Stop.  
<H> Begin <R> connected_with <T> Is_target_sector<max_sector? <H> Is_target_sector<max_sector? <R> Yes <T> Update_Value <H> Is_target_sector<max_sector? <R> No <T> Target_Sector=0 <H> Target_Sector=0 <R> connected_with <T> Is_the_target_head_<_than_max_head? <H> Update_Value <R> connected_with <T> End <H> Is_the_target_head_<_than_max_head? <R> Yes <T> Increment_head <H> Is_the_target_head_<_than_max_head? <R> No <T> Target_head=0 <H> Increment_head <R> connected_with <T> End <H> Target_head=0 <R> connected_with <T> Increase_Value <H> Increase_Value <R> connected_with <T> End || Begin is connected with Is target sector < max sector? which if Is target sector < max sector? is Yes then Update Value and if Is target sector < max sector? is No then Target Sector=0. Update Value is connected with End and Target Sector=0 is connected with Is the target head < than max head?. If Is the target head < than max head? is Yes then Increment head and if Is the target head < than max head? is No then Target head=0. Increment head is connected with End and Target head=0 which is then connected with Increase Value which is finally connected with End.   
<H> Pre-processing <R> connected_with <T> Feature_Extraction <H> Feature_Extraction <R> connected_with <T> Analysis <H> Feature_Extraction <R> connected_with <T> MVS_classifier <H> Feature_Extraction <R> connected_with <T> NKK_Classifier <H> MVS_classifier <R> connected_with <T> Performance_evaluation <H> NKK_Classifier <R> connected_with <T> Performance_evaluation || Pre-processing is connected with Feature Extraction which is then connected with Analysis, MVS classifier and also NKK classifier. MVS classifier and NKK classifier both are connected with Performance evaluation.  
<H> Begin <R> connected_with <T> Input_Total_Score <H> Input_Total_Score <R> connected_with <T> If_total_score>800 <H> If_total_score>800 <R> No <T> Bad_Work <H> If_total_score>800 <R> Yes <T> Good_Work <H> Bad_Work <R> connected_with <T> End <H> Good_Work <R> connected_with <T> End || Begin is connected with Input Total Score which is then connected with If total score > 800. If total score > 800 is No then Bad Work and if total score > 800 is Yes then Good Work. Bad Work and Good Work both are connected with End.  
<H> Take_observation <R> connected_with <T> Discarding_Wind_observations <H> Take_observation <R> connected_with <T> Is_the_probabilistic_rejection_mechanism_acceptable? <H> Is_the_probabilistic_rejection_mechanism_acceptable? <R> connected_with <T> Particle_generation <H> Particle_generation <R> connected_with <T> Particles_travel_over_time,_and_the_age_of_particles_increases. <H> Particles_travel_over_time,_and_the_age_of_particles_increases. <R> connected_with <T> Re-update_particles <H> Re-update_particles <R> connected_with <T> Discarding_Wind_observations <H> Re-update_particles <R> connected_with <T> End || Take observation is connected with both Discarding Wind observations and Is the probabilistic rejection mechanism acceptable?. Is the probabilistic rejection mechanism acceptable? is connected with Particle generation which is then connected with Particles travel over time, and the age of particles increases. which is further connected with Re-update particles. Re-update particles is connected with both Discarding Wind observations and End.  
<H> Analysis <R> connected_with <T> 18_included_in_analysis <H> Analysis <R> connected_with <T> Some_are_excluded <H> 18_included_in_analysis <R> connected_with <T> Prognostic <H> 18_included_in_analysis <R> connected_with <T> Predictive <H> Predictive <R> connected_with <T> Response <H> Predictive <R> connected_with <T> Response_to_therapy <H> Predictive <R> connected_with <T> Outcome_from_surgical <H> Predictive <R> connected_with <T> response_to_radiotherapy || Analysis is connecetd with both 18 included in analysis and Some are excluded. 18 included in analysis is connected with both Prognostic and Predictive. Predictive is connected with Response, Response to therapy, Outcome from surgical and Response to radiotherapy.
<H> Materials_production <R> connected_with <T> Package_production <H> Package_production <R> connected_with <T> Packing <H> Packing <R> connected_with <T> Shipping <H> Shipping <R> connected_with <T> Use <H> Use <R> connected_with <T> Transport_to_Next_Phase <H> Transport_to_Next_Phase <R> connected_with <T> Disposal <H> Transport_to_Next_Phase <R> connected_with <T> Reuse <H> Transport_to_Next_Phase <R> connected_with <T> Composting <H> Transport_to_Next_Phase <R> connected_with <T> Litter || Materials Production is connected with Package Production which is then connected with Packing. Packing is connected with Shipping which is then connected with Use. Use is connected with Transport to Next Phase which is then connected with Disposal, Reuse, Composting, and Litter. 
<H> Begin <R> connected_with <T> Input <H> Input <R> connected_with <T> Question? <H> Question? <R> No <T> process_1 <H> Question? <R> No <T> process_2 <H> process_1 <R> connected_with <T> End <H> process_2 <R> connected_with <T> End || Begin is connected with Input which is then connected with Question?. If Question is No then process 1 and if Question? is Yes then process 2. process  and process 2 both are connected with END.
<H> Image_Extracted <R> connected_with <T> Head_extracted <H> Head_extracted <R> connected_with <T> Head_tracking <H> Head_tracking <R> connected_with <T> Cordinate_values <H> Cordinate_values <R> NO <T> Head_tracking <H> Cordinate_values <R> YES <T> Centroid_height_lower_than_threshold <H> Centroid_height_lower_than_threshold <R> NO <T> Head_tracking <H> Centroid_height_lower_than_threshold <R> YES <T> Fall_detected || Image Extracted is connected with Head extracted which is then connected with Head tracking. Head tracking is connected with Cordinate values. If Cordinate values is NO then Head tracking and if Cordinate values is YES then Centroid height lower than threshold. If Centroid height lower than threshold is No then Head tracking and if Centroid height lower than threshold is YES then Fall detected.    
<H> Question <R> connected_with <T> Analysis <H> Analysis <R> connected_with <T> Variation? <H> Variation? <R> connected_with <T> Complexity? <H> Variation? <R> connected_with <T> Flow? <H> Flow? <R> connected_with <T> Action_items_Just_go_do_it. <H> Flow? <R> connected_with <T> Waste <H> Complexity? <R> connected_with <T> 6_Sigma_statistical_Analysis <H> Complexity? <R> connected_with <T> Brain_power <H> Action_items_Just_go_do_it. <R> connected_with <T> Implementation_Plan_Events_&_Action_items <H> Waste <R> connected_with <T> Implementation_Plan_Events_&_Action_items <H> 6_Sigma_statistical_Analysis <R> connected_with <T> Implementation_Plan_Events_&_Action_items <H> Brain_power <R> connected_with <T> Implementation_Plan_Events_&_Action_items || Question is connected with Analysis which is then connected with Variation?. Variation? is connected with both Complexity? and Flow?. Complexity? is connected with both 6 Sigma Statistical Analysis and Brain power. Flow? is connected with both Action items Just go do it. Action items Just go do it, Waste, 6 Sigma Statistical Analysis and Brain power all are connected with Implementation Plan Events & Action items.
<H> Light_Energy <R> connected_with <T> Reaction <H> Reaction <R> connected_with <T> Water <H> Water <R> connected_with <T> Oxygen <H> Water <R> connected_with <T> Hydrogen <H> Oxygen <R> connected_with <T> Diffuses_out_of_chloroplast || Light Energy is connected with Reaction which is then connected with Water. Water is then connected with both Oxygen and Hydrogen. Oxygen is then connected with Diffuses out of chloroplast.
<H> Start <R> connected_with <T> DEFENSE? <H> DEFENSE? <R> Yes <T> SWAT <H> SWAT <R> connected_with <T> Block <H> DEFENSE? <R> No <T> Block <H> Block <R> connected_with <T> LOOK <H> LOOK <R> connected_with <T> Target <H> Target <R> connected_with <T> LAUNCH_BALL <H> LAUNCH_BALL <R> connected_with <T> DEFENSE? || START is connected with DEFENSE? which if DEFENSE? is Yes then SWAT which is then connected with Block and if DEFENSE? is No then also Block. Block is then connected with LOOK which is then connected with Target which is further connected with LAUNCH BALL which is finally connected with DEFENSE? 
<H> What_is_the_score? <R> connected_with <T> Yes <H> What_is_the_score? <R> connected_with <T> No <H> No <R> connected_with <T> Goood <H> Yes <R> connected_with <T> Is_its_value_greater_than_0? <H> Is_its_value_greater_than_0? <R> connected_with <T> Yes <H> Is_its_value_greater_than_0? <R> connected_with <T> No <H> Yes <R> connected_with <T> Bad <H> No <R> connected_with <T> Good || What is the score? is connected with both Yes and No. Yes is connected with Is its value greater than 0? and No is connected with Good. Is its value greater than 0? is then connected with both Yes and No. Yes is then connected with Bad and No is connected with Good. 
<H> START <R> connected_with <T> Toss <H> Toss <R> connected_with <T> Is_the_Coin_heads? <H> Is_the_Coin_heads? <R> Yes <T> Mary_Pays <H> Is_the_Coin_heads? <R> No <T> Bill_Pays <H> Mary_Pays <R> connected_with <T> END <H> Bill_Pays <R> connected_with <T> END || START is connected with Toss which is then connected with Is the Coin heads?. If Is the coin heads? is Yes then Mary Pays and if Is the coin heads? is No then Bill Pays. Marry Pays and Bill Pays both are connected with END.
<H> Start <R> connected_with <T> My_Operation <H> My_Operation <R> connected_with <T> Yes_or_No? <H> Yes_or_No? <R> no <T> Therapy <H> Therapy <R> connected_with <T> My_Operation <H> Yes_or_No? <R> yes <T> catch_something <H> catch_something <R> connected_with <T> End || Start is connected with My Operation which is then connected with Yes or No?. If Yes or No? is no then Therapy which is then connected with My Operation and if Yes or No? is yes then catch something which is then connected with End. 
<H> Home <R> connected_with <T> Check_time <H> Check_time <R> connected_with <T> Late? <H> Late? <R> Yes <T> Take_bus <H> Late? <R> No <T> Take_subway <H> Take_bus <R> connected_with <T> Reach_school <H> Take_subway <R> connected_with <T> Reach_school || Home is connected with Check time which is then connected with Late?. If Late? is Yes then Take bus and if Late? is No then Take subway. Take bus and Take subway both are connected with Reach school.
<H> Aerial <R> connected_with <T> Network <H> Network <R> connected_with <T> Detector <H> Detector <R> connected_with <T> amplifier <H> amplifier <R> connected_with <T> Loud-Speaker || Aerial is connected with Network which is then connecetd with Detector which is further connected with amplifier which is finally connected with Loud-Speaker.  
<H> Instruction <R> connected_with <T> Research_Development <H> Research_Development <R> connected_with <T> Develop_Strategy_and_Obectives <H> Develop_Strategy_and_Obectives <R> connected_with <T> Limitation <H> Limitation <R> connected_with <T> Monitor_Progress <H> Monitor_Progress <R> connected_with <T> Develop_Strategy_and_Obectives || Instruction is connecetd with Research Development which is then connected with Develop Strategy and Objectives which is further connected with Limitation. Limitation is then connected with Monitor Progress which is again connected with Develop Strategy and Objectives.
<H> Camera <R> connected_with <T> Analog_Image <H> Analog_Image <R> connected_with <T> Driver <H> Driver <R> connected_with <T> Digital_Image <H> Digital_Image <R> connected_with <T> Ouput || Camera is connected with Analog Image which is then connected with Driver. Driver is then connected with Digital Image which is finally connected with Output.
<H> Circuit <R> connected_with <T> Current_flows_from_the_batteries <H> Current_flows_from_the_batteries <R> connected_with <T> Heating <H> Heating <R> connected_with <T> Bulb_filament_glows_bright <H> Bulb_filament_glows_bright <R> connected_with <T> Focus || Circuit is connected with Current flows from the batteries which is then connected with Heating. Heating is connected with Bulb filament glows bright which is then connected with Focus.
<H> Electricity <R> connected_with <T> NRZ_Pulse_Generator <H> NRZ_Pulse_Generator <R> connected_with <T> Modulator <H> Modulator <R> connected_with <T> Optical_Amplifier <H> Optical_Amplifier <R> connected_with <T> FSO_channel <H> FSO_channel <R> connected_with <T> Optical_Amplifier <H> Optical_Amplifier <R> connected_with <T> Amplification <H> Amplification <R> connected_with <T> Low_pass_Filter <H> Low_pass_Filter <R> connected_with <T> BER_Analyzer || Electricity is connected with NRZ Pulse Generator which is then connected with Modulator. Modulator is connected with Optical Amplifier which is then connnected with FSO channel which is further connected with Optical Amplifier. Optical Amplifier is connected with Amplification which is then connected with Low pass Filter which is finally connected with BER Analyzer. 
<H> Instruction <R> connected_with <T> Fuzzy_Entropy <H> Fuzzy_Entropy <R> connected_with <T> Thresholding <H> Thresholding <R> connected_with <T> Feature_vectors <H> Feature_vectors <R> connected_with <T> Classifier <H> Classifier <R> connected_with <T> Speech <H> Classifier <R> connected_with <T> Non_speech || Instruction is connected with Fuzzy Entropy which is then connected with Thresholding. Thresholding is connected with Feature vectors which is then connected with Classifier. Classifier is then connected with both Speech and Non speech.
<H> Camera <R> Video <T> Cache <H> Cache <R> Image_Sequence <T> Object_Detection <H> Object_Detection <R> Info_of_Moving_Obj <T> Tracking <H> Tracking <R> Obj_Characteristic <T> Vehicle_Identify <H> Vehicle_Identify <R> Obj_classification <T> Result || If camera is Video then Cache and if Cache is Image Sequence then Object Detection. If Object Detection is Info of Moving Obj then Tracking and If Tracking is Obj Characteristic then Vehicle Identify. If Vehicle Identify is Object classification then Result.
<H> Source_Information <R> connected_with <T> Amplifier <H> Amplifier <R> connected_with <T> Channel <H> Channel <R> connected_with <T> Receiver <H> Receiver <R> connected_with <T> Target <H> External_Force <R> connected_with <T> Channel || Source Information is connected with Amplifier which is then connected with channel which is further connected with Receiver. Receiver is connected with Target and External Force is connected with channel.
<H> Speech <R> connected_with <T> Microsoft_speech_recognizer <H> Microsoft_speech_recognizer <R> connected_with <T> UWP_MediaCapture <H> UWP_MediaCapture <R> connected_with <T> Voice_to_Text <H> Voice_to_Text <R> connected_with <T> Send_text_to_LUIS.AI <H> Voice_to_Text <R> connected_with <T> Send_text_to_API.AI <H> Send_text_to_LUIS.AI <R> connected_with <T> Send_entity_to_WIKI_API <H> Send_text_to_API.AI <R> connected_with <T> Send_entity_to_Oxford_dictinary_API <H> Send_entity_to_WIKI_API <R> connected_with <T> Text <H> Send_entity_to_Oxford_dictinary_API <R> connected_with <T> Text || Sppech is connected with Microsoft speech recognizer which is then connected with UWP MediaCaptue which is further connected with Voice to Text. Voice to Text is connected with both Send text to LUIS AI and Send text to API AI. Send text to LUIS AI is then connected with Send entity to WIKI API and Send text to API AI is connected with Send entity to Oxford dictinary API. Send entity to WIKI API and Send entity to Oxford dictinary API both are connected with Text 
<H> Customer_Documents <R> connected_with <T> Review_documents? <H> Review_documents? <R> Rejected_because_of_missing_documents <T> Process_Terminates <H> Review_documents? <R> Documents_are_complete <T> Forward_to_Bank_Manager <H> Forward_to_Bank_Manager <R> connected_with <T> Profile_Done <H> Profile_Done <R> connected_with <T> Process_Terminates || Customer Documents is connected with Review documents?. If Review documents are Rejected because of missing documents then Process Terminate and If Review documents? are complete then Forward to Bank Manager which is then connected with Profile Done which is finally connected with Process Terminates.  
<H> Start <R> connected_with <T> Read_Input <H> Read_Input <R> connected_with <T> Read_Cost <H> Read_Cost <R> connected_with <T> Income>=Cost? <H> Income>=Cost? <R> Yes <T> Calculate_Profit_as_Income-Cost <H> Income>=Cost? <R> No <T> Calculate_Loss_as_Income-Cost <H> Calculate_Profit_as_Income-Cost <R> connected_with <T> Print_good <H> Calculate_Loss_as_Income-Cost <R> connected_with <T> Print_Bad <H> Print_Bad <R> connected_with <T> End <H> Print_good <R> connected_with <T> End || Start is connected with Read Input which is then connected with Read Cost which is further connected with Income>=Cost?. If Income>=Cost? is Yes then Calculate Profit as Income-Cost which is further connected with Print good and if Income>=Cost? is No then Calculate Loss as Cost-Income which is then connected with Print Bad. Print Bad and Print good both are connected with End. 
<H> Finish_work_papers <R> connected_with <T> Review <H> Review <R> connected_with <T> Complete? <H> Complete? <R> No <T> Finish_work_papers <H> Complete? <R> Yes <T> Auditor_prepares_internal_draft <H> Auditor_prepares_internal_draft <R> connected_with <T> Draft <H> Draft <R> connected_with <T> Complete? <H> Complete? <R> No <T> Auditor_prepares_internal_draft <H> Complete? <R> Yes <T> Alternate_manager_reviews <H> Alternate_manager_reviews <R> connected_with <T> Finish || Finish work papers is connected with Review which is then connected with Complete?. If Complete? is No then Finish work papers and if Complete? is Yes then Auditor prepares internal draft which is then connected with Draft which is further connected with Complete?. If Complete is No then again Auditor prepares internal draft and if Complete? is Yes then Alternate manager reviews which is then connected with Finish. 
<H> INPUT_FROM_USER <R> connected_with <T> REQUEST_RECEIVING <H> REQUEST_RECEIVING <R> connected_with <T> DOCUMENTATION <H> DOCUMENTATION R> connected_with <T> DIRECTIONAL_CONTROL_UNIT <H> DIRECTIONAL_CONTROL_UNIT <R> connected_with <T> VIP_CUSTOMER <H> VIP_CUSTOMER <R> connected_with <T> LEVEL_POSITIONING <H> LEVEL_POSITIONING <R> connected_with <T> OUTPUT_DISPLAY <H> CLOCK_CONTROL_UNIT <R> connected_with <T> OUTPUT_DISPLAY || INPUT FROM USER is connected with REQUESTING RECEIVING which is then connected with DOCUMENTATION. DOCUMENTATION is connected with DIRECTIONAL CONTROL UNIT which is then connected with VIP CUSTOMER. VIP CUSTOMER is connected with LEVEL POSITIONING which is then connected with OUTPUT DISPLAY. Also, CLOCK CONTROL UNIT is connected with OUTPUT DISPLAY.
<H> Start <R> connected_with <T> Talk_About_Topic <H> Talk_About_Topic <R> connected_with <T> Explain_Your_Segmentation <H> Explain_Your_Segmentation <R> connected_with <T> Explain_ALL_Result <H> Explain_ALL_Result <R> connected_with <T> Finish || Start is connected with Talk About Topic which is then connected with Explain Your Segmentation which is further connected with Explain All Result which is finally connected with Finish.
<H> Start <R> connected_with <T> Initialization <H> Initialization <R> connected_with <T> INPUT_bears <H> INPUT_bears <R> connected_with <T> hourwage=hours*7 <H> hourwage=hours*7 <R> connected_with <T> bearswage=bears*0.45 <H> bearswage=bears*0.45 <R> connected_with <T> total=hourswage+bearswage <H> total=hourswage+bearswage <R> connected_with <T> Print_Result <H> Print_Result <R> connected_with <T> Stop || Start is connected with Initialization which is then connected with INPUT bears which is further connected with hourwage=hours*7. hourwage=hours*7 is connected with bearswage=bears*0.45 which is then connected with total=hourswage+bearswage which is further connected with Print Result and finally connected with Stop.
<H> Input <R> connected_with <T> Signal_Conditioning <H> Signal_Conditioning <R> connected_with <T> Processor <H> Processor <R> connected_with <T> Electronics <H> Electronics <R> connected_with <T> Actuator <H> Electronics_Power_Supply <R> connected_with <T> Input <H> Electronics_Power_Supply <R> connected_with <T> Signal_Conditioning <H> Electronics_Power_Supply <R> connected_with <T> Processor <H> Power_Supply <R> connected_with <T> Electronics || Input is connected with Signal Conditioning which is then connected with Processor. Processor is connected with Electronics which is then connected with Actuator. Electronic Power Supply is connected with Input, Signal Conditioning, and Processor. Also, Power Supply is connected with Electronics. 
<H> Advance_prisons <R> connected_with <T> DIG_Prisons <H> DIG_Prisons <R> connected_with <T> Chief_Superintendent <H> Chief_Superintendent <R> connected_with <T> Superintendent <H> Superintendent <R> connected_with <T> Assistant_Superintendent <H> Assistant_Superintendent <R> connected_with <T> PoliceMan <H> PoliceMan <R> connected_with <T> Watchman || Advance prisons are connected with DIG Prisons which is then connected with Chief Superintendent which is further connected with Superintendent. Superintendent is connected with Assistant Superintendent which is then connected with PoliceMan which is finally connected with Watchman.
<H> Start <R> connected_with <T> Buy_Tea_Leaves <H> Buy_Tea_Leaves <R> connected_with <T> Heat_water <H> Heat_water <R> connected_with <T> Has_the_water_boiled? <H> Has_the_water_boiled? <R> No <T> Heat_water <H> Has_the_water_boiled? <R> Yes <T> Make_Tea <H> Make_Tea <R> connected_with <T> Stop || Start is connected with Buy Tea Leaves which is then connected with Heat water which is further connected with Has the water boiled?. If Has the water boiled? is No then Heat water and if Has the water boiled? is Yes then Make Tea which is finally connected with Stop. 
<H> Start <R> connected_with <T> Initialization <H> Initialization <R> connected_with <T> Pre_process <H> Pre_process <R> connected_with <T> Dispaly_output_C_(sum)_to_user <H> Dispaly_output_C_(sum)_to_user <R> connected_with <T> Stop || Start is connected with Initialization which is then connected with Pre process which is further connected with Display output C (sum) to user which is finally connected with Stop.
<H> Begin <R> connected_with <T> Read_A <H> Read_A <R> connected_with <T> Read_B <H> Read_B <R> connected_with <T> Calculate_Sum_as_A+B <H> Calculate_Sum_as_A+B <R> connected_with <T> Output <H> Output <R> connected_with <T> End || Begin is connected with Read A which is then connected with Read B. Read B is connected with Calculate Sum as A+B which is then connected with Output which is finally connected with End.  
<H> Peeled_Peanuts <R> connected_with <T> Sorting <H> Sorting <R> connected_with <T> Baking_(150C,15_minutes) <H> Baking_(150C,15_minutes) <R> connected_with <T> Add_Ingridents <H> Add_Ingridents <R> connected_with <T> Milling/Grinding <H> Milling/Grinding <R> connected_with <T> Peanuts_flour <H> Peanuts_flour <R> connected_with <T> Wait_for_the_result || Peeled Peanuts is connected with Sorting which is then connected with Baking (150C,15 minutes) which is further connected with Add Ingridents. Add Ingridents is connected with Milling/Grinding which is then connected with Peanuts flour which is finally connected with Wait for the result. 
<H> Measurement <R> connected_with <T> Primary_Sensing_Element <H> Primary_Sensing_Element <R> connected_with <T> Transmitter <H> Transmitter <R> connected_with <T> Channel <H> Channel <R> connected_with <T> Receiver <H> Receiver <R> connected_with <T> End_Device || Measurement is connected with Primary Sensing Element which is then connected with Transmitter. Transmitter is connected with Channel which is then connected with Receiver which is finally connected with End Device.
<H> Start <R> connected_with <T> Update_the_status_of_the_Application_on_Do-it_as_Placed <H> Update_the_status_of_the_Application_on_Do-it_as_Placed <R> connected_with <T> Create_link_for_process <H> Create_link_for_process <R> connected_with <T> Create_'Application_Placed'_activity <H> Create_'Application_Placed'_activity <R> connected_with <T> Process_Complete <H> Process_Complete <R> connected_with <T> End || Start is connected with Update the status of the Application on Do-it as Placed which is then connected with Create link for process. Create link for process is connected with Create 'Applicant Placed' activity which is then connected with Process Complete which is finally connected with End.
<H> Start <R> connected_with <T> I_want_this? <H> I_want_this? <R> NO <T> Don't_Do_It <H> I_want_this? <R> YES <T> End_in_climax? <H> End_in_climax? <R> NO <T> Do_it <H> End_in_climax? <R> YES <T> Good_Movie? <H> Good_Movie? <R> NO <T> Don't_Do_It <H> Good_Movie? <R> YES <T> Do_It || Start is connected with I want this?. If I want this is NO then Don't Do it and if I want this? is YES then End in climax?. If End in climax? is No then Do it and if End in climax? is YES then Good Movie?. If Good Movie? is NO then Don't Do it and if Good Movie? is YES then Do it.   
<H> Encoder <R> connected_with <T> Channel_Encoder <H> Channel_Encoder <R> connected_with <T> Modulation <H> Modulation <R> connected_with <T> Amplifier <H> Amplifier <R> connected_with <T> Demodulation <H> Demodulation <R> connected_with <T> Channel_Decoder <H> Channel_Decoder <R> connected_with <T> Decoder || Encoder is connected with Channel Encoder which is then connected with Modulation. Modulation is connected with Amplifier which is then connected with Demodulation which is further connected with Channel Decoder which is finally connected with Decoder.
<H> START <R> connected_with <T> Initialize_A_and_B <H> Initialize_A_and_B <R> connected_with <T> SUM=A+B <H> SUM=A+B <R> connected_with <T> Print_Output <H> Print_Output <R> connected_with <T> STOP || START is connected with Initialize A and B which is then connected with Sum=A+B which is further connected with Print Output which is finally connected with STOP.
<H> Design_a_Postcard <R> connected_with <T> Is_the_design_based_on_a_template? <H> Is_the_design_based_on_a_template? <R> connected_with <T> Yes <H> Is_the_design_based_on_a_template? <R> connected_with <T> No <H> Yes <R> connected_with <T> Select_the_specified_design_template <H> No <R> connected_with <T> Draft_a_design_based_on_best_practices <H> Select_the_specified_design_template <R> connected_with <T> Modification <H> Draft_a_design_based_on_best_practices <R> connected_with <T> Offer <H> Modification <R> connected_with <T> Submit_for_approval <H> Offer <R> connected_with <T> Submit_for_approval || Design a Postcard which is connected with Is the design based on a template? which is connected with both Yes and No. Yes is connected with Select the specified design template which is then connected with Modification which is further connected with Submit for approval. No is connected with Draft a design based on best practices which is then connected with Offer which is finally connected with Submit for approval. 
<H> Coding <R> connected_with <T> Channel_coding <H> Channel_coding <R> connected_with <T> Modulator <H> Modulator <R> connected_with <T> Demodulator <H> Demodulator <R> connected_with <T> Channel_coding <H> Channel_coding <R> connected_with <T> Output || Coding is connected with Channel coding which is then connected with Modulator which is further connected with Demodulator. Demodulator is connected with Channel coding which is finally connected with Output.
<H> Start <R> connected_with <T> Input_name <H> Input_name <R> connected_with <T> If_name_is_'Mr_West' <H> If_name_is_'Mr_West' <R> connected_with <T> Output <H> Output <R> connected_with <T> End <H> If_name_is_'Mr_West' <R> connected_with <T> End || Start is connected with input name which is then connected with If name is 'Mr West' which is further connected with both Output and End. Also, Output is connected with End.
<H> Begin <R> connected_with <T> Input_length_and_width <H> Input_length_and_width <R> connected_with <T> Area=length*width <H> Area=length*width <R> connected_with <T> Print_area <H> Print_area <R> connected_with <T> Calculate_another_area? <H> Calculate_another_area? <R> Yes <T> Input_length_and_width <H> Calculate_another_area? <R> No <T> Finish || Begin is connected with Input length and width which is then connected with Area=length*width. Area=length*width is connected with Print area which is then connected with Calculate another area?. If Calculate another area? is Yes then Input length and width and if Calculate another area? is No then Finish.  
<H> Begin <R> connected_with <T> Input_Amount <H> Input_Amount <R> connected_with <T> Enter_Variables <H> Enter_Variables <R> connected_with <T> Input_Rate <H> Input_Rate <R> connected_with <T> Compute_Interest_=_Amount*Year*Rate/100 <H> Compute_Interest_=_Amount*Year*Rate/100 <R> connected_with <T> Output <H> Output <R> connected_with <T> End || Start is connected with Input Amount which is then connected with Enter Variables. Enter Variables is connected with Input Rate which is then connected with Compute Interest=Amount*Years*Rate/100 which is further connected with Output and finally connected with End.
<H> Document <R> connected_with <T> Make_an_edit <H> Make_an_edit <R> connected_with <T> Was_the_article_edited_further? <H> Was_the_article_edited_further? <R> Yes <T> Do_you_agree_with_the_changes <H> Was_the_article_edited_further? <R> No <T> Final_Document <H> Do_you_agree_with_the_changes <R> Disagree <T> seek_the_compromise <H> seek_the_compromise <R> Implement <T> Make_an_edit <H> Do_you_agree_with_the_changes <R> Agree <T> Final_Document || Document is connected with Make an edit which is then connected with Was the article edited further?. If Was the article edited further? is Yes then Do you agree with the changes? and If Was the article edited further? is No then Final Document. If Do you agree with the changes? Disagree then Seek the compromise which if Seek the compromise is Implement then Make an edit and if Do you agree with the changes? Agree then Final Document.
<H> Start <R> connected_with <T> Phone_Rings <H> Phone_Rings <R> connected_with <T> Ready_to_Get_Up? <H> Ready_to_Get_Up? <R> NO <T> Hit_Snooze_Button <H> Hit_Snooze_Button <R> connected_with <T> Ignore <H> Ignore <R> connected_with <T> Phone_Rings <H> Ready_to_Get_Up? <R> Yes <T> Climb_Out_of_Bed <H> Climb_Out_of_Bed <R> connected_with <T> End || Start is connected with Phone Rings which is then connected with Ready to Get Up?. If Ready to Get Up? is No then Hit Snooze Button which is then connected with Ignore and further connected with Phone Rings. If Ready to Get Up? is Yes then Climb Out of Bed which is finally connected with End. 
<H> Start <R> connected_with <T> Input_N <H> Input_N <R> connected_with <T> Temp=n_modulo_2 <H> Temp=n_modulo_2 <R> connected_with <T> Temp=0 <H> Temp=0 <R> YES <T> Even <H> Temp=0 <R> NO <T> Odd <H> Even <R> connected_with <T> Output_Answer <H> Odd <R> connected_with <T> Output_Answer <H> Output_Answer <R> connected_with <T> End || Start is connected with Input N which is then connected with Temp=n modulo 2 which is further connected with Temp=0. If Temp=0 is YES then Even and if Temp=0 is NO then Odd. Both Even and Odd are connected with Output Answer which is finally connected with End.
<H> connection <R> connected_with <T> Custom_Place_Order <H> Custom_Place_Order <R> connected_with <T> Order_Check <H> Order_Check <R> connected_with <T> Is_the_order_a_normal_order? <H> Is_the_order_a_normal_order? <R> No <T> Is_the_order_a_special_order? <H> Is_the_order_a_special_order? <R> No <T> End <H> Is_the_order_a_special_order? <R> Yes <T> Confirmation <H> Is_the_order_a_normal_order? <R> connected_with <T> Confirmation <H> Confirmation <R> connected_with <T> Dispatch_the_order <H> Dispatch_the_order <R> connected_with <T> End || Connection is connected with Customer Place Order which is then connected with Order Check which is further connected with Is the order a normal order?. If Is the order a normal order? is No then Is the order a special order? which if Is the order a special order? is No then End and if Is the order a special order? is Yes then Confirmation. Also Is the order a normal order? is connected with Confirmation which is then connectedw with Dispatch the Order which is finally connected with End.  
<H> Start_Project <R> connected_with <T> Create_Project_with_desired_settings <H> Create_Project_with_desired_settings <R> connected_with <T> Create_folder_for_categorization <H> Create_folder_for_categorization <R> connected_with <T> Fill_Information <H> Fill_Information <R> connected_with <T> Collect_info_like_wire_size,_length,_etc. <H> Collect_info_like_wire_size,_length,_etc. <R> connected_with <T> Genertae_Report || Start Project is connected with Create Proect with desired settings which is then connected with Create folder for categorization. Create folder for categorization is connected with Fill Information which is then connected with Collect info like wire size, length, etc. which is finally connected with Generate Report. 
<H> Begin <R> connected_with <T> Has_5_attempts <H> Has_5_attempts <R> Yes <T> Lock_account <H> Has_5_attempts <R> No <T> Login <T> Lock_account <R> connected_with <T> Alert_user <H> Login <R> connected_with <T> Access <H> Access <R> No <T> Has_5_attempts <H> Access <R> Yes <T> Grant_sccess <H> Grant_sccess <R> connected_with <T> End <H> Alert_user <R> connected_with <T> End || Begin is connected with Has 5 attempts which if Has 5 attempts is Yes then Lock account and if Has 5 attempts is No then Login. Lock account is connected with Alert user and Login is connected with Access. If Access is No then check Has 5 attempts and if Access is Yes then Grant success. Alert user and Grant success both are connected with End.  
<H> Start <R> connected_with <T> Initial_population <H> Initial_population <R> connected_with <T> Controller <H> Controller <R> connected_with <T> Selection <H> Selection <R> connected_with <T> Fixed <H> Fixed <R> connected_with <T> Mutation <H> Mutation <R> connected_with <T> Has_the_population_converged? <H> Has_the_population_converged? <R> No <T> Controller <H> Has_the_population_converged? <R> Yes <T> End || Start is connected with Initial population which is then connected with Controller which is further connected with Selection. Selection is connected with Fixed which is then connected with Mutation which is further connected with Has the population converged?. If Has the population converged? is No then controller and if Has the population converged? is Yes then End. 
<H> Start <R> connected_with <T> Read_Temperature <H> Read_Temperature <R> connected_with <T> Temperature<32? <H> Temperature<32? <R> YES <T> Not_Cold <H> Temperature<32? <R> No <T> Cold <H> Not_Cold <R> connected_with <T> End <H> Cold <R> connected_with <T> End || Start is connected with Read Temperature which is then connected with Temperature<32?. If Temperature<32? is Yes then Not Cold and If Temperature<32? is No then Cold. Both Not Cold and Cold are connected with End.  
<H> Begin <R> connected_with <T> Make_all_four_bits <H> Make_all_four_bits <R> connected_with <T> 0<x<9 <H> 0<x<9 <R> NO <T> 9<x<15 <H> 0<x<9 <R> connected_with <T> ASCII=x+30 <H> 9<x<15 <R> connected_with <T> ASCII=x+41 <H> ASCII=x+30 <R> connected_with <T> Return_ASCII <H> ASCII=x+41 <R> connected_with <T> Return_ASCII || Begin is connected with Make all four bits which is then connected with 0<x<9. If 0<x<9 is NO then 9<x<15 and if 0<x<9 is YES then ASCII=x+30 which is then connected with Return ASCII. If 9<x<15 is YES then ASCII=x+41 which is then connected with Return ASCII.
<H> Begin <R> connected_with <T> Initialize_X<0 <H> Initialize_X<0 <R> connected_with <T> X=X+2 <H> X=X+2 <R> connected_with <T> Print_X <H> Print_X <R> connected_with <T> X<20 <H> X<20 <R> YES <T> X=X+2 <H> X<20 <R> NO <T> END || Begin is connected with Initialize X<0 which is then connected with X=X+2. X=X+2 is connected with Print X which is then connected with X<20. If X<20 is YES then X=X+2 and if X<20 is NO then END. 
<H> Begin <R> connected_with <T> Decode_the_population <H> Decode_the_population <R> connected_with <T> Find_Fitness <H> Find_Fitness <R> connected_with <T> Flexibilty <H> Flexibilty <R> connected_with <T> Crossover <H> Crossover <R> connected_with <T> Track <H> Track <R> connected_with <T> Replace <H> Replace <R> connected_with <T> New_population <H> New_population <R> connected_with <T> Decode_the_population || Begin is connected with Decode the population which is then connected with Find Fitness which is further connected with Flexibility. Flexibility is connected with Crossover which is then connected with Track which is further connected with Replace. Replace is connected with New population which is again connected with Decode the population.
<H> Initial <R> connected_with <T> GetQuery() <H> GetQuery() <R> connected_with <T> Open_query_or_Create_query <H> Open_query_or_Create_query <R> connected_with <T> Process <H> Open_query_or_Create_query <R> connected_with <T> Read_or_make_changes <H> Read_or_make_changes <R> connected_with <T> Save <H> Save <R> connected_with <T> Process <H> Save <R> connected_with <T> Close <H> Process <R> connected_with <T> Close <H> Close <R> connected_with <T> Open_PeopleSoft_Query_to_run || Initial is connected with GetQuery() which is then connected with Open query or Create query. Open query or Create query is then connected with both Process and Read or make changes which is then connected with Save. Save is then connected with both Process and Close. Process is also connected with close which is then connected with Open PeopleSoft Query to run.    
<H> Video_Document <R> connected_with <T> Extraction <H> Extraction <R> connected_with <T> Caption_Segmentation <H> Caption_Segmentation <R> connected_with <T> Classifier <H> Classifier <R> connected_with <T> Video_Scenes_Library <H> Query <R> connected_with <T> Query_Conversion <R> connected_with <T> Sampling <H> Sampling <R> connected_with <T> Retrieve_video_scenes_with_the_same_label <H> Retrieve_video_scenes_with_the_same_label <R> Retrieve <T> Video_Scenes_Library <H> Retrieve_video_scenes_with_the_same_label <R> connected_with <T> Filter <H> Filter <R> connected_with <T> Result || Video Document is connected with Extraction which is then connected with Capital Segmentation which is further connected with Classifier. Classifier is connected with Video Scenes Library. Query is connected with Query Conversion which is then connected with Sampling which is further connected with Retrieve video scenes with the same label. If Retrieve video scenes with the same label is Retrieve then Video Scenes Library. Retrieve video scenes with the same label is connected with Filter which is then connected with Result. 
<H> Start <R> connected_with <T> Human_Intelligence <H> Human_Intelligence <R> Apply_Pre-processing <T> Pre-processed_Silhouette <H> Pre-processed_Silhouette <R> Divide_into_radial_bins <T> Segmentation <H> Segmentation <R> Extract_features_from_each_radial_bin <T> Find_all_values <H> Find_all_values <R> Combine_all_features <T> Feature_Vector <H> Feature_Vector <R> connected_with <T> End || Start is connected with Human Intelligence which If Human Intelligence is Apply Pre-processing then Pre-processes Silhouette. If Pre-processes Silhouette is Divide into radial bins then Segmentation. If Segmentation is Extract features from each radial bin then Find all Values. If Find all Values is Combine all features then Feature Vector which is then connected with End.   
<H> Image_collection <R> connected_with <T> Image_preprocessing <H> Image_preprocessing <R> connected_with <T> Segmentation <H> Segmentation <R> connected_with <T> Important_vectors <H> Important_vectors <R> connected_with <T> Classifier_training <H> Important_vectors <R> connected_with <T> Classification <H> Classifier_training <R> connected_with <T> Classification <H> Classification <R> connected_with <T> Output || Image collection is connected with Image preprocessing which is then connected with Segmentation. Segmentation is connected with Important vectors which is then connected with both Classifier training and classification. Classifier training is connected with Classification which is then connected with Output.
<H> Start <R> connected_with <T> Do_you_work_in_walking_distance_from_home? <H> Do_you_work_in_walking_distance_from_home? <R> Yes <T> Walk_to_work. <H> Walk_to_work. <R> connected_with <T> End <H> Do_you_work_in_walking_distance_from_home? <R> No <T> Do_you_have_a_bike <H> Do_you_have_a_bike <R> Yes <T> Drive_to_work. <H> Drive_to_work. <R> connected_with <T> End <H> Do_you_have_a_bike <R> No <T> Use_public_transportation. <H> Use_public_transportation. <R> connected_with <T> End || Start is connected with Do you work in Walking distance from home?. If Do you work in Walking distance from home? is Yes then Walk to work which is then connected with End and if Do you work in Walking distance from home? is No then Do you have a bike. If Do you have a bike is Yes then Drive to work which is then connected with End and if Do you have a bike is No then Use public transportation which is finally connected with End. 
<H> Start <R> connected_with <T> Take_Variables <H> Take_Variables <R> connected_with <T> Process <H> Process <R> connected_with <T> Print <H> Print <R> connected_with <T> End || Start is connected with Take Variables which is then connected with Process. Process is connected with Print which is then connected with End.
<H> Update_the_program_with_the_current_date <R> connected_with <T> Track_records <H> Track_records <R> connected_with <T> Data_delineation_and_conversion_to_text_files <H> Data_delineation_and_conversion_to_text_files <R> connected_with <T> Set_initial_conditions_from_previous_simulations <H> Set_initial_conditions_from_previous_simulations <R> connected_with <T> Execute_Model <H> Execute_Model <R> connected_with <T> Plot_inundation_maps <H> Plot_inundation_maps <R> connected_with <T> Update_records <H> Update_records <R> connected_with <T> Upload_the_KML_files_to_Google_Earth || Update the program with the current date which is then connected with Track records which is then connected with Data delineation and conversion to text files. Data delineation and conversion to text files is connected with Set initial conditions from previous simulations which is then connected with Execute Model which is further connected with Plot inundation maps. Plot inundation maps is connected with Update records which is then connected with Upload the KML files to Google Earth.  
<H> INPUT_DEVICE <R> connected_with <T> INPUT_POINT <H> INPUT_POINT <R> connected_with <T> ELECTRO_MAGNETIC <H> ELECTRO_MAGNETIC <R> connected_with <T> CPU || INPUT DEVICE is connected with INPUT POINT which is then connected with ELECTRO MAGNETIC which is finally connected with CPU.	 
<H> Start <R> connected_with <T> Input_single-subect_score <H> Input_single-subect_score <R> connected_with <T> Subect_Choice <H> Subect_Choice <R> connected_with <T> single-subect_socre_x_number_of_subjects <H> single-subect_socre_x_number_of_subjects <R> connected_with <T> If_total_scores>800 <H> If_total_scores>800 <R> connected_with <T> Low_grade_school <H> If_total_scores>800 <R> connected_with <T> High_grade_school <H> Low_grade_school <R> connected_with <T> End <H> High_grade_school <R> connected_with <T> End || Start is connected with Input single-subject score which is then connected with Subject Choice which is further connected with single-subject socre x number of subjects. single-subject socre x number of subjects is connected with If total socres>800 which is then connected with both Low grade school and High Grade School. Low grade school and High Grade school both are connected with End.  
<H> Start <R> connected_with <T> Input <H> Input <R> connected_with <T> Decision <H> Decision <R> Yes <T> ODD <H> Decision <R> No <T> Even <H> ODD <R> connected_with <T> End <H> Even <R> connected_with <T> End || Start is connected with Input which is then connected with Decision. If Decision is Yes then ODD which is then connected with End and if Decision is No then Even which is then connected with End.  
<H> START <R> connected_with <T> Initialization <H> Initialization <R> connected_with <T> A%2==0? <H> A%2==0? <R> FALSE <T> STOP <H> A%2==0? <R> TRUE <T> Even <H> Even <R> connected_with <T> Increment/decrement <H> Increment/decrement <R> connected_with <T> A%2==0? || START is connected with Initialization which is then connected with A%2==0?. If A%2==0? is FALSE then STOP and if A%2==0? is TRUE then Even which is then connected with Increment/decrement which is again connected with A%2==0? 
<H> connection <R> connected_with <T> Train_Time? <H> Train_Time? <R> connected_with <T> Before_4_pm? <H> Before_4_pm? <R> Yes <T> He_is_in_college <H> Before_4_pm? <R> No <T> He_is_in_Playground <H> He_is_in_Playground <R> connected_with <T> Check_Time <R> connected_with <T> Before_7_pm? <H> Before_7_pm? <R> Yes <T> He_is_at_School <H> Before_7_pm? <R> No <T> He_is_in_Playground <H> He_is_at_School <R> connected_with <T> End || Connection is connected with Train Time? which is then connected with Before 4 pm?. If Before 4 pm? is Yes then He is in College and if Before 4 pm? is No then He is in Playground which is then connected with Check Time. Check Time is connected with Before 7 pm?. If Before 7 pm? is No then He is in Playground and if Before 7 pm? is Yes then He is at Scool which is finally connected with End. 
<H> Initialize_all_variables <R> connected_with <T> Take_Values <H> Take_Values <R> connected_with <T> Decode_chromosomes <H> Decode_chromosomes <R> connected_with <T> Total_samples <H> Total_samples <R> connected_with <T> Select_mates <H> Select_mates <R> connected_with <T> Mating <H> Mating <R> connected_with <T> Sample <H> Sample <R> connected_with <T> Convergence_Check <H> Convergence_Check <R> connected_with <T> Decode_chromosomes || Initialize all variables is connected with Take Values which is then connected with Decode chromosomes. Decode Chromosomes is connected with Total samples which is then connected with Select mates which is further connected with Mating. Mating is connected with Sample which is then connected with Convergence Check which is finally connected with Decode chromosomes.
<H> START <R> connected_with <T> Initialize <H> Initialize <R> connected_with <T> Take_Values <H> Take_Values <R> connected_with <T> Input_Rate <H> Input_Rate <R> connected_with <T> Compute_Interest_=_Amount*Years*Rate/100 <H> Compute_Interest_=_Amount*Years*Rate/100 <R> connected_with <T> Output_Interest <H> Output_Interest <R> connected_with <T> End || Start is connected with Initialize which is then connected with Take Values which is further connected with Input Rate. Input Rate is connected with Compute Interest=Amount*Years*Rate/100 which is then connected with Output Interest which is finally connected with End.
<H> Sort_Population <R> connected_with <T> Calculate_males_and_females <H> Calculate_males_and_females <R> connected_with <T> Calculate_crowding_distance <H> Calculate_crowding_distance <R> connected_with <T> return || Sort Population is connected with Calculate males and females which is then connected with Calculate crowding distance which is finally connected with return.
<H> Home <R> connected_with <T> Inverter <H> Inverter <R> connected_with <T> Main_circuit <H> Main_circuit <R> connected_with <T> AC_loads <H> Main_circuit <R> connected_with <T> Electricity_utility || Home is connected with Inverter which is then connected with Main circuit. Main circuit is then connected with both AC loads and Electricity utility.
<H> Begin <R> connected_with <T> Add_Malt <H> Add_Malt <R> connected_with <T> Smash_Malt <H> Smash_Malt <R> connected_with <T> Gelatinization <H> Gelatinization <R> connected_with <T> Filter <H> Filter <R> connected_with <T> Boil <H> Boil <R> connected_with <T> Left_It <H> Left_It <R> connected_with <T> Cooling <H> Cooling <R> connected_with <T> Fermentation <H> Fermentation <R> connected_with <T> Sample <H> Sample <R> connected_with <T> Filter <H> Filter <R> connected_with <T> Packaging <H> Packaging <R> connected_with <T> Deliver_to_Warehouse <H> Deliver_to_Warehouse <R> connected_with <T> End || Begin is connected with Add Malt which is then connected with Smash Malt which is further connected with Gelatinization. Gelatinization is connected with Filter which is then connected with Boil which is further connected with Left It. Left It is connected with cooling which is then connected with Fermentation which is further connected with Sample. Sample is connected with Filter which is then connected with Packing which is further connected with Deliver to Warehouse which is finally connected with End.
<H> Headline <R> connected_with <T> Sample <H> Sample <R> No <T> Process <H> Sample <R> Yes <T> Sample_Headline <H> Sample_Headline <R> No <T> End <H> Sample_Headline <R> Yes <T> Sample1_Headline <H> Sample1_Headline <R> No <T> Process <H> Sample1_Headline <R> Yes <T> End || Headline is connected with Sample which if sample is No then Process and if sample is yes then Sample Headline. If Sample Headline is No then End and if Sample Headline is Yes then Sample1 Headline. If Sample1 Headline is No then Process and if Sample1 Headline is Yes then End. 
<H> Image <R> connected_with <T> Image_Enhancement <H> Image_Enhancement <R> connected_with <T> Sampling <H> Sampling <R> connected_with <T> Morphological_Processing <H> Morphological_Processing <R> connected_with <T> Segmentation <H> Segmentation <R> connected_with <T> Obect_Recognition <H> Obect_Recognition <R> connected_with <T> Final_Result || Image is connected with Image Enhancement which is then connected with Sampling which is further connected with Morphological Processing. Morphological Processing is connected with Segmentation which is then connected with Object Recognition which is finally connected with Final Result. 
<H> Initialization <R> connected_with <T> Condition1 <H> Condition1 <R> False <T> Stop <H> Condition1 <R> True <T> Condition2 <H> Condition2 <R> Flase <T> End <H> Condition2 <R> True <T> Statements <H> Statements <R> connected_with <T> Decrement <H> Decrement <R> connected_with <T> Condition2 <H> End <R> connected_with <T> Increment <H> Increment <R> connected_with <T> Condition1 || Initialization is connected with Condition1 which if Condition1 is False then Stop and if Condition1 is True then Condition2. If Condition2 is False then End and if Condition2 is True then Statements which is then connected with Decrement which is again connected with Condition2. Also, End is connected with Increment which is again connected with Condition. 
<H> Information_Source <R> connected_with <T> Source_Encoder <H> Source_Encoder <R> connected_with <T> Channel_Encoder <H> Channel_Encoder <R> connected_with <T> Sample <H> Sample <R> connected_with <T> Channel <H> Channel <R> connected_with <T> Modular <H> Modular <R> connected_with <T> Channel_Decoder <H> Channel_Decoder <R> connected_with <T> Source_Decoder <H> Source_Decoder <R> connected_with <T> Information_Sink || Information Source is connected with Source ENcoder which is then connected with Channel Encoder. Channel Encoder is connected with Sample which is then connected with Channel which is further connected with Modulator. Modulator is connected with Channel Decoder which is then connected with Source Decoder which is further connected with Information Sink.
<H> Begin <R> connected_with <T> package_installation <H> package_installation <R> connected_with <T> copy <H> copy <R> connected_with <T> Unzip <H> Unzip <R> connected_with <T> finetuning <H> finetuning <R> connected_with <T> values <H> values <R> connected_with <T> generate_tar <H> values <R> connected_with <T> generate_disk_Image <H> values <R> connected_with <T> Image || Begin is connected with package Installation which is then connected with copy. copy is connected with Unzip which is then connected with finetuning which is further connected with Values. Values is then connected with generate tar, generate disk image and Image.
<H> Start <R> connected_with <T> Input_Variables <H> Input_Variables <R> connected_with <T> Foundation_Excavation <H> Foundation_Excavation <R> connected_with <T> Base_Check <H> Base_Check <R> connected_with <T> Branch <H> Branch <R> connected_with <T> Ratio_Select <H> Branch <R> connected_with <T> Stone_Preparation <H> Branch <R> connected_with <T> Wall_Masonry <H> Wall_Masonry <R> connected_with <T> Jointing <H> Jointing <R> connected_with <T> END || Start is connected with Input Variables which is then connected with Foundation Excavation. Foundation Excavation is connected with Base Check which is then connected with Branch. Branch is then connected with Ratio Select, Stone Preparation, and Wall Masonry. Wall Masonry is connected with Jointing which is then connected with END.                                                                                                                                                                                                                                         