<H> Start <R> connected_with <T> Is_your_apps_main_goal_is_to_support_the_porduct <H> Is_your_apps_main_goal_is_to_support_the_porduct <R> Yes <T> Consider_hit_apps <H> Is_your_apps_main_goal_is_to_support_the_porduct <R> connected_with <T> Is_your_app_inherently_viral? <H> Is_your_app_inherently_viral? <R> connected_with <T> Consider_Free_with_IAPs <H> Is_your_app_inherently_viral? <R> connected_with <T> Does_user_have_valid_ID <H> Does_user_have_valid_ID <R> connected_with <T> Consider_Free_with_IAPs <H> Does_user_have_valid_ID <R> connected_with <T> Can_you_easily_explain_the_apps_value_in_screenshots ? <H> Can_you_easily_explain_the_apps_value_in_screenshots? <R> connected_with <T> Paid_service <H> Can_you_easily_explain_the_apps_value_in_screenshots? <R> connected_with <T> Is_the_app_itself_your_core_revenue_stream <H> Is_the_app_itself_your_core_revenue_stream <R> connected_with <T> Paid_service || Start is connected with Is your apps main goal is to support the porduct?. If Is your apps main goal is to support the porduct? is Yes then Consider hit apps. Also, Is your apps main goal is to support the porduct? is connected with Is your app inherently viral? hich is then connected with both Consider Free with IAPs and Does user have valid ID?. Does user have valid ID? is connected with both Consider Free with IAPs and Can you easily explain the apps value in screenshots. Can you easily explain the apps value in screenshots is connected with both Paid service and Is the app itself your core revenue stream which is also connected with Paid service.    
<H> Begin <R> connected_with <T> Do_you_want_to_do_this? <H> Do_you_want_to_do_this? <R> connected_with <T> Don't_do_it <H> Don't_do_it <R> connected_with <T> End <H> Do_you_want_to_do_this? <R> connected_with <T> Will_it_likely_end_in_disaster? <H> Will_it_likely_end_in_disaster? <R> No <T> Do_it <H> Do_it <R> connected_with <T> End <H> Will_it_likely_end_in_disaster? <R> Yes <T> Good_Movie? <H> Good_Movie? <R> No <T> Don't_do_it <H> Good_Movie? <R> Yes <T> Do_it || Begin is connected with Do you want to do this? which is then connected with Don't do it which is further connected with End. Do you want to do this? is also connected with Will it likely end in disaster?. If Will it likely end in disaster? is No then Do it which is then connected with End and if Will it likely end in disaster? is Yes then Good Movie?. If Good Movie? is No then Don't do it and if Good Movie? is Yes then Do it.   
<H> New_Member <R> User_name_Password <T> Login <H> Login <R> connected_with <T> Authentication <H> Authentication <R> connected_with <T> D1 <H> Authentication <R> ADP_Username_ADP_Password <T> Validation <H> Authentication <R> If_not_a_member <T> Print_info <H> Print_info <R> connected_with <T> New_Member <H> Authentication <R> If_existing_member <T> Validation <H> Validation <R> ADP_Username_ADP_Password <T> D2 || If New Member eneters User name and Password then Login which is then connected with Authentication which is then connected with D1. If Authentication is existing member then validation and if Authentication is not a member then Print info which is then connected with New Member. Also, If Authentication is ADP Username ADP Password then Validation and if Validation is ADP Username ADP Password then D2.
<H> Can_I_Have_a_Baby? <R> connected_with <T> Are_you_married? <H> Are_you_married? <R> Yes <T> Can_you_afford_his/her_expense? <H> Are_you_married? <R> No <T> Are_you_an_adult? <H> Are_you_an_adult? <R> No <T> Adopt_a_baby <H> Are_you_an_adult? <R> Yes <T> Do_you_have_a_girlfriend <H> Do_you_have_a_girlfriend <R> No <T> Can_you_afford_his/her_expense? <H> Do_you_have_a_girlfriend <R> Yes <T> Ready_for_operation <H> Ready_for_operation <R> Yes <T> Can_you_afford_his/her_expense? <H> Can_you_afford_his/her_expense? <R> yes <T> Do_you_have_enough_time_to_take_care_of_him/her? <H> Can_you_afford_his/her_expense? <R> No <T> Adopt_a_baby <H> Ready_for_operation <R> No <T> Adopt_a_baby <H> Do_you_have_enough_time_to_take_care_of_him/her? <R> No <T> Adopt_a_baby <H> Do_you_have_enough_time_to_take_care_of_him/her? <R> Yes <T> Yes,_you_can_have_a_baby. || Can I Have a Baby? is connected with Are you married?. If Are you married? is Yes then Can you afford his/her expense? and If Are you married? is No then Are you an adult?. If Are you an adult? is No then Adopt a baby and if Are you an adult? is Yes then Do you have a girlfriend/boyfriend?. If Do you have a girlfriend/boyfriend? is No then Can you afford his/her expense? and if Do you have a girlfriend/boyfriend? is Yes then Ready for operation. If Ready for operation is Yes then Can you afford his/her expense? and if Ready for operation is No then Adopt a baby. Also, If Can you afford his/her expense? is Yes then Do you have enough time to take care of him/her? and if Can you afford his/her expense? is No then Adopt a baby. If Do you have enough time to take care of him/her? is No then also Adopt a baby and if Do you have enough time to take care of him/her? is Yes then yes, you can have a baby.    
<H> Customer_Consulting_and_Quotation <R> connected_with <T> Deal? <H> Deal? <R> No <T> Go_home <H> Deal? <R> Yes <T> Invoice <H> Invoice <R> connected_with <T> Shipping <H> Shipping <R> connected_with <T> Custom_Clearance <H> Custom_Clearance <R> connected_with <T> tariff_Payment <H> Tariff_Payment <R> connected_with <T> Delivery <H> Delivery <R> connected_with <T> Payment_mode <H> Payment_mode <R> connected_with <T> Pay_Foreign_Exchange? <H> Pay_Foreign_Exchange? <R> No <T> End <H> Pay_Foreign_Exchange? <R> Yes <T> Payment <H> Payment <R> connected_with <T> End || Customer Consulting and Quotation is connected with Deal? which if Deal? is No then Go home and if Deal? is Yes then Invoice which is then connected with Shipping. Shipping is connected with Custom Clearance which is then connected with Tariff Payment which is further connected with Delivery. Delivery is connected with Payment mode which is then connected with Pay Foreign Exchange?. If Pay Foreign Exchange is No then End and if Pay Foreign Exchange is Yes then Payment which is then connected with End. 
<H> Customer_Consulting_and_Quotation <R> connected_with <T> Deal? <H> Deal? <R> No <T> Go_home <H> Deal? <R> Yes <T> Invoice <H> Invoice <R> connected_with <T> Shipping <H> Shipping <R> connected_with <T> Custom_Clearance <H> Custom_Clearance <R> connected_with <T> Payment_mode <H> Payment_mode <R> connected_with <T> Delivery <H> Delivery <R> connected_with <T> Service_Payment <H> Service_Payment <R> connected_with <T> Pay_Foreign_Exchange? <H> Pay_Foreign_Exchange? <R> No <T> Stop <H> Pay_Foreign_Exchange? <R> Yes <T> Payment <H> Payment <R> connected_with <T> End || Customer Consulting and Quotation is connected with Deal? which if Deal? is No then Go home and if Deal? is Yes then Invoice which is then connected with Shipping. Shipping is connected with Custom Clearance which is then connected with Payment mode which is further connected with Delivery. Delivery is connected with Service Payment which is then connected with Pay Foreign Exchange?. If Pay Foreign Exchange is No then Stop and if Pay Foreign Exchange is Yes then Payment which is then connected with Stop.
<H> Exercise <R> connected_with <T> Focus_on_breathing <H> Focus_on_breathing <R> connected_with <T> Repeat <H> Repeat <R> connected_with <T> Realize_distraction <H> Realize_distraction <R> NO <T> Repeat <H> Realize_distraction <R> YES <T> Focus_on_breathing || Exercise is connected with Focus on breathing which is then connected with Repeat which is further connected with Realize distraction. If Realize distraction is NO then Repeat and if Realize distraction is YES then Focus on breathing.
<H> Start <R> connected_with <T> homepage <H> homepage <R> connected_with <T> have_an_account <H> have_an_account <R> No <T> Sign_up <H> Sign_up <R> connected_with <T> Give_info <H> Give_info <R> connected_with <T> Submit <H> Submit <R> connected_with <T> Log_in <H> have_an_account <R> yes <T> Log_in <H> Log_in <R> connected_with <T> Enter_e-mail_and_password <H> Enter_e-mail_and_password <R> connected_with <T> Authentication <H> Authentication <R> no <T> Log_in <H> Authentication <R> yes <T> loged_in_to_the_system <H> loged_in_to_the_system <R> connected_with <T> end || Start is connected with homepage which is then connected with have an account. If have an account is No then Sign up which is then connected with Give info and if have an account is yes then Log in. Also, Give info is connected with Submit which is further connected Log in. Log in is connected with Enter e-mail and password which is then connected with Authentication. If Authentication is no then Log in and if Authentication is yes then logged in to the system which is finally connected with end. 
<H> Purchase_Process <R> connected_with <T> Fill_out_details <H> Fill_out_details <R> connected_with <T> Approved <H> Approved <R> NO <T> Purchase_Requisition <H> Approved <R> YES <T> Credit_Card_or_Cash? <H> Credit_Card_or_Cash? <R> Cash <T> Is_it_an_Independent_Contractor <H> Is_it_an_Independent_Contractor <R> YES <T> Give_your_details <H> Is_it_an_Independent_Contractor <R> NO <T> Obtain_P.O_from_Controller <H> Credit_Card_or_Cash? <R> Credit_Card <T> Enter_card_number <H> Enter_card_number <R> connected_with <T> Invoice_CCPR <H> Invoice_CCPR <R> connected_with <T> Documents_to_Controller_for_Approval <H> Obtain_P.O_from_Controller <R> connected_with <T> Invoice <H> Invoice <R> To_Controller <T> Documents_to_Controller_for_Approval || Purchase Process is connected with Fill out details which is then connected with Approved. If Approved is No then Purchase Requisition and if Approved is YES then Credit Card or Cash?. If Credit Card or Cash? is Cash then Is it an independent Contractor?. If Is it an independent Contractor? is YES then Give your details and if Is it an independent Contractor? is NO then Obtain P.O from Controller. If Credit Card or Cash? is Credit Card then Enter card number which is then connected with Invoice CCPR which is further connected with Documents to Controller for Approval. Also, Obtain P.O from Controller is connected with Invoice which if Invoice is To Controller then Documents to Controller for Approval.
<H> Mail_Invoice_to_Accounts_Payable <R> connected_with <T> Review_Invoice_for_Compliance <H> Review_Invoice_for_Compliance <R> connected_with <T> Invoice_Meets_Requirement? <H> Invoice_Meets_Requirement? <R> No <T> Don't_accept <H> Invoice_Meets_Requirement? <R> Yes <T> Approval? <H> Approval? <R> No <T> Place_in_queue <H> Approval? <R> Yes <T> Invoice_Placed_in_Payment_Queue <H> Invoice_Placed_in_Payment_Queue <R> connected_with <T> Payment_Processed <H> Action_Taken,_Issue_Resolved? <R> No <T> Place_in_queue <H> Action_Taken,_Issue_Resolved? <R> Yes <T> Approval? || Mail Invoice to Accounts Payable is connected with Review Invoice for Compliance which is then connected with Invoice Meets Requirement?. If Invoice Meets Requirement? is No then Don't accept and if Invoice Meets Requirement? is Yes then Approval?. If Approval? is No then Place in queue and if Approval? is Yes then Invoice Placed in Payment Queue which is then connected with Payment Processed. If Action Taken, Issue Resolved? is No then Place in queue and If Action Taken, Issue Resolved? is Yes then Approval?   
<H> Start <R> connected_with <T> Username_acceptable? <H> Username_acceptable? <R> No <T> Close_as_"Apolicy"_or_"Invalid" <H> Username_acceptable? <R> Yes <T> Any_blocks? <H> Any_blocks? <R> No <T> Account_already_exist? <H> Account_already_exist? <R> Yes <T> Created_recently <H> Created_recently <R> No <T> Close <H> Created_recently <R> Yes <T> Drope_request <H> Account_already_exist? <R> No <T> SUL_taken? <H> SUL_taken? <R> Yes <T> Close_Program <H> SUL_taken? <R> No <T> Conficting_accounts? <H> Conficting_accounts? <R> Yes <T> Check_another_website <H> Conficting_accounts? <R> No <T> Create_account || Start is connected with Username acceptable?. If Username acceptable? is No then Close as "Apolicy" or "Invalid" and If Username acceptable? is Yes then Any blocks?. If Any blocks? is No then Account already exist? which if Account already exist? is Yes then Created recently. If Created recently is No then Close and if Created recently is Yes then Drope request and if Account already exist? is No then SUL taken?. If SUL taken? is Yes then Close Program and if SUL taken? is No then Conflicting accounts?. If Conficting accounts? is Yes then Check another website and if Conficting accounts? is No then Create account.    
<H> Start <R> connected_with <T> Initial <H> Initial <R> connected_with <T> Process <H> Process <R> Yes <T> Data <H> Data <R> connected_with <T> Document <H> Process <R> No <T> Data <H> Data <R> connected_with <T> Document || Start is connected with Initial which is then connected with Process. If Process is Yes then Data and if Process is No then Data. Both Data are connected with Document.
<H> Home_contract <R> connected_with <T> Deal? <H> Deal? <R> No <T> Go_back <H> Deal? <R> Yes <T> Paper_work <H> Paper_work <R> connected_with <T> Shipping <H> Shipping <R> connected_with <T> Box_check <H> Box_check <R> connected_with <T> Tariff_Payment <H> Tariff_Payment <R> connected_with <T> Delivery <H> Delivery <R> connected_with <T> Payment_mode <H> Payment_mode <R> connected_with <T> Pay_Foreign_Exchange? <H> Pay_Foreign_Exchange <R> No <T> End <H> Pay_Foreign_Exchange <R> Yes <T> Payment <H> Payment <R> connected_with <T> End || Home contract is connected with Deal? which if Deal? is No then Go back and if Deal? is Yes then Paper work. Paper work is connected with Shipping which is then connected with Box check which is further connected with Tariff Payment. Tariff Payment is connected with Delivery which is then connected with Payment mode. Payment mode is connected with Pay Foreign Exchange?. If Pay Foreign Exchange is No then End and if Pay Foreign Exchange is Yes then Payment which is then connected with End. 
<H> Start <R> connected_with <T> Edit_Video <H> Edit_Video <R> connected_with <T> Short_video <H> Short_video <R> YES <T> Click_to_upload <H> Click_to_upload <R> connected_with <T> VIP_user? <H> VIP_user? <R> No <T> Sign_Up <H> VIP_user? <R> Yes <T> Login <H> Login <R> connected_with <T> Browse_to_upload <H> Browse_to_upload <R> connected_with <T> Finish || Start is connected with Edit Video which is then connected with Short video. If short video is Yes then Click to upload which is then connected with VIP user? If VIP user? is NO then Sign Up and if VIP user? is YES then Login which is then connected with Browse to upload which is finally connected with Finish. 
<H> Start <R> connected_with <T> Pull_Customer_Invoice_from_Stack <H> Pull_Customer_Invoice_from_Stack <R> connected_with <T> Does_Invoice_have_a_Purchase_Order_#? <H> Does_Invoice_have_a_Purchase_Order_#? <R> No <T> Contact_Purchaser_for_Information <H> Contact_Purchaser_for_Information <R> connected_with <T> Verify_Order <H> Does_Invoice_have_a_Purchase_Order_#? <R> Yes <T> Verify_Order <H> Verify_order <R> connected_with <T> ID_match <H> ID_match <R> connected_with <T> Amounts_Match? <H> Amounts_Match? <R> Yes <T> Send_Invoice_to_Processing <H> Amounts_Match? <R> No <T> Discrepancy_Merit_Investigating? <H> Discrepancy_Merit_Investigating? <R> connected_with <T> File_complaint <H> File_complaint <R> connected_with <T> Investigate_and_Rectify <H> Investigate_and_Rectify <R> connected_with <T> Amounts_Match? || Start is connected with Pull Customer Invoice from Stack which is then connected with Does Invoice have a Purchase Order#?. If Does Invoice have a Purchase Order#? is No then Contract Purchaser for Information which is then connected with Verify Order and if Does Invoice have a Purchase Order#? is Yes then Verify Order which is then connected with ID match. ID match is connected with Amounts Match?. If Amounts Match? is Yes then Send Invoice to Processing and if Amounts Match? is No then Discrepancy Merit Investigating? which is then connected with File complaint which is further connected with Investigate and Rectify which is finally connected with Amounts Match?    
<H> Start <R> connected_with <T> Step_1 <H> Step_1 <R> connected_with <T> Decision <H> Decision  <R> No <T> Update <H> Update <R> connected_with <T> Step_1 <H> Decision  <R> Yes <T> End || Start is connected with Step 1 which is then connected with Decision. If Decision is No then Update which is then connected with Step 1 and if Decision is Yes then End.
<H> New_case <R> Input <T> Case_retrieval <H> Case_retrieval <R> Obtain <T> Similar_cases <H> Similar_cases <R> Input <T> Case_reuse <H> Case_reuse <R> Output <T> Print_Result <H> Print_Result <R> Evaluate <T> Case_revise <H> Case_revise <R> connected_with <T> Case_update <H> Case_update <R> Store <T> Case_base <H> Case_base <R> Retrieve <T> Case_retrieval || If New case is Input then Case retrieval which if Case retrieval is obtain then Similar cases. If Similar cases is Input then Case reuse and if case reuse is Output then Print Result. If Print Result is Evaluate then Case revise which is then connected with Case update. If case update is Store then Case base and if Case base is Retrieve then Case retrieval. 
<H> Start <R> connected_with <T> Door_Bell <H> Door_Bell <R> connected_with <T> Ready_to_Get_Up? <H> Ready_to_Get_Up? <R> NO <T> Ignore_bell <H> Ignore_bell <R> connected_with <T> Relay <H> Relay <R> connected_with <T> Door_Bell <H> Ready_to_Get_Up? <R> YES <T> Wakeup <H> Wakeup <R> connected_with <T> End || Start is connected with Door Bell which is then connected with Ready to Get Up?. If Ready to Get Up? is NO then Ignore bell which is then connected with Relay which is further connected with Door Bell and if Ready to Get Up? is YES then Wakeup which is then connected with End. 
<H> Customer_Consulting_and_Quotation <R> connected_with <T> Deal? <H> Deal? <R> No <T> Stop_Deal <H> Deal? <R> Yes <T> Document_Check <H> Document_Check <R> connected_with <T> Shipping <H> Shipping <R> connected_with <T> Custom_Clearance <H> Custom_Clearance <R> connected_with <T> Payment_mode <H> Payment_mode <R> connected_with <T> Delivery <H> Delivery <R> connected_with <T> Service_mode <H> Service_mode <R> connected_with <T> Pay_Foreign_Exchange? <H> Pay_Foreign_Exchange? <R> No <T> End <H> Pay_Foreign_Exchange? <R> Yes <T> Payment <H> Payment <R> connected_with <T> End || Customer Consulting and Quotation is connected with Deal? which if Deal? is No then Stop Deal and if Deal? is Yes then Document Check which is then connected with Shipping. Shipping is connected with Custom Clearance which is then connected with Payment mode which is further connected with Delivery. Delivery is connected with Service Payment which is then connected with Pay Foreign Exchange?. If Pay Foreign Exchange is No then End and if Pay Foreign Exchange is Yes then Payment which is then connected with End. 
<H> Start <R> connected_with <T> INPUT_numbers <H> INPUT_numbers <R> connected_with <T> Perform_operation <H> Perform_operation <R> Yes <T> Find_Average <H> Perform_operation <R> No <T> INPUT_latest <H> INPUT_latest <R> <R> connected_with <T> total=total+latest <H> total=total+latest <R> connected_with <T> Perform_operation <H> Find_Average <R> connected_with <T> OUTPUT_"The_total_of_he_numbers_was"+total <H> OUTPUT_"The_total_of_he_numbers_was"+total <R> connected_with <T> Print_result <H> Print_result <R> connected_with <T> Stop || Start is connected with INPUT numbers which is then connected with Perform operation. If Perform operation is Yes then Find Average and if Perform operation is No then INPUT latest which is then connected with total=total+latest which is further connected with Perform operation. Find Average is connected with OUTPUT "The total of the numbers was"+total which is then connected with Print result which is finally connected with Stop.
<H> You_are_so_hungry <R> connected_with <T> Is_Mama_at_home? <H> Is_Mama_at_home? <R> Yes <T> Enjoy_your_lunch <H> Is_Mama_at_home? <R> No <T> Ask_your_friend <H> Ask_your_friend <R> connected_with <T> Anything_you_want_to_eat? <H> Anything_you_want_to_eat? <R> Yes <T> Enjoy_your_lunch <H> Anything_you_want_to_eat? <R> No <T> Feel_lazy_to_go_out? <H> Feel_lazy_to_go_out? <R> I_want_to_go_out_for_some_fresh_air <T> Go_Out <H> Go_Out <R> connected_with <T> Anything_you_want_to_eat? <H> Feel_lazy_to_go_out? <R> Yes,_I_am_very_lazy_to_go_out <T> Order_online <H> Order_online <R> connected_with <T> Anything_you_want_to_eat? <H> Anything_you_want_to_eat? <R> Yes <T> Enjoy_your_lunch  <H> Anything_you_want_to_eat? <R> No <T> Stay_hungry || You are so hungry is connected with Is Mama at home? which if Is Mama at home? is Yes then ENoy your lunch and if Is Mama at home? is No then Ask your friend which is then connected with Anything you want to eat?. If Anything you want to eat? is Yes then Enjoy your lunch and If Anything you want to eat? is No then Feel lazy to go out?. If Feel lazy to go out? is I want to go out for some fresh air then Go out and if Feel lazy to go out? is Yes, I am very lazy to go out then Order online. Both Order online and Go out are connected with Anything you want to eat?. If Anything you want to eat? is Yes then Enjoy your lunch and if Anything you want to eat? is No then Stay hungry.     
<H> Begin <R> connected_with <T> Initialize_variables <H> Initialize_variables <R> connected_with <T> INPUT_numbers <H> INPUT_numbers <R> connected_with <T> All_numbers_been_entered? <H> All_numbers_been_entered? <R> Yes <T> average=total/numbers <H> average=total/numbers <R> connected_with <T> Print_Output <H> Print_Output <R> connected_with <T> Stop <H> All_numbers_been_entered? <R> No <T> INPUT_latest <H> INPUT_latest <R> connected_with <T> total=total+latest <H> total=total+latest <R> connected_with <T> All_numbers_been_entered? || Begin is connected with Initialize variables which is then connected with INPUT numbers which is further connected with All numbers been entered?. If All numbers been entered? is Yes then Average=total/numbers which is then connected with Print Output and further connected with Stop. If All numbers been entered? is No then INPUT latest which is then connected with total=total+latest which is finally connected with All numbers been entered? 
<H> Start <R> connected_with <T> Approval_Needed? <H> Approval_Needed? <R> Yes <T> Go_to_manager <H> Approval_Needed? <R> No <T> Finished || Start is connected with Approval Needed?. If Approval Needed? is Yes then Go to manager and if Approval Needed? is No then Finished. 
<H> Start <R> connected_with <T> Identify_Problem <H> Identify_Problem <R> connected_with <T> work_on_it <H> work_on_it <R> connected_with <T> Note_them_down_in_a_diagram_or_table. <H> Note_them_down_in_a_diagram_or_table. <R> connected_with <T> Ask_for_assistant <H> Ask_for_assistant <R> connected_with <T> Need_more_help? <H> Need_more_help? <R> No <T> Ask_for_assistant <H> Need_more_help? <R> Yes <T> Find_solutions_to_the_root_causes_identified. <H> Find_solutions_to_the_root_causes_identified. <R> connected_with <T> End || Start is connected with Identify Problem which is then connected with work on it. Work on it is connected with Note them down in a diagram or table which is then connected with Ask for assistant which is further connected with Need more help?. If Need more help? is No then Ask for assistant and if Need more help? is Yes then Find solutions to the root causes identified which is finally connected with End. 
<H> Start <R> connected_with <T> Submit_the_registartion_form <H> Submit_the_registartion_form <R> connected_with <T> Form_Complete? <H> Form_Complete? <R> No <T> Submit_the_registartion_form <H> Form_Complete <R> Yes <T> Verify_details <H> Verify_details <R> connected_with <T> Accept_Submission? <H> Accept_Submission? <R> No <T> Return_Document <H> Accept_Submission? <R> Yes <T> Write_Acceptance_Letter <H>  Write_Acceptance_Letter <R> connected_with <T> Confirmation <H> Confirmation <R> connected_with <T> End <H> Return_Document <R> connected_with <T> End || Start is connected with Submit the registration form which is then connected with Form Complete?. If Form Complete? is No then Submit the registration form and if Form Complete? is Yes then Verify details which is then connected with Accept SUbmission?. If Accept Submission? is Yes then Write Acceptance Letter and if Accept Submission? is No then Return Document which is then connected with End. Also, write Acceptance Letter is connected with Confirmation which is finally connected with End. 
<H> Start <R> connected_with <T> Greet <H> Greet <R> FAILURE <T> ACCEPT_NO_COMMANDS <H> Greet <R> connected_with <T> Enter_ID <H> Enter_ID <R> connected_with <T> INPUT_DRIVER_INFORMATION <H> INPUT_DRIVER_INFORMATION <R> connected_with <T> Verify_finger_scan <H> Verify_finger_scan <R> connected_with <T> SCAN_FINGER_AGAIN <H> SCAN_FINGER_AGAIN <R> connected_with <T> 1st_AND_2nd_SCAN_MATCH? <H> 1st_AND_2nd_SCAN_MATCH? <R> NO <T> Enter_ID <H> 1st_AND_2nd_SCAN_MATCH? <R> YES <T> Login <H> Login <R> connected_with <T> STOP || Start is connected with Greet which if Greet is FAILURE then ACCEPT NO COMMANDS otherwise Greet is connected with Enter ID. Enter ID is connected with INPUT DRIVER INFORMATION which is then connected with Verify finger scan. Verify finger scan is connected with SCAN FINGER AGAIN which is then connected with 1st AND 2nd SCAN MATCH?. If 1st AND 2nd SCAN MATCH? is NO then Enter ID and if 1st AND 2nd SCAN MATCH? is YES then Login which is finally connected with STOP. 
<H> Start <R> connected_with <T> Look_for_address <H> Look_for_address <R> connected_with <T> Did_you_find_it? <H> Did_you_find_it? <R> No <T> Ask_someone <H> Ask_someone <R> Yes <T> Look_for_address <H> Did_you_find_it? <R> Yes <T> Stop_looking <H> Ask_someone <R> No <T> Stop_looking || Start is connected with Look for address which is then connected with Did you find it?. If Did you find it? is No then Ask someone and If Did you find it? is Yes then Stop looking. If Ask Someone is Yes then Look for address and if Ask someone is No then Stop looking. 
<H> Is_she_currently_working_in_an_important_project? <R> No <T> Worth_it? <H> Worth_it? <R> No <T> Could_her_leaving_interrupt_the_work_flow? <H> Could_her_leaving_interrupt_the_work_flow? <R> Yes <T> Any_other_option? <H> Could_her_leaving_interrupt_the_work_flow? <R> No <T> Let_her_go! <H> Any_other_option? <R> No <T> Can_the_company_afford_the_raise? <H> Any_other_option? <R> Yes <T> Let_her_go! <H> Can_the_company_afford_the_raise? <R> No <T> Let_her_go! <H> Can_the_company_afford_the_raise? <R> Yes <T> Keep_her! || If Is she currently working in an important project? is No then Worth it? and if Worth it? is No then Could her leaving interrupt the work flow?. If Could her leaving interrupt the work flow? is Yes then Any other option? and if Could her leaving interrupt the work flow? is No then Let her go. If Any other option? is No then Can the company afford the raise? and if Any other option? is Yes then Let her go!. If Can the company afford the raise? is No then Let her go! and if Can the company afford the raise? is Yes then Keep her.    
<H> Fruits <R> connected_with <T> Input_mango,_pitaya,_durian <H> Input_mango,_pitaya,_durian <R> connected_with <T> Prefer_mango_to_pitaya <H> Prefer_mango_to_pitaya <R> connected_with <T> Prefer_pitaya_to_durian? <H> Prefer_pitaya_to_durian? <R> Yes <T> Go_for_mango <H> Prefer_pitaya_to_durian? <R> No <T> Go_for_mango <H> Prefer_mango_to_pitaya <R> connected_with <T> Prefer_mango_to_durain <H> Prefer_mango_to_durain <R> No <T> Go_for_pitaya <H> Prefer_mango_to_durain <R> No <T> Go_for_pitaya <H> Go_for_mango <R> connected_with <T> End <H> Go_for_pitaya <R> connected_with <T> End <H> Go_for_pitaya <R> connected_with <T> End || Fruits are connected with Input mango, pitaya, durian which is then connected with Prefer mango to pitaya?. Prefer mango to pitaya? is connected with both Prefer pitaya to durian? and Prefer mango to durian?. If Prefer pitaya to durian? is Yes then Go for mango and if Prefer pitaya to durian? is No then also Go for mango. If Prefer mango to durian is Yes then Go for pitaya and if Prefer mango to durian is No then also Go for pitaya. Go for mango, Go for pitaya and Go for pitaya all are connected with End.   
<H> Do_you_have_time_to_flee? <R> Yes <T> Run_quickly <H> Run_quickly <R> connected_with <T> Yeah!_No_need_to_say_hi. <H> Do_you_have_time_to_flee? <R> No <T> Are_you_wearing_sun_glasses? <H> Are_you_wearing_sun_glasses? <R> Yes <T> Don't_run <H> Don't_run <R> connected_with <T> Yeah!_No_need_to_say_hi. <H> Are_you_wearing_sun_glasses? <R> No <T> Could_you_pretend_to_get_a_call? <H> Could_you_pretend_to_get_a_call? <R> Yes <T> No_problem <H> No_problem <R> connected_with <T> Yeah!_No_need_to_say_hi. <H> Could_you_pretend_to_get_a_call? <R> No <T> Finish || If Do you have time to flee? is Yes then Run quickly which is then connected with Yeah! No need to say hi. and if Do you have time to flee? is No then Are you wearing sun glasses?. If Are you wearing sun glasses? is Yes then Don't run which is then connected with Yeah! No need to say hi. and if Are you wearing sun glasses? is No then Could you pretend to get a call?. If Could you pretend to get a call? is Yes then No problem which is then connected with Yeah! No need to say hi. and if Could you pretend to get a call? is No then Finish.       
<H> Start <R> connected_with <T> Initialize <H> Initialize <R> connected_with <T> Decision <H> Decision <R> No <T> Process <H> Process <R> connected_with <T> Delay <H> Delay <R> connected_with <T> Initialize <H> Decision <R> Yes <T> Print_result <H> Print_result <R> connected_with <T> End || Start is connected with Initialize which is then connected with Decision. If Decision is No then Process which is then connected with Delay which is further connected with Initialize and if Decision is Yes then Print result which is finally connected with End.
<H> Start <R> connected_with <T> Door_bell <H> Door_bell <R> Ready_to_face_the_world? <H> Ready_to_face_the_world? <R> Yes <T> Get_Up <H> Get_Up <R> connected_with <T> End <H> Ready_to_face_the_world? <R> No <T> Ignore <H> Ignore <R> connected_with <T> Delay_inevitable_for_5_minutes <H> Delay_inevitable_for_5_minutes <R> connected_with <T> Door_bell || Start is connected with Door bell which is then connected with Ready to face the world? which if Ready to face the world? is Yes then Get Up which is then connected with End and if Ready to face the world? is No then Ignore which is then connected with Delay inevitable for 5 minutes which is finally connected with Door bell.  
<H> Start <R> connected_with <T> Input_Total_Score <H> Input_Total_Score <R> connected_with <T> If_total_score>800 <H> If_total_score>800 <R> No <T> Not_good_college <H> If_total_score>800 <R> Yes <T> Good_college <H> Not_good_college <R> connected_with <T> End <H> Good_college <R> connected_with <T> End || Start is connected with Input Total Score which is then connected with If total score>800. If total score>800 is No then Not good college and if total score>800 is Yes then Good college. Not good college and Good college both are connected with End. 
<H> Start <R> connected_with <T> Interested_in_watching_movie? <H> Interested_in_watching_movie? <R> no <T> Well,_go_read_a_book_then. <H> Interested_in_watching_movie? <R> yes <T> Know_the_story? <H> Know_the_story? <R> no <T> Think_about_what_part_of_the_process_you_need_to_see <H> Know_the_story? <R> yes <T> Let's_start || Start is connected with Interested in watching movie? which if Interested in watching movie? is no then Well, go read a book then. and if Interested in watching movie? is yes then Know the story?. If Know the story? is no then Think about what part of the process you need to see and if Know the story? is yes then Let's start.   
<H> Start <R> connected_with <T> COMPUTE_LOGICAL_ADMIN_GROUP_NAME <H> COMPUTE_LOGICAL_ADMIN_GROUP_NAME <R> connected_with <T> ADD_OR_REMOVE? <H> ADD_OR_REMOVE? <R> ADD <T> Update <H> Update <R> connected_with <T> ADD_USERS_TO_GROUP <H> ADD_USERS_TO_GROUP <R> connected_with <T> END <H> ADD_OR_REMOVE? <R> REMOVE <T> Personalize <H> Personalize <R> connected_with <T> DISPLAY_CURRENT_MEMBERS <H> DISPLAY_CURRENT_MEMBERS <R> connected_with <T> Check <H> Check <R> connected_with <T> END || START is connected with COMPUTE LOCAL ADMIN GROUP NAME which is then connected with ADD OR REMOVE?. If ADD OR REMOVE? is ADD then Update which is then connected with ADD USERS TO GROUP which is further connected with END and if ADD OR REMOVE? is REMOVE then Personalize which is then connected with DISPLAY CURRENT MEMBERS which is further connected with Check and finally Check is connected with END.
<H> circuit <R> connected_with <T> Process <H> Process <R> connected_with <T> CONTROL_CIRCUIT <H> CONTROL_CIRCUIT <R> connected_with <T> VALVES <H> Condenser <R> Air <T> SERVICE_UNIT_F,R,L,P <H> SERVICE_UNIT_F,R,L,P <R> Lubricated_Air <T> VALVES <H> VALVES <R> connected_with <T> CYLINDER || Circuit is connected with Process which is then connected with CONTROL CIRCUIT which is further connected with VALVES. If Condenser is Air then SERVICE UNIT F,R,L,P which if SERVICE UNIT F,R,L,P is Lubricated Air then VALVES which is then connected with CYLINDER.  
<H> Begin <R> connected_with <T> Work <H> Work <R> Yes <T> add <H> Work <R> No <T> Process <H> Process <R> connected_with <T> update <H> update <R> connected_with <T> End <H> add <R> connected_with <T> End || Begin is connected with Work. If Work is Yes then add and if Work is No then Process which is further connected with update. Both update and add are connected with End.
<H> Start <R> connected_with <T> Enter <H> Enter <R> connected_with <T> Home_page <H> Home_page <R> connected_with <T> Enter_Email_ID_and_Password <H> Enter_Email_ID_and_Password <R> connected_with <T> Is_Email_ID_and_Password_Correct <H> Is_Email_ID_and_Password_Correct <R> No <T> Log_in_error <H> Log_in_error <R> connected_with <T> Enter_Email_ID_and_Password <H> Is_Email_ID_and_Password_Correct <R> Yes <T> Display_Account <H> Display_Account <R> connected_with <T> Stop || Start is connected with Enter which is then connected with Home page. Home page is connected with Enter Email ID and Password which is then connected with Is Email ID and Password Correct?. If Is Email ID and Password Correct? is No then Log in error which is then connected with Enter Email ID and Password and if Is Email ID and Password Correct? is Yes then Display Account which is finally connected with Stop.  
<H> Initial <R> connected_with <T> Case_1 <H> Case_1 <R> YES <T> Statement_1 <H> Statement_1 <R> connected_with <T> End <H> Case_1 <R> NO <T> Case_2 <H> CASE_2 <R> YES <T> Statement_2 <H> Statement_2 <R> connected_with <T> End <H> CASE_2 <R> NO <T> Case_N <H> Case_N <R> YES <T> Statement_N <H> Statement_N <R> connected_with <T> End <H> Case_N <R> NO <T> Default_statement <H> Default_statement <R> connected_with <T> End || Initial is connected with Case 1 which if Case 1 is Yes then Statement 1 which is then connected with End and if Case 2 is No then Case 2. If Case 2 is Yes then Statement 2 which is then connected with End and if Case 2 is No then Case N. If Case N is Yes then Statement N which is then connected with End and if Case N is NO then Default statement which is finally connected with End.
<H> Program <R> connected_with <T> Input_image <H> Input_image <R> connected_with <T> Description <H> Description <R> connected_with <T> Segmentation <H> Segmentation <R> connected_with <T> Obstacle/Non-obstacle_decision || Program is connected with Input image which is then connected with Description. Description is connected with Segmentation which is then connected with Obstacle/Non-obstacle decision.
<H> Start <R> connected_with <T> Take_Input <H> Take_Input <R> connected_with <T> If_Number%2==0 <H> If_Number%2==0 <R> False <T> Print:_"Number_is_odd" <H> If_Number%2==0 <R> True <T> Print_result <H> Print_result <R> connected_with <T> End || Start is connected with Take Input which is then connected with If Number%2==0. If Number%2==0 is False then Print: "Number is odd" and if Number%2==0 is True then Print result which is finally connected with End. 
<H> Arrival <R> Periodically_release <T> Update <H> Incoming <R> Can_be_batched_to_form <T> Update || If Arrival is Periodically release then update and if Incoming is Can be batched to form then Update.
<H> Begin <R> connected_with <T> Get_n <H> Get_n <R> connected_with <T> n%2==0 <H> n%2==0 <R> Yes <T> Even <H> n%2==0 <R> No <T> Odd <H> Even <R> connected_with <T> Stop <H> Odd <R> connected_with <T> Stop || Begin is connected with Get n which is then connected with n%2==0. If n%2==0 is Yes then Even and if n%2==0 is No then Odd. Both Even and Odd are connected with Stop.
<H> Start_Loop <R> connected_with <T> Initialize <H> Initialize <R> False <T> End_Loop <H> Initialize <R> True <T> Process <H> Process <R> connected_with <T> Increment_or_Decrement <H> Increment_or_Decrement <R> connected_with <T> Initialize || Start Loop is connected with Initialize which if Initialize is False then End Loop and if Initialize is True then Process which is then connected with Increment or Decrement which is finally connected with Initialize.
<H> Begin <R> connected_with <T> Input <H> Input <R> connected_with <T> Process <H> Process <R> Yes <T> Add <H> Add <R> connected_with <T> End <H> Process <R> No <T> Subtract <H> Subtract <R> connected_with <T> End || Begin is connected with Input which is then connected with Process. If Process is Yes then Add which is then connected with End and if Process is No then Subtract which is then connected with End.
<H> connection <R> connected_with <T> User_enters_login_name_and_password <H> User_enters_login_name_and_password <R> connected_with <T> Correct_login_and_password? <H> Correct_login_and_password? <R> No <T> Alert <H> Alert <R> connected_with <T> User_enters_login_name_and_password <H> Correct_login_and_password? <R> Yes <T> User_successfully_logs_in <H> User_successfully_logs_in <R> connected_with <T> Display <H> Display <R> connected_with <T> terminator <H> terminator <R> connected_with <T> User_logs_into_the_system || Connection is connected with Users enters login name and password which is then connected with Correct login and password?. If Correct login and password? is No then Alert which is then connected with Users enters login name and password and if Correct login and password? is Yes then User successfully logs in. User successfully logs in is connected with Display which is then connected with connection and finally connected with User logs into the system.   
<H> Begin <R> connected_with <T> Do_You_Understand_Flowcharts? <H> Do_You_Understand_Flowcharts? <R> Yes <T> Great <H> Great <R> connected_with <T> Explain_everyone <H> Do_You_Understand_Flowcharts? <R> No <T> Would_You_Like_to_Start_With_the_Basics? <H> Would_You_Like_to_Start_With_the_Basics? <R> YES <T> Read_each_detail <H> Would_You_Like_to_Start_With_the_Basics? <R> NO <T> Further_Reading_About_Flowcharts || Begin is connected with Do You Understand Flowcharts? which if Do You Understand Flowcharts? is Yes then Great! which is then connected with Explain everyone and if Do You Understand Flowcharts? is No then Would You Like to Start With the Basics?. If Would You Like to Start With the Basics? is YES then Read each detail and if Would You Like to Start With the Basics? is NO then Further Reading About Flowcharts.   
<H> website <R> connected_with <T> Login_Page <H> Login_Page <R> connected_with <T> Is_the_login_correct? <H> Is_the_login_correct? <R> Incorrect_Credentials <T> Login_Page <H> Is_the_login_correct? <R> connected_with <T> Enter || Website is connected with Login Page which is then connected with Is the login correct? which if Is the login correct? is Incorrect Credentials then Login Page otherwise Is the login correct? is connected with Enter.
<H> connection <R> connected_with <T> New_Employee_Fills_in_Paperwork <H> New_Employee_Fills_in_Paperwork <R> connected_with <T> decision <H> decision <R> Document_Approved <T> Documents_Sent_to_Management_for_Approval <H> decision <R> Document_Fix_Request <T> Update <H> Update <R> connected_with <T> decision <H> Documents_Sent_to_Management_for_Approval <R> connected_with <T> Allocate_new_space <H> Allocate_new_space <R> connected_with <T> terminator || Connection is connected with New Employee Fills in Paperwork which is then connected with decision. If decision is Document Approved then Documents Sent to Management for Approval which is then connected with Allocate new space which is finally connected with connection and if decision is Document Fix Request then Update which is then connected with decision.
<H> A_team_member_suggests_a_project <R> connected_with <T> Study_about_project <H> Study_about_project <R> connected_with <T> Participants_decide_if_it's_a_good_idea <H> Participants_decide_if_it's_a_good_idea <R> No <T> Team_rejects_idea <H> Participants_decide_if_it's_a_good_idea <R> Yes <T> Explain_more <H> Participants_decide_if_it's_a_good_idea <R> Not_enough_info <T> Team_member_conducts_more_research <H> Team_member_conducts_more_research <R> connected_with <T> Study_about_project <H> Team_rejects_idea <R> connected_with <T> End <H> Explain_more <R> connected_with <T> Team_member_writes_proposal <H> Team_member_writes_proposal <R> connected_with <T> Team_reviews_proposal <H> Team_reviews_proposal <R> connected_with <T> Proposal_OK? <H> Proposal_OK? <R> No <T> Revise <H> Revise <R> connected_with <T> Team_reviews_proposal <H> Proposal_OK? <R> Yes <T> Team_sends_proposal_to_final_decision-maker <H> Team_sends_proposal_to_final_decision-maker <R> connected_with <T> End || A team member suggests a project which is then connected with Study about project which is then connected with Participants decide if it's a good idea which if Participants decide if it's a good idea is No then Team rejects idea and if Participants decide if it's a good idea is Yes then Explain more and if Participants decide if it's a good idea is not enough info then Team member conducts more research which is then connected with Study about project. Also Team rejects idea is connected with End. Explain more is connected with Team member writes proposal is connected with Team reviews proposal which is further connected with Proposal OK?. If Proposal OK? is No then Revise which is then connected with Team reviews proposal and if Proposal OK? is Yes then Team sends proposal to final decision-maker which is finally connected with End. 
<H> Start <R> connected_with <T> Select_the_area_to_check <H> Select_the_area_to_check <R> connected_with <T> Generating_inventory_list <H> Generating_inventory_list <R> connected_with <T> The_warehouse_arrived_at_the_location <H> The_warehouse_arrived_at_the_location <R> connected_with <T> Read_the_goods <H> Read_the_goods <R> connected_with <T> Count_all <H> Count_all <R> connected_with <T> Keep_inventory <H> Keep_inventory <R> Y <T> Select_the_area_to_check <H> Keep_inventory <R> N <T> Summary_inventory_information <H> Summary_inventory_information <R> connected_with <T> Data_base <H> Data_base <R> connected_with <T> Check_everything <H> Check_everything <R> connected_with <T> End || Start is connected with Select the area to check which is then connected with Generating inventory list which is further connected with The warehouse manager arrived at the location. The warehouse manager arrived at the location is connected with Read the goods which is then connected with Count all which is further connected with Keep inventory. If Keep inventory is Y then Select the area to check and if Keep inventory is N then Summary inventory information which is further connected with Data base. Data base is connected with Check everything which is finally connected with End.   
<H> Inferred_OD <R> connected_with <T> Get_array_of_paths_from_O_to_D <H> get_array_of_paths_from_O_to_D <R> connected_with <T> Find_the_best_route <H> Find_the_best_route <R> connected_with <T> Trip_exists? <H> Trip_exists? <R> No <T> Arrival_Time_Inference_Fails <H> Trip_exists? <R> Yes <T> Find_arrival_time_at_segment_alighting_location <H> Find_arrival_time_at_segment_alighting_location <R> connected_with <T> Arrival_time? <H> Arrival_time? <R> No <T> Next_trip <H> Next_trip <R> connected_with <T> Trip_exists? <H> Arrival_time? <R> Yes <T> Final_segment <H> Final_segment <R> No <T> Check_another_one <H> Check_another_one <R> connected_with <T> Find_the_best_route <H> Final_segment <R> Yes <T> alighting_time_+_egress_time_=_arrival_time || Inferred OD is connected with Get array of paths from O to D which is then connected with Find the best route which is further connected with Trip exists?. If Trip exists? is No then Arrival Time Inference Fails and if Trip exists? is Yes then Find arrival time at segment alighting location which is then connected with Arrival Time?. If Arrival Time? is No then Next trip which is then connected with Trip exists? and if Arrival Time? is Yes then Final segment which if Final segment is No then Check another one which is then connected with Find the best route and if Final segment is Yes then alighting time + egress time = arrival time.
<H> Start <R> connected_with <T> Homepage <H> Homepage <R> connected_with <T> have_an_account <H> have_an_account <R> No <T> Sign_up <H> Sign_up <R> connected_with <T> Fill_out_the_information <H> Fill_out_the_information <R> connected_with <T> Submit <H> Submit <R> connected_with <T> Log_in <H> have_an_account <R> yes <T> Log_in <H> Log_in <R> connected_with <T> Enter_details <H> Enter_details <R> connected_with <T> e-mail_and_password_valid <H> e-mail_and_password_valid <R> no <T> Log_in <H> e-mail_and_password_valid <R> yes <T> loged_in_to_the_system <H> loged_in_to_the_system <R> connected_with <T> end || Start is connected with Homepage which is then connected with have an account. If have an account is No then Sign up which is then connected with Fill out the information which is further connected with Submit and if have an account is yes then Login. Also, Submit is connected with Log in which is then connected with Enter details. Enter details is connected with e-mail and password valid which if e-mail and password valid is no then Log in and if e-mail and password valid is yes then logged in to the system which is finally connected with end.   
<H> Begin <R> connected_with <T> Enter_to_the_website <H> Enter_to_the_website <R> connected_with <T> have_an_account <H> have_an_account <R> No <T> Sign_up <H> Sign_up <R> connected_with <T> Fill_details <H> Fill_details <R> connected_with <T> Submit <H> Submit <R> connected_with <T> Log_in <H> have_an_account <R> yes <T> Log_in <H> Log_in <R> connected_with <T> Enter_e-mail_and_password_valid <H> Enter_e-mail_and_password_valid <R> connected_with <T> e-mail_and_password_valid <H> e-mail_and_password_valid <R> no <T> Log_in <H> e-mail_and_password_valid <R> yes <T> Profile <H> Profile <R> connected_with <T> end || Begin is connected with Enter to the website which is then connected with have an account which if have an account is No then Sign up which is then connected with Fill details which is further connected with Submit and if have an account is yes then Login. Also, Submit is connected with Log in which is then connected with Enter e-mail and password. Enter e-mail and password is connected with e-mail and password valid which if e-mail and password valid is no then Log in and if e-mail and password valid is yes then profile which is finally connected with end.
<H> CPU <R> connected_with <T> Is_the_process_controlled? <H> Is_the_process_controlled? <R> Yes <T> Does_a_solution_already_exist? <H> Is_the_process_controlled? <R> No <T> Develop_a_controlled_process <H> Develop_a_controlled_process <R> connected_with <T> Does_a_solution_already_exist? <H> Does_a_solution_already_exist? <R> Yes <T> Fix_it_now! <H> Does_a_solution_already_exist? <R> No <T> Any_problem? <H> Any_problem? <R> Yes <T> Figure_out_simplest_solution <H> Any_problem? <R> Yes <T> Is_it_design_related? <H> Is_it_design_related? <R> No <T> Is_the_problem_complex? <H> Is_it_design_related? <R> Yes <T> Update <H> Is_it_design_related? <R> Yes <T> 6-Sigma_or_other <H> Is_it_design_related? <R> No <T> Is_the_problem_related_to_the_8_Wastes? <H> Is_the_problem_related_to_the_8_Wastes? <R> Yes <T> Stop || CPU is connected with Is the process controlled? which if Is the process controlled? is Yes then Does a solution already exist? and if Is the process controlled? is No then Develop a controlled process which is then connected with Does a solution already exist?. If Does a solution already exist? is No then Any problem? and if Does a solution already exist? is Yes then Fix it now!. If Any problem? is Yes then Is it designed related? and also if Any problem? is Yes then Figure out simplest solution. If Is it design related? is No then Is the problem complex? and if Is it design related? is Yes then Update. If Is the problem complex? is Yes then 6-Sigma or other and if Is the problem complex? is No then Is the problem related to the 8 Wastes? which if Is the problem related to the 8 Wastes? is Yes then Stop.    
<H> Confirmation <R> connected_with <T> Briefing_to_all_staff_by_Management <H> Briefing_to_all_staff_by_Management <R> connected_with <T> Profile_analysis <H> Profile_analysis <R> connected_with <T> Selection <H> Selection <R> connected_with <T> Review <H> Review <R> connected_with <T> Job_Questionnaire_&_Employee_Interviewing_for_Data_Collection <H> Job_Questionnaire_&_Employee_Interviewing_for_Data_Collection <R> connected_with <T> Consent_sign <H> Consent_sign <R> connected_with <T> Drafting_JD_&_Discuss_with_Dept._Head <H> Drafting_JD_&_Discuss_with_Dept._Head <R> connected_with <T> Manager_review <H> Manager_review <R> connected_with <T> JD_Confirm? <H> JD_Confirm? <R> No <T> Review_&_Amend <H> Review_&_Amend <R> connected_with <T> Manager_review <H> JD_Confirm? <R> Yes <T> Training <H> Training <R> New_Staff <T> Handled_by_HR_Dept. <H> Handled_by_HR_Dept. <R> connected_with <T> Finish <H> Training <R> Existing_Staff <T> Handled_by_Dept._Head <H> Handled_by_Dept._Head <R> connected_with <T> Finish || Confirmation is connected with Briefing to all staff by Management which is then connected with Profile analysis. Profile analysis is connected with Selection which is then connected with Review which is further connected with Job Questionaire & Employee Interviewing for Data Collection. Job Questionaire & Employee Interviewing for Data Collection is connected with Consent sign which is then connected withDrafting JD & Discuss with Dept. Head which is further connected with Manager review. Manager review is connected with JD Confirm? which if JD Confirm? is No then Review & Amend which is further connected with Manager review and if JD Confirm? is YES then TRaining. If Training is New Staff then Handled by HR Dept. and If Training is Existing Staff then Handled by Dept. Head. Also, Handled by HR Dept., Training, and Handled by Dept. Head all are connected with Finish.  
<H> Start <R> connected_with <T> Documentation_Work <H> Documentation_Work <R> connected_with <T> Print_cycle_count_sheets <H> Print_cycle_count_sheets <R> connected_with <T> Perform_physical_count_of_stock <H> Perform_physical_count_of_stock <R> connected_with <T> Enter_physical_counts <H> Enter_physical_counts <R> connected_with <T> Report_differences <H> Report_differences <R> connected_with <T> Recount_inventory? <H> Recount_inventory? <R> No <T> Post_inventory_documents <H> Post_inventory_documents <R> connected_with <T> End <H> Recount_inventory? <R> Yes <T> Display_documents <H> Display_documents <R> connected_with <T> Perform_physical_count_of_stock <H> Perform_physical_count_of_stock <R> connected_with <T> Report_differences || Start is connected with Documentation Work which is then connected with Print cycle count sheets which is further connected with Perform physical count of stock. Perform physical count of stock is connected with Enter physical counts which is then connected with Report differences which is further connected with Recount inventory?. If Recount inventory? is No then Post inventory documents which is then connected with End and if Recount inventory? is Yes then Display documents which is then connected with Perform physical count of stock which is finally connected with Report differences.   
<H> Identify_the_Problem <R> connected_with <T> Establish_a_theory <H> Establish_a_theory <R> connected_with <T> New_Theory? <H> New_Theory? <R> No <T> Find_new_idea <H> New_Theory? <R> Yes <T> Test_the_Theory <H> Test_the_Theory <R> connected_with <T> Theory_Confirmed? <H> Theory_Confirmed? <R> No <T> Establish_a_Theory <H> Theory_Confirmed? <R> Yes <T> Establish_a_Plan_of_Action || Identify the Problem which is then connected with Establish a Theory which is then connected with New Theory?. If New Theory? is No then Find new idea and if New Theory? is Yes then Test the Theory which is then connected with Theory Confirmed?. If Theory Confirmed? Is No then Establish a Theory and if Thory Confirmed? is Yes then Establish a Plan of Action.
<H> Start <R> connected_with <T> Username <H> Username <R> connected_with <T> Password <H> Password <R> connected_with <T> Username_&&_Password_correspond_to_the_ones_in_database? <H> Username_&&_Password_correspond_to_the_ones_in_database? <R> Yes <T> Enter_ID_and_password <H> Username_&&_Password_correspond_to_the_ones_in_database? <R> No <T> "Invalid_credentials" <H> Enter_ID_and_password <R> connected_with <T> Is_User_ID_blocked? <H> "Invalid_credentials" <R> connected_with <T> Username <H> Is_User_ID_blocked? <R> Yes <T> "403_Forbidden" <H> Is_User_ID_blocked? <R> No <T> Login_successfully <H> "403_Forbidden" <R> connected_with <T> Username <H> Login_successfully <R> connected_with <T> End || Start is connected with Username which is then connected with Password which is further connected with Username && Password corresponds to the ones in database?. If Username && Password corresponds to the ones in database? is Yes then Enter ID and password and if Username && Password corresponds to the ones in database? is No then "Invalid credentials" which is then connected with Username. Enter ID and password is connected with Is User_ID blocked? which if Is User_ID blocked? is Yes then "403 Forbidden" and if Is User_ID blocked? is No then Login successfully. "403 Forbidden" is connected with Username and Login successfully is connected with End.  
<H> Start <R> connected_with <T> Read_Value <H> Read_Value <R> connected_with <T> Temp<32? <H> Temp<32? <R> Yes <T> Print_Cold <H> Temp<32? <R> No <T> Print_Not_Cold <H> Print_Cold <R> connected_with <T> End <H> Print_Not_Cold <R> connected_with <T> End || Start is connected with Read Value which is then connected with Temp<32? which if Temp<32? is Yes then Print Cold and if Temp<32? is No then Print Not Cold. Print Cold and Print Not Cold both are connected with End.
<H> Begin <R> connected_with <T> Switch_On_lights <H> Switch_On_lights <R> connected_with <T> Turn_the_LED_connected_to_Q0_off <H> Turn_the_LED_connected_to_Q0_off <R> connected_with <T> Check_if_the_LDR_connected_to_A1_is_in_darkness <H> Check_if_the_LDR_connected_to_A1_is_in_darkness <R> N <T> Switch_Off_the_lights <H> Switch_Off_the_lights <R> connected_with <T> Check_if_the_LDR_connected_to_A1_is_in_darkness <H> Check_if_the_LDR_connected_to_A1_is_in_darkness <R> Y <T> Turn_the_LED_connected_to_Q0_on <H> Turn_the_LED_connected_to_Q0_on <R> connected_with <T> Check_if_the_LDR_connected_to_A1_is_in_darkness || Begin is connected with Switch On lights which is then connected with Turn the LED connected to QO off. Turn the LED connected to QO off is connected with Check if the LDR connected to A is in darkness. If Check if the LDR connected to A is in darkness is N then Switch Off lights then again Check if the LDR connected to A is in darkness and if Check if the LDR connected to A is in darkness is Y then Turn the LED connected to QO on which is then connected with Check if the LDR connected to A is in darkness.  
<H> Problem <R> connected_with <T> Find_Solution <H> Find_Solution <R> connected_with <T> New_Solution <H> New_Solution <R> No <T> Escalate_When_Out_of_Ideas_for_New_Theories <H> New_Solution <R> Yes <T> Test_the_theory <H> Test_the_theory <R> connected_with <T> Theory_Confirmed? <H> Theory_Confirmed? <R> Yes <T> Establish_a_Plan_of_Action <H> Theory_Confirmed? <R> No <T> Find_Solution || Problem is connected with Find Solution which is then connected with New Solution. If New Solution is No then Escalate When Out of Ideas for New Theories and If New Solution is Yes then Test the Theory which is then connected with Theory Confirmed?. If Theory Confirmed? is No then Find Solution and if Theory Confirmed? is Yes then Establish a Plan of Action.
<H> Start <R> connected_with <T> Read_AI0,_AI1_and_AI2 <H> Read_AI0,_AI1_and_AI2 <R> connected_with <T> Convert_values_to_standard <H> Convert_values_to_standard <R> connected_with <T> Current_Value>Safety_Thresholds <H> Current_Value>Safety_Thresholds <R> Yes <T> Display_warning_with_visual_indicator <H> Current_Value>Safety_Thresholds <R> No <T> Print_Message <H> Print_Output <R> connected_with <T> Log_the_data_in_txt_files_for_future_analysis <H> Log_the_data_in_txt_files_for_future_analysis <R> connected_with <T> End <H> Log_the_data_in_txt_files_for_future_analysis <R> connected_with <T> Read_AI0,_AI1_and_AI2 || Start is connected with Read AI0, AI1 and AI2  which is then connected with Convert values to standard which is further connected with Current Value>Safety Thresholds. If Current Value>Safety Thresholds is Yes then Display warning with visual indicator and if Current Value>Safety Thresholds is No then Print Message. Print Output is connected with Log the data in txt files for future analysis which is then connected with both Read AI0, AI1 and AI2 and End.
<H> QA <R> connected_with <T> QA_Manual <H> QA <R> connected_with <T> Unit <H> QA <R> connected_with <T> Information_&_advice <H> Unit <R> connected_with <T> Center_for_Healthcare <H> Unit <R> connected_with <T> GENERAL <H> Unit <R> connected_with <T> Delivery_of_Care <H> Unit <R> connected_with <T> Invoice <H> Center_for_Healthcare <R> connected_with <T> Standard_Operating_Procedures <H> Center_for_Healthcare <R> connected_with <T> Protocols_and_Trial_Paperwork <H> Delivery_of_Care <R> connected_with <T> Best_practice_guidelines <H> Invoice <R> connected_with <T> Best_practice_guidelines <H> GENERAL <R> connected_with <T> Research_Governace <H> GENERAL <R> connected_with <T> Induction <H> GENERAL <R> connected_with <T> Staff_Handbook <H> Research_Governace <R> connected_with <T> Good_Clinical_Practice <H> Research_Governace <R> connected_with <T> Protecting_Information_Policy <H> Staff_Handbook <R> connected_with <T> Protecting_Information_Policy || QA is connected with QA Manual, Information & advice and Unit. Unit is then connected with Center for Healthcare, Delivery of Care, Invoice and GENERAL. Centre for Healthcare is connected with Standard Operating Procedures and Protocols and Trial Paperwork. Delivery of Care and Invoice both are connected with Best practice guidelines. GENERAL is connected with Research Governance, Induction, and Staff Handbook. Research Governance is connected with Good Clinical Practice and Protecting Information Policy. Also, Staff Handbook is connected with Protecting Information Policy. 
<H> Bad_environment <R> connected_with <T> Work_Process_A_General_Requirments <H> Work_Process_A_General_Requirments <R> connected_with <T> Has_the_area_been_monitored_for_noise_levels? <H> Has_the_area_been_monitored_for_noise_levels? <R> No <T> Environment_Monitor <H> Environment_Monitor <R> connected_with <T> Is_the_exposure_considered_"nuisance"_level_noise? <H> Has_the_area_been_monitored_for_noise_levels? <R> Yes <T> Is_the_exposure_considered_"nuisance"_level_noise? <H> Is_the_exposure_considered_"nuisance"_level_noise? <R> Yes <T> Work_Process_C_Controlling_Nuisance_Noise <H> Work_Process_C_Controlling_Nuisance_Noise <R> connected_with <T> Is_the_exposure_considered_"hazardous"? <H> Is_the_exposure_considered_"nuisance"_level_noise? <R> No <T> Is_the_exposure_considered_"hazardous"? <H> Is_the_exposure_considered_"hazardous"? <R> Yes <T> Work_Process_D_Controlling_Hazardous_Noise <H> Work_Process_D_Controlling_Hazardous_Noise <R> connected_with <T> Need_to_be_enrolled_in_the_hearing_Conservation_Program? <H> Is_the_exposure_considered_"hazardous"? <R> No <T> Need_to_be_enrolled_in_the_hearing_Conservation_Program? <H> Need_to_be_enrolled_in_the_hearing_Conservation_Program? <R> Yes <T> Testing_Phase <H> Testing_Phase <R> connected_with <T> Proceed_with_work <H> Need_to_be_enrolled_in_the_hearing_Conservation_Program? <R> No <T> Proceed_with_work || Bad environment is connected with Work Process A General Requirements which is then connected with Has the area been monitored for noise levels?. Has the area been monitored for noise levels? is No then Environment Monitor and if Has the area been monitored for noise levels? is Yes then Is the exposure considered "nuisance" level noise?. Also, Environment Monitor is connected with Is the exposure considered "nuisance" level noise?. If Is the exposure considered "nuisance" level noise? is Yes then Work Process C Controlling Nuisance Noise and if Is the exposure considered "nuisance" level noise? is No then Is the exposure considered "hazardous"?. Also, Work Process C Controlling Nuisance Noise is connected with Is the exposured considered "hazardous"?. If Is the exposured considered "hazardous"? is Yes then Work Process D Controlling Hazardous Noise and if Is the exposured considered "hazardous"? is No then Need to be entrolled in the Hearing Conservation Program?. Also, Work Process D Controlling Hazardous Noise is connected with Need to be entrolled in the Hearing Conservation Program?. If Need to be enrolled in the Hearing Conservation Program? is Yes then Testing Phase and if Need to be enrolled in the Hearing Conservation Program? is No then Proceed with work.      
<H> Memory <R> connected_with <T> Tx:_Epely_maneuver <H> Tx:_Epely_maneuver <R> connected_with <T> Positional_test <H> Positional_test <R> Resolution_of_the_PC-BPPV <T> End_of_study <H> Positional_test <R> Treatment_failure <T> Random_allocation <H> Random_allocation <R> connected_with <T> Malware_Test <H> Random_allocation <R> connected_with <T> Tx:_Semont_maneuver <H> Malware_Test <R> connected_with <T> Positional_test <H> Tx:_Semont_maneuver <R> connected_with <T> Positional_test <H> Positional_test <R> connected_with <T> End_of_study || Memory is connected with Tx: Epely maneuver which is then connected with Positional test. If Positional test is Resolution of the PC-BPPV then End of Study and If Positional test is Treatment failure then Random allocation. Random allocation is then connected with both Malware Test and Tx: Semont maneuver. Also, Malware Test and Tx: Semont maneuver both are connected with Positional test which is finally connected with End of study.                                         
<H> Pre-processing_using <R> connected_with <T> Feature_Extraction <H> Feature_Extraction <R> connected_with <T> Parameter_Optimization <H> Parameter_Optimization <R> connected_with <T> Classification <H> Classification <R> connected_with <T> Pure_speech <H> Classification <R> connected_with <T> Music <H> Classification <R> connected_with <T> Environmental_sound <H> Classification <R> connected_with <T> Amplifier || Pre-processing using is connected with Feature Extraction which is then connected with Parameter Optimization which is further connected with Classification. Classification is then connected with Pure speech, Music, Environmental sound, and Amplifier.
<H> Leave_home <R> connected_with <T> Check_time <H> Check_time <R> connected_with <T> Before_7_am? <H> Before_7_am? <R> NO <T> Take_bus <H> Before_7_am? <R> YES <T> Take_Car <H> Take_bus <R> connected_with <T> Reach_school <H> Take_car <R> connected_with <T> Reach_school || Lwave home is then connected with Check time which is then connected with Before 7 am?. If Before 7 am? is NO then Take bus and if Before 7 am? is YES then Take Car. Also, both Take bus and Take Car are connected with Reach school. 
<H> Planning <R> connected_with <T> Sun-dried_&_decorticated <H> Sun-dried_&_decorticated <R> connected_with <T> Leave_it <H> Leave_it <R> connected_with <T> Extraction_(Mechanical/Solvent/intermittent <H> Extraction_(Mechanical/Solvent/intermittent <R> connected_with <T> Gathering <H> Gathering <R> connected_with <T> Sedimentation/boiling_with_water/filtration <H> Sedimentation/boiling_with_water/filtration <R> connected_with <T> STEP-3_Processing_of_oil <H> STEP-3_Processing_of_oil <R> connected_with <T> Dilution_with_hydrocarbons <H> STEP-3_Processing_of_oil <R> connected_with <T> seed <H> STEP-3_Processing_of_oil <R> connected_with <T> Micro-emulsification <H> STEP-3_Processing_of_oil <R> connected_with <T> Transesterification <H> Dilution_with_hydrocarbons <R> connected_with <T> Blended_fuel <H> seed <R> connected_with <T> Liquid_fractions <H> Micro-emulsification <R> connected_with <T> Micro-emulsification <H> Transesterification <R> connected_with <T> Waste || Planning is connected with SUn-dried & decorticated which is then connected with Leave it. Leave it is connected with Extraction (Mechanical/Solvent/intermittent which is then connected with Gathering which is further connected with Sedimentation/boiling with water/filteration. Sedimentation/boiling with water/filteration is connected with STEP-3 Processing of oil which is then connected with Dilution with hydrocarbons, Seed, Micro-emulsification, and Transesterification. Dilution with hydrocarbons is connected with Blended fuel. seed is connected with Liquid fractions. Micro-emulsification is connected with Micro-emulsification. Transesterification is connected with Waste. 
<H> START <R> connected_with <T> Sum=0_N=50 <H> Sum=0_N=50 <R> connected_with <T> Update <H> Update <R> connected_with <T> Sum=Sum+N <H> Sum=Sum+N <R> connected_with <T> N=99? <H> N=99? <R> NO <T> Update <H> N=99? <R> YES <T> PRINT_SUM <H> PRINT_SUM <R> connected_with <T> END || START is connected with Sum=0 N=50 which is then connected with Update which is further connected with Sum=Sum+N. Sum=SUm+N is connected with N=99? which if N=99? is No then Update and if N=99? is YES then PRINT SUM which is finally connected with END.
<H> Image_DataBase <R> connected_with <T> Train_sample <H> Image_DataBase <R> connected_with <T> Test_sample <H> Train_sample <R> connected_with <T> SVM_Classifier <H> Test_sample <R> connected_with <T> Model <H> SVM_Classifier <R> connected_with <T> Model <H> Model <R> connected_with <T> Result || Image DataBase is connected with both Train sample and Test sample. Train sample is connected with SVM CLassifier which is then connected with Model. Also, Test Sample is connected with Model which is finally connected with Result.
<H> Initiate_agent <R> connected_with <T> Evaluate_the_fitness_for_each_agent <H> Evaluate_the_fitness_for_each_agent <R> connected_with <T> Update_values <H> Update_values <R> connected_with <T> Claculate_M_and_a_for_each_agent <H> Claculate_M_and_a_for_each_agent <R> connected_with <T> Update_velocity_and_position <H> Update_velocity_and_position <R> connected_with <T> Meeting_end_of_criterion? <H> Meeting_end_of_criterion? <R> No <T> Evaluate_the_fitness_for_each_agent <H> Meeting_end_of_criterion? <R> Yes <T> Finish || Initiate agent is connected with Evaluate the fitness for each agent which is then connected with Update values. Update values is connected with Calculate M and a for each agent which is then connected with Update velocity and position which is further connected with Meeting end of criterion?. If Meeting end of criterion? is No then Evaluate the fitness for each agent and if Meeting end of criterion? is Yes then Finish. 
<H> Login_Profile <R> connected_with <T> Still_Logged_in? <H> Still_Logged_in? <R> No <T> Session_time_out <H> Session_time_out <R> connected_with <T> Login_Again <H> Still_Logged_in? <R> Yes <T> Go_On <H> Go_On <R> connected_with <T> Still_Logged_in? <H> Login_Again <R> connected_with <T> Logged_in? <H> Logged_in? <R> No <T> Pause_Counting <H> Logged_in? <R> Yes <T> Go_On || Login Profile is connected with Still Logged in?. If Still Logged in? is No then Session time out which is then connected with Login Again and if Still Logged in? is Yes then Go On which is then connected with Still Logged in?. Login Again is connected with Logged in? which if Logged in? is No then Pause Counting and if Logged in? is Yes then Go On.
<H> Recruitment_Requistion <R> connected_with <T> Talk_with_HR <H> Talk_with_HR <R> connected_with <T> Advertise_for_the_Job <H> Advertise_for_the_Job <R> connected_with <T> Recieve_application_for_the_Job <H> Recieve_application_for_the_Job <R> connected_with <T> Categorise_applications <H> Categorise_applications <R> connected_with <T> Good_candidate <H> Good_candidate <R> connected_with <T> Assess_against_criteria <H> Categorise_applications <R> connected_with <T> Unsuitable_for_the_Job <H> Unsuitable_for_the_Job <R> connected_with <T> Send_Thank_you_letter_email <H> Assess_against_criteria <R> Yes <T> Interview_candidates <H> Assess_against_criteria <R> No <T> Send_Thank_you_letter_email <H> Interview_candidates <R> connected_with <T> Next_round <H> Next_round <R> No <T> Send_Thank_you_letter_email <H> Next_round <R> Yes <T> 2nd_Interview <H> 2nd_Interview <R> connected_with <T> Assess_against_criteria <H> Assess_against_criteria <R> No <T> Send_Thank_you_letter_email <H> Assess_against_criteria <R> Yes <T> Job_offer || Recruitment Requisition is connected with Talk with HR which is then connected with Advertise for the Job which is further connected with Recieve application for the Job. Recieve application for the Job is connected with Categorise application which is then connected with both Good candidate and Unsuitable for the Job. Good candidate is connected with Assess against criteria and if Assess against criteria is Yes then Interview candidate and if Assess against criteria is No then Send Thank you letter email. Also, Unsuitable for the Job is connected with Send Thank you letter email. Interview candidates is connected with Next round which if Next round is No then Send Thank you letter email and if Next round is Yes then 2nd Interview which is further connected with Assess against criteria. If Assess against criteria is No then Send Thank you letter email and if Assess against criteria is Yes then Job offer.      
<H> Structural_ecodesign_of_a_composite_wind_turbine_blade <R> connected_with <T> Initial_database <H> Initial_database <R> connected_with <T> Initial_eco-coefficients <H> Initial_eco-coefficients <R> connected_with <T> Software_tool_for_structural_analysis <H> Software_tool_for_structural_analysis <R> connected_with <T> Assessment <H> Assessment <R> Good <T> Display_result <H> Assessment <R> Bad <T> Update_result <H> Update_result <R> connected_with <T> New_database <H> New_database <R> connected_with <T> New_eco-coefficients <H> New_eco-coefficients <R> connected_with <T> Optimisation <H> Optimisation <R> connected_with <T> Software_tool_for_structural_analysis || Structural ecodesign of a composite wind turbine blade is connected with Initial database which is then connected with Initial eco-coefficients which is further connected with Software tool for structural analysis. Software tool for structural analysis is connected with Assessment which if Assessment is Good then Display result and if Assessment is Bad then Update result which is then connected with New database. New database is connected with New eco-coefficients which is then connected with Optimisation which is finally connected with Software tool for structural analysis.
<H> Problem <R> Y <T> What_is_it? <H> Problem <R> N <T> I_don't_need_help <H> What_is_it? <R> connected_with <T> Do_I_know_the_solution <H> Do_I_know_the_solution <R> N <T> I_need_help <H> Do_I_know_the_solution <R> Y <T> Think_of_solution <H> Think_of_solution <R> N <T> I_need_help <H> Think_of_solution <R> Y <T> Try_my_solution <H> Try_my_solution <R> connected_with <T> Did_it_work? <H> Did_it_work? <R> N <T> I_need_help <H> Did_it_work? <R> Y <T> I_don't_need_help || If Problem is Y then What is it? which is further connected with Do I know the solution? and if Problem is N then I don't need help. Also, If Do I know the solution? is N then I need help and if Do I know the solution? is Y then Think of solution. If Think of solution is N then I need help and if THink of solution is Y then Try my solution which is further connected with Did it work?. If Did it work? is N then I need help and if Did it work? is Y then I don't need help.  
<H> START <R> connected_with <T> Read_Inputs <H> Read_Inputs <R> connected_with <T> Read_command_from_Bluetooth_Unit <H> Read_command_from_Bluetooth_Unit <R> connected_with <T> Run_sensors <H> Run_sensors <R> connected_with <T> Read_sensor_values <H> Read_sensor_values <R> connected_with <T> Send_read_sensor_values_To_bluetooth_unit <H> Send_read_sensor_values_To_bluetooth_unit <R> connected_with <T> Read_command_from_Bluetooth_Unit || START is connected with Read Inputs which is then connected with Read command from Bluetooth Unit which is further connected with Run sensors. Run sensors is connected with Read sensor values which is then connected with Send read sensor values To bluetooth unit which is finally connected with Read command from Bluetooth Unit. 
<H> Initialization <R> connected_with <T> Senior_pathologist_sample_qualification <H> Senior_pathologist_sample_qualification <R> connected_with <T> Sample_check <H> Sample_check <R> connected_with <T> cartidge_assay <H> cartidge_assay <R> connected_with <T> Invalid_result <H> cartidge_assay <R> connected_with <T> Infected <H> cartidge_assay <R> connected_with <T> No_Infection <H> Invalid_result <R> connected_with <T> STOP <H> Infected <R> connected_with <T> STOP <H> No_Infection <R> connected_with <T> Go_Home <H> STOP <R> connected_with <T> Results <H> Go_Home <R> connected_with <T> Results || Initialization is connected with Senior pathologist sample qualification which is then connected with Sample check. Sample check is connected with cartidge assay is then connected with Invalid result, Infected, and No Infection. Invalid result and Infected both are connected with STOP and No Infection is connected with Go Home. Also, STOP and Go Home both are connected with Results.
<H> reference <R> connected_with <T> Noice_romovel <H> Noice_romovel <R> connected_with <T> Subsampling <H> Noice_romovel <R> connected_with <T> Time_alignment <H> Time_alignment <R> connected_with <T> Similarities <H> Similarities <R> connected_with <T> Analysis_of_feature_distribution <H> Subsampling <R> connected_with <T> Information_Extraction <H> Information_Extraction <R> connected_with <T> Global_temporal_degradation <H> Global_temporal_degradation <R> connected_with <T> Perceptually_motivated_aggregation <H> Analysis_of_feature_distribution <R> connected_with <T> Perceptually_motivated_aggregation <H> Perceptually_motivated_aggregation <R> connected_with <T> Result || reference is connected with Noice romovel which is then connected with Subsampling, Time alignment, and Similarities. Time alignment is connected with Similarities which is further connected with Analysis of feature distribution. Subsampling is connected with Information Extraction which is then connected with Global temporal degradation which is further connected with Perceptually aggregation and Analysis of feature distribution is also connected with Perceptually motivated aggregation which is finally connected with Result.
<H> Start <R> connected_with <T> Is_target_sector<max_sector? <H> Is_target_sector<max_sector? <R> Yes <T> Increment_Sector <H> Is_target_sector<max_sector? <R> No <T> Target_Sector=0 <H> Increment_Sector <R> connected_with <T> End <H> Target_Sector=0 <R> connected_with <T> Want_to_update? <H> Want_to_update? <R> Yes <T> Increment_head <H> Increment_head <R> connected_with <T> End <H> Want_to_update? <R> No <T> Target_head=0 <H> Target_head=0 <R> connected_with <T> Increment <H> Increment <R> connected_with <T> End || Start is connected with Is target sector < max sector? which if Is target sector < max sector? is Yes then Increment Sector which is further connected with End and if Is target sector < max sector? is No then Target Sector=0 which is then connected with Want to update?. If Want to update? is Yes then Increment head  which is then connected with End and if Want to update? is No then Target head=0 which is then connected with Increment which is finally connected with End.
<H> User <R> connected_with <T> Login? <H> Login? <R> No <T> Activate_Events <H> Login? <R> Yes <T> Check_message <H> Login? <R> Yes <T> Manage_Friends <H> Check_message <R> connected_with <T> Manage_Events <H> Activate_Events <R> connected_with <T> Manage_Events <H> Manage_Events <R> connected_with <T> Finish || User is connected with Login? which if Login is No then Activate Events and if Login? is Yes then Manage friends and Check message.Then Check message and Activate Events are connected with Manage Events which is finally connected with Finish.
<H> Start <R> connected_with <T> Round_1_T=1 <H> Round_1_T=1 <R> connected_with <T> Draw_lots_to_select_witness_nodes <H> Draw_lots_to_select_witness_nodes <R> connected_with <T> Binarize_block <H> Binarize_block <R> connected_with <T> Packing_block <H> Packing_block <R> connected_with <T> Block_verification <H> Block_verification <R> Verification_failed <T> Timeout_verification <H> Block_verification <R> connected_with <T> Authentication <H> Authentication <R> connected_with <T> Binarize_block <H> Timeout_verification <R> Timeout <T> Next_round_draw <H> Next_round_draw <R> connected_with <T> Draw_lots_to_select_witness_nodes <H> Block_verification <R> Success <T> Finish || Start is connected with Round 1 T=1 which is then connected with Draw lots to select witness nodes which is further connected with Binarize block. Binarize block is connected with Packing block which is then connected with Block verification. If Verification failed then Timeout verification which if Timeout verification is Timeout then Next round draw which is further connected with Draw lots to select witness nodes. Also Block verification is connected with Authentication which is further connected with Binarize block. And, If Block verification is Success then Finish. 
<H> Start <R> connected_with <T> Login <H> Login <R> connected_with <T> Verified? <H> Verified? <R> No <T> Login <H> Verified? <R> Yes <T> Dashboard <H> Dashboard <R> connected_with <T> Click_on_the_report_incident_link <H> Click_on_the_report_incident_link <R> connected_with <T> Fill_the_form <H> Fill_the_form <R> connected_with <T> Validation_Module <H> Validation_Module <R> connected_with <T> Need? <H> Need? <R> No <T> Update_form <H> Need? <R> Yes <T> View_comments_on_the_post <H> Update_form <R> connected_with <T> Submit <H> Submit <R> connected_with <T> Validation_Module <H> View_comments_on_the_post <R> connected_with <T> Stop || Start is connected with Login which is then connected with Verified?. If Verified is No then Login and if Verified is Yes then Dashboard which is then connected with Click on the report incident link which is further connected with Fill the form. Fill the form is connected with Validation Module which is then connected with Need?. If Need? is No then Update form which is then connected with Submit which is further connected with Validation Module. If Need? is Yes then View comments on the post which is finally connected with Stop.
<H> Candidate <R> connected_with <T> Are_two_candidate_left? <H> Are_two_candidate_left? <R> no <T> Eliminate_last_place_candidate <H> Eliminate_last_place_candidate <R> connected_with <T> Recount_all_ballots <H> Recount_all_ballots <R> connected_with <T> Are_two_candidate_left? <H> Are_two_candidate_left? <R> yes <T> Finish || Candidate is connected with Are two candidate left?. If Are two candidate left? is no then Eliminate last place candidate which is connected with Recount all ballots which is further connected with Are two candidate left?. And, If Are two candidate left? is yes then Finish. 
<H> start <R> connected_with <T> identity_authentication <H> identity_authentication <R> connected_with <T> identity_verification <H> identity_verification <R> N <T> Try_Again <H> Try_Again <R> connected_with <T> identity_verification <H> identity_verification  <R> Y <T> Profile <H> Profile <R> N <T> User <H> Profile <R> Y <T> identity_management || Start is connected with identity authentication which is then connected with identity verification. If identity verification is N then Try Again which is further connected with identity verification and if identity verification is Y then Profile. If Profile is N then User and if Profile is Y then identity management.  
<H> Begin <R> connected_with <T> Pre-configuration <H> Pre-configuration <R> connected_with <T> Input <H> Input <R> connected_with <T> Input_Signal_Analysis <H> Input_Signal_Analysis <R> connected_with <T> Input_Signal_Analysis <H> Input_Signal_Analysis <R> Yes <T> Output_Signal_Analysis <H> Output_Signal_Analysis <R> connected_with <T> Output_Signal_Analysis_Finished? <H> Output_Signal_Analysis_Finished? <R> NO <T> Update <H> Output_Signal_Analysis_Finished? <R> YES <T> Back_to_work <H> Back_to_work <R> connected_with <T> Input || Begin is connected with Pre-configuration which is then connected with Input which is further connected with Input Signal Analysis. Input Signal Analysis is connected with Input Signal Analysis Finished? which if Input Signal Analysis Finished? is YES then Output Signal Analysis which is then connected with Output Signal Analysis Finished?. If Output Signal Analysis Finished? is No then Update which is further connected with Input and if Output Signal Analysis Finished? is YES then Back to work which is also connected with Input.   
<H> Start <R> connected_with <T> Read_Temp <H> Read_Temp <R> connected_with <T> Temp<32? <H> Temp<32? <R> Yes <T> Go_Out <H> Temp<32? <R> No <T> Don't_go_out <H> Go_Out <R> connected_with <T> End <H> Don't_go_out <R> connected_with <T> End || Start is connected with Read Temp which is then connected with Temp<32? which if Temp<32? is Yes then Go out and if Temp<32 is No then Don't go out. Then Go out and Don't go out both are connected with End. 
<H> Count_voters'_First_Choices <R> connected_with <T> Any_one_left? <H> Any_one_left? <R> no <T> Eliminate_last_place_candidate <H> Eliminate_last_place_candidate <R> connected_with <T> Recount_all_ballots <H> Recount_all_ballots <R> connected_with <T> Any_one_left? <H> Any_one_left? <R> yes <T> Search_them || Count voters' First Choices is connected with Any one left? If Any one left? is no then Eliminate last place candidate which is then connected with Recount all ballots which is further connected with Any one left?. If Any one left? is yes then Search them.
<H> Begin <R> connected_with <T> Initialize-weights_and_biases_With_random_values <H> Initialize-weights_and_biases_With_random_values <R> connected_with <T> Perform_operations <H> Perform_operations <R> connected_with <T> Calculate_Error <H> Calculate_Error <R> connected_with <T> Error<Error <H> Error<Error <R> Yes <T> End <H> Error<Error <R> No <T> Epoch>Epoch <H> Epoch>Epoch <R> Yes <T> End <H> Epoch>Epoch <R> No <T> Update_weights_and_biases <H> Update_weights_and_biases <R> connected_with <T> Epoch=epoch+1 <H> Epoch=epoch+1 <R> connected_with <T> Perform_operations || Begin is connected with Initialize weights and biases With random values which is then connected with Perform oprations. Perform operations is connected with Calculate Error which is then connected with Error<Error. If Error<Error is Yes then End and if Error<Error is No then Epoch>Epoch. If Epoch>Epoch is Yes then End and if Epoch>Epoch is No then Update weights and biases which is then connected with Epoch=epoch+1 which is finally connected with Perform operations.  
<H> Start <R> connected_with <T> Hard_work <H> Hard_work <R> connected_with <T> Franchise <H> Hard_work <R> connected_with <T> New_Strategy <H> Franchise <R> connected_with <T> Success <H> Success <R> No <T> New_Strategy <H> Success <R> Yes <T> Order_more <H> Order_more <R> connected_with <T> Sold <H> Sold <R> No <T> New_Strategy <H> Sold <R> Yes <T> Expandable <H> Expandable <R> Yes <T> open_more_store <H> open_more_store <R> connected_with <T> Success <H> Expandable <R> No <T> End || Start is connected with Hard work which is then connected with Franchise and New Strategy which is further connected with Success. If Success is No then New Strategy and if Success is Yes then Order more which is then connected with Sold. If Sold is No then New Strategy and if Sold is Yes then Expandable. If Expandable is Yes then open more store which is then connected with Success and if Expandable is No then End.  
<H> Start <R> connected_with <T> Power_on <H> Power_on <R> connected_with <T> Coffee_selected <H> Coffee_selected <R> Latte <T> Add_frothed_milk <H> Coffee_selected <R> Espresso <T> Add_sugar <H> Coffee_selected <R> Mocha <T> Add_Chocolate_powder <H> Add_Chocolate_powder <R> connected_with <T> Add_frothed_milk <H> Add_frothed_milk <R> connected_with <T> Add_sugar <H> Add_sugar <R> connected_with <T> Power_pressed <H> Power_pressed <R> connected_with <T> Power_off <H> Power_off <R> connected_with <T> End || Start is connected with Power on which is then connected with Coffee selected. If Coffee selected is Latte then Add frothed milk and if Coffee selected is Espresso then Add sugar and if Coffee selected is Mocha then Add Chocolate powder which is then connected with Add frothed milk. Add frothed milk is then connected with Add sugar which is then connected with Power pressed. Power pressed is then connected with Power off which is finally connected with End.  
<H> Randomly_generating_a_group_of_parameters_of_SVM_model <R> connected_with <T> Calculate_all_the_values <H> Calculate_all_the_values <R> connected_with <T> Finding_out_the_optimal_fitness <H> Finding_out_the_optimal_fitness <R> connected_with <T> Are_optimazation_criteria_met? <H> Are_optimazation_criteria_met? <R> No <T> Generating_new_group_by_evolutionary_operation <H> Generating_new_group_by_evolutionary_operation <R> connected_with <T> Calculate_all_the_values <H> Are_optimazation_criteria_met? <R> Yes <T> Finish || Randomly generating a group of parameters of SVM model is connected with Calculate all the values which is then connected with Finding out the optimal fitness value. Finding out the optimal fitness value is connected with Are optimazation criteria met?. If Are optimazation criteria met? is No then Generating new group by evolutionary operation which is further connected with Calculate all the values and if Are optimazation criteria met? is Yes then Finish. 
<H> terminator <R> connected_with <T> Take_all_values <H> Take_all_values <R> connected_with <T> Input_Hours_Per_Week <H> Input_Hours_Per_Week <R> connected_with <T> Hourly_Pay_x_Hours_Per_Week <H> Hourly_Pay_x_Hours_Per_Week <R> connected_with <T> weeklypay>400 <H> weeklypay>400 <R> true <T> Output_can_afford_to_live_along <H> weeklypay>400 <R> false <T> Poor_condition <H> Output_can_afford_to_live_along <R> connected_with <T> End <H> Poor_condition <R> connected_with <T> End || Connection is connected with Take all values which is then connected with Input Hours Per Week which is further connected with Hourly Pay x Hours Per Week. Hourly Pay x Hours Per Week is connected with weeklypay>400 which if weeklypay>400 is true then Output can afford to live along and if weeklypay>400 is false then Poor condition. Output can afford to live along and Poor condition both are connected with End.   
<H> Input_Image <R> connected_with <T> Feature_extraction <H> Feature_extraction <R> connected_with <T> SVM_Classifier <H> Database <R> connected_with <T> SVM_Classifier <H> SVM_Classifier <R> connected_with <T> Normal <H> SVM_Classifier <R> connected_with <T> Abnormal || Input Image is connected with Feature extraction which is then connected with SVM Classifier which is then connected with Normal and Abnormal. Database is connected with SVM Classifier.
<H> Data_Acquisition <R> connected_with <T> Preprocessing <H> Preprocessing <R> connected_with <T> Signal_sampling <H> Signal_sampling <R> connected_with <T> Labeling_R-peaks_with_their_Location <H> Labeling_R-peaks_with_their_Location <R> connected_with <T> Signal <H> Signal <R> connected_with <T> Geometry_Analysis <H> Signal <R> connected_with <T> Frequency-domain_Analysis <H> Signal <R> connected_with <T> Time-domain_Analysis <H> Geometry_Analysis <R> connected_with <T> HRV_Evaluation <H> Frequency-domain_Analysis <R> connected_with <T> HRV_Evaluation <H> Time-domain_Analysis <R> connected_with <T> HRV_Evaluation || Data Acquisition is connected with Preprocessing which is then connected with Signal sampling which is further connected with Labelling R-peaks with their Location. Labelling R-peaks with their Location is connected with Signal which is then connected with Geometry Analysis, Frequency-domain Analysis, and Time domain Analysis. Also, Geometry Analysis, Frequency-domain Analysis, and Time-domain Analysis all are connected with HRV Evaluation. 
<H> RF_Front_End <R> connected_with <T> Amplifier <H> Noise <R> connected_with <T> Amplifier <H> Amplifier <R> connected_with <T> Acquisition <H> Acquisition <R> connected_with <T> Channel_1_Tracking <H> Acquisition <R> connected_with <T> Channel_2_tracking <H> Channel_2_tracking <R> connected_with <T> End <H> Acquisition <R> connected_with <T> Channel_n_tracking || RF Front End is connected with Amplifier which is then connected with Acquisition which is further connected with Channel 1 Tracking, Channel 2 Tracking, and Channel n Tracking and Channel 2 Tracking is connected with End. Also, Noise is connected with Amplifier.
<H> Start <R> connected_with <T> Input_Data <H> Input_Data <R> connected_with <T> Process <H> Process <R> connected_with <T> Looking_for_Gain <H> Looking_for_Gain <R> connected_with <T> Determine_the_highest_Gain <H> Determine_the_highest_Gain <R> connected_with <T> Update <H> Update <R> connected_with <T> Finished <H> Finished <R> Yes <T> End <H> Finished <R> No <T> Looking_for_Gain || Start is connected with Input Data which is then connected with Process which is further connected with Looking for Gain. Looking for Gain is connected with Determine the Highest Gain which is then connected with Update which is further connected with Finished. If Finished is Yes then End and if Finished is No then Looking for Gain.
<H> Solar_Panel <R> connected_with <T> Power_Regulator <H> Power_Regulator <R> connected_with <T> Main_Switch <H> Main_Switch <R> connected_with <T> Voltage_Divider <H> Power_Regulator <R> connected_with <T> DC-to-DC_Converter <H> Power_Regulator <R> connected_with <T> Stop <H> Main_Switch <R> connected_with <T> DC-to-DC_Converter <H> DC-to-DC_Converter <R> connected_with <T> DC-to-AC_Inverter <H> DC-to-AC_Inverter <R> connected_with <T> Stop <H> Voltage_Divider <R> connected_with <T> Fans <H> Fans <R> connected_with <T> Stop || Solar Panel is connected with Power Regulator which is then connectedw ith Main Switch which is further connected with Voltage Divider. Power Regulator is connected with both DC-to-DC Converter and Stop. Main switch is connected with DC-to-DC Converter and Voltage Divider is connected with Fans. DC-to-DC Converter is connected with DC-to-AC Inverter. Also, DC-to-AC Inverter and Fans are connected with Stop.
<H> Construction <R> connected_with <T> Acceptance_of_transformer <H> Acceptance_of_transformer <R> connected_with <T> Accessories_Installation <H> Acceptance_of_transformer <R> connected_with <T> Insulating_oil_treatment <H> Insulating_oil_treatment <R> connected_with <T> Sample_Test <H> Accessories_Installation <R> connected_with <T> Vacuum <H> Vacuum <R> connected_with <T> Sample_Test <H> Sample_Test <R> connected_with <T> Hot_oil_circulation <H> Hot_oil_circulation <R> connected_with <T> Check_impurities <H> Check_impurities <R> connected_with <T> Standing <H> Standing <R> connected_with <T> Completed || Construction is connected with Acceptance of transformer is connected with both Insulating oil treatment and Accessories Installation which is then connected with Vacuum. Insulating oil treatment and Vacuum both are connected with Sample Test which is then connected with Hot oil circulation. Hot oil circulation is connected with Check impurities which is then connected with Standing which is finally connected with Completed.
<H> Source <R> connected_with <T> Hadamard_Code <H> Hadamard_Code <R> connected_with <T> STBC_Encoder <H> STBC_Encoder <R> connected_with <T> OFDM_mod. <H> STBC_Encoder <R> connected_with <T> mod || Source is connected with Hadamard Code which is then connected with STBC ENcoder. STBC Encoder is then connected with OFDM mod and mod.
<H> Start <R> connected_with <T> READ <H> READ <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N? <H> M=N? <R> NO <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N? <R> YES <T> PRINT <H> PRINT <R> connected_with <T> END || Start is connected with READ which is then connected with M=1 F=1 which is further connected with F=F*M. F=F*M is connected with M=N? which if M=N? is NO then M=M+1 which is further connected with F=F*M and if M=N? is YES then PRINT which is further connected with END.
<H> Begin <R> connected_with <T> This_is_an_example_of_flow_chart_symbols. <H> This_is_an_example_of_flow_chart_symbols. <R> connected_with <T> num1_num2 <H> num1_num2 <R> connected_with <T> num1>num2 <H> num1>num2 <R> True <T> Update <H> Update <R> connected_with <T> terminator <H> num1>num2 <R> False <T> num1++_num2-- <H> num1++_num2-- <R> connected_with <T> Display:_num1,_num2 <H> Display:_num1,_num2 <R> connected_with <T> End || Begin is connected with This is an example of flow chart symbols. which is then connected with num1 and num2 which is further connected with num1>num2. If num1>num2 is True then Update which is then connected with connection and if num1>num2 is False then num1++ num2-- which is directly connected with Display: num1, num2. Also, connection is connected with End which is finally connected with End.  
<H> start <R> connected_with <T> guess_number <H> guess_number <R> connected_with <T> if<=10 <H> if<=10 <R> true <T> small_number <H> if<=10 <R> false <T> if>10_and_<=80 <H> if>10_and_<=80 <R> true <T> medium_number <H> if>10_and_<=80 <R> false <T> large_number <H> medium_number <R> connected_with <T> end <H> large_number <R> connected_with <T> end <H> small_number <R> connected_with <T> end || Start is connected with guess number which is then connected with if<=10 which if<=10 is true then small number and if<=10 is false then if>10 and <=80. Also, if>10 and <=80 is true then medium number and if>10 and <=80 is false then large number. Small number, medium number, and large number all are connected with end. 
<H> Begin <R> connected_with <T> Generate_new_colony <H> Generate_new_colony <R> connected_with <T> Colony_performance_evaluation <H> Colony_performance_evaluation <R> connected_with <T> Binary_Search <H> Binary_Search <R> connected_with <T> Crowding_distance_sorting <H> Crowding_distance_sorting <R> connected_with <T> Update_colony <H> Update_colony <R> connected_with <T> Need_more_values <H> Need_more_values <R> No <T> Colony_performance_evaluation <H> Need_more_values <R> Yes <T> End || Begin is connected with Generate new colony which is then connected with Colony performance evaluation which is further connected with Binary Search. Binary Search is connected with Crowding distance sorting which is then connected with Update colony which is further connected with Need more values?. If Need more values? is No then Colony performance evaluation and if Need more values? is Yes then End.
<H> Power_Supply <R> connected_with <T> Bulb <H> Power_Supply <R> connected_with <T> TV <H> Bulb <R> connected_with <T> Processor <H> TV <R> connected_with <T> Processor <H> Processor <R> connected_with <T> Hard_Drive || Power Supply is connected with both Bulb and TV. Also, Bulb and TV both are connected with Processor which is then connected with Hard Drive.
<H> Log_In <R> connected_with <T> Logged_in <H> Logged_in <R> No <T> OpenID <H> Logged_in <R> Yes <T> Home <H> OpenID <R> connected_with <T> Home || Log In is connected with Logged in which if Logged in is No then OpenID and if Logged in is Yes then Home. Also, OpenID is connected with Home.
<H> Begin <R> connected_with <T> iCounter=1 <H> iCounter=1 <R> connected_with <T> Output:_icounter <H> Output:_icounter <R> connected_with <T> Increment <H> Increment <R> connected_with <T> iCounter<=10 <H> iCounter<=10 <R> True <T> Output:_icounter <H> iCounter<=10 <R> False <T> End || Begin is connected with iCounter=1 which is then connected with Output iCounter which is further connected with Increment. Increment is connected with iCounter<=0 which if iCounter<=10 is True then Output iCounter and if iCounter<=10 is False then End. 
<H> Raw_Image <R> connected_with <T> De-noising <H> De-noising <R> connected_with <T> Image_Thresholding <H> Image_Thresholding <R> connected_with <T> Isolated_pixels_removal <H> Isolated_pixels_removal <R> connected_with <T> Inverse_Image <H> Inverse_Image <R> connected_with <T> Mean_Average <H> Mean_Average <R> connected_with <T> Operator <H> Operator <R> connected_with <T> Interpolation_Image <H> Operator <R> connected_with <T> Correlation_Image <H> Operator <R> connected_with <T> Sampling <H> Correlation_Image <R> connected_with <T> Edge_Detection || Raw Image is connected with De-noising which is then connected with Image Thresholding which is further connected with Isolated pixels removal. Isolated pixels removal is connected with Inverse Image which is then connected with Mean Average which is further connected with Operator. Operator is connected with Interpolation Image, Correlation Image, and Sampling. Also, Correlation Image is connected with Edge Detection.
<H> Collect_rice_sheath_blight_images <R> connected_with <T> Image_preprocessing <H> Image_preprocessing <R> connected_with <T> smoothing <H> Image_preprocessing <R> connected_with <T> Histogram_equalization <H> Image_preprocessing <R> connected_with <T> segmentation <H> smoothing <R> connected_with <T> Feature_extraction <H> segmentation <R> connected_with <T> Feature_extraction <H> Feature_extraction <R> connected_with <T> feature_extraction <H> Feature_extraction <R> connected_with <T> Texture_extraction || Collect rice sheath blight images is connected with Image preprocessing which is then connected with smoothing, Histogram equalization, and segmentation. Also, smoothing and segmentation are connected with Feature extraction which is further connected with both feature extraction and Texture extraction.
<H> Database_searches_n=408 <R> connected_with <T> Records_identified_n=492 <H> Conference_abstracts_n=16 <R> connected_with <T> Records_identified_n=492 <H> clinicaltrials.gov_n=68 <R> connected_with <T> Records_identified_n=492 <H> Records_identified_n=492 <R> connected_with <T> Records_screened <H> Records_identified_n=492 <R> connected_with <T> Duplicates_removed <H> Records_screened <R> connected_with <T> Records_independently_screened_by_two_reviewers <H> Records_screened <R> connected_with <T> Clearly_irrelevant_records_removed <H> Records_independently_screened_by_two_reviewers <R> connected_with <T> Full-text_articles_retrieved <H> Records_independently_screened_by_two_reviewers <R> connected_with <T> Irrelevant_records_removed <H> Full-text_articles_retrieved <R> connected_with <T> Stop_the_process <H> Full-text_articles_retrieved <R> connected_with <T> Update || Database searches n=408, Conference abstracts n=16, and clinicaltrials.gov n=68 are connected with Records identified n=492 which is then connected with both Records screened and Duplicates removed. Records screened is then connected with both Records independently screened by two reviewers and Clearly irrelevant records removed. Then, Records independently screened by two reviewers is connected with Full-text articles retrieved and Irrelevant records removed. Full-text articles retrieved is then connected with both Stop the process and Update.
<H> START <R> connected_with <T> count=1 <H> count=1 <R> connected_with <T> count<=3 <H> count<=3 <R> No <T> STOP <H> count<=3 <R> Yes <T> INPUT <H> INPUT <R> connected_with <T> p*n*r/100 <H> p*n*r/100 <R> connected_with <T> PRINT <H> PRINT <R> connected_with <T> count=count+1 <H> count=count+1 <R> connected_with <T> count<=3 || START is connected with count=1 which is then connected with count<=3. If count<=3 is No then STOP and if count<=3 is Yes then INPUT which is then connected with p*n*r/100 which is further connected with PRINT. PRINT is connected with count=count+1 which is then connected with count<=3. 
<H> Begin <R> connected_with <T> Does_the_user_has_an_account? <H> Does_the_user_has_an_account? <R> No <T> Go_to_website <H> Does_the_user_has_an_account? <R> Yes <T> User_enter_email <H> Go_to_website <R> connected_with <T> "Open_an_account"_page_open <H> User_enter_email <R> connected_with <T> User_enter_password <H> User_enter_password <R> connected_with <T> User_clicks_on_the_login_button <H> User_clicks_on_the_login_button <R> connected_with <T> Are_the_email_and_password_is_correct? <H> Are_the_email_and_password_is_correct? <R> No <T> Close <H> Are_the_email_and_password_is_correct? <R> Yes <T> Error_message_appears || Begin is connected with Does the User has an account? which if Does the user has an account? is No then Go to website which is then connected with "Open an account" page open and if Does the user has an account? is Yes then User enter email which is then connected with User enter password which is further connected with User clicks on the login button. User clicks on the login button is connected with Are the email and password is correct? which if Are the email and password is correct? is No then Close and if Are the email and password is correct? is Yes then Error message appears.   
<H> Start <R> Disapproved <T> Keyword_rejected <H> Start <R> connected_with <T> Writer_creates_article_draft_(with_image_ideas) <H> Start <R> connected_with <T> Marketer_gathers_outreach_list <H> Writer_creates_article_draft_(with_image_ideas) <R> connected_with <T> Feedback <H> Feedback <R> Edit_needed <T> Writer_creates_article_draft_(with_image_ideas) <H> Feedback <R> connected_with <T> Designer_creates_graphics <H> Designer_creates_graphics <R> connected_with <T> Marketer_optimizes_article_&_publishes_it <H> Marketer_optimizes_article_&_publishes_it <R> connected_with <T> Finish || If Start is Disapproved then Keyword reected and also Start is connected with both Marketer gathers outreach list and Writer creates article draft (With image ideas). Writer creates article draft (With image ideas) is then coonected with Feedback and if feedback is Edits needed then again Writer creates article draft (With image ideas) and also Feedback is connected with Designer creates graphics which is further connected with Marketer optimizes article & publishes it which is finally connectedw ith Finish.
<H> Begin <R> connected_with <T> Run_Main_FLASH <H> Run_Main_FLASH <R> connected_with <T> Is_the_Main_FLASH_Application_OK? <H> Is_the_Main_FLASH_Application_OK? <R> No <T> Initialize_IAP_Interface <H> Is_the_Main_FLASH_Application_OK? <R> Yes <T> Main_Application <H> Main_Application <R> connected_with <T> Initialize_IAP_Interface <H> Initialize_IAP_Interface <R> connected_with <T> Is_IAP_Request_Received? <H> Is_IAP_Request_Received? <R> No <T> Is_IAP_Request_Received? <H> Is_IAP_Request_Received? <R> Yes <T> Reprogram_Main_Application <H> Reprogram_Main_Application <R> connected_with <T> RESET || Begin is connected with Run Main FLASH which is then connectedw ith Is the Main FLASH Application OK?. If Is the Main FLASH Application OK? is No then Initialize IAP Interface and if Is the Main FLASH Application OK? is Yes then Main Application which is also then connected with Initialize IAP Interface. Initialize IAP Interface is connected with Is IAP Request Received? which if Is IAP Request Received? is No then again Is IAP Request Received? and if Is IAP Request Received? is Yes then Reprogram Main Application which is finally connected with RESET.   
<H> Start <R> connected_with <T> Problem <H> Problem <R> connected_with <T> Develop_an_Algorithm <H> Develop_an_Algorithm <R> connected_with <T> Think_creativity <H> Think_creativity <R> connected_with <T> Create_an_Action_Plan <H> Create_an_Action_Plan <R> connected_with <T> Discuss <H> Discuss <R> connected_with <T> Test_the_Solution <H> Test_the_Solution <R> connected_with <T> Is_the_Problem_Solved? <H> Is_the_Problem_Solved? <R> No <T> Think_creativity <H> Is_the_Problem_Solved? <R> Yes <T> End || Start is connected with Probelm which is then connected with Develop an Algorithm which is further connected with Think creativity. Think creativity is connected with Create an Action Plan which is then connected with Discuss which is further connected with Test the Solution. Test the Solution is connected with Is the Problem Solved? which if Is the Problem Solved? is No then again Think creativity and if Is the Problem Solved? is Yes then End. 
<H> Start <R> connected_with <T> Set_up_the_training_pattern <H> Set_up_the_training_pattern <R> connected_with <T> Set_up_the_structure <H> Set_up_the_structure <R> connected_with <T> Use_the_training_pattern <H> Use_the_training_pattern <R> connected_with <T> Training_finished? <H> Training_finished? <R> no <T> Use_the_training_pattern <H> Training_finished? <R> yes <T> Save_the_connection_weights <H> Save_the_connection_weights <R> connected_with <T> Power_quality_Analysis <H> Power_quality_Analysis <R> connected_with <T> End || Start is connected with Set up the training pattern which is then connected with Set up the structure which is further connected with Use the training pattern. Use the Training pattern is connected with Training finished? which if Training finished? is no then Use the training pattern and if Training finished? is yes then Save the connection weights which is then connected with Power quality Analysis which is finally connected with End. 
<H> Start <R> connected_with <T> READ <H> READ <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N? <H> M=N? <R> NO <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N? <R> YES <T> PRINT <H> PRINT <R> connected_with <T> END || START is connected with READ which is then connected with M=1 F=1 which is further connected with F=F*M. F=F*M is connected with M=N? which if M=N? is NO then M=M+1 which is further connected with F=F*M and if M=N? is YES then PRINT which is finally connected with END.
<H> Start <R> connected_with <T> Check_Weather <H> Check_Weather <R> connected_with <T> Is_it_raining? <H> Is_it_raining? <R> NO <T> Leave_umbrella_at_home <H> Is_it_raining? <R> YES <T> Take_an_umbrella <H> Leave_umbrella_at_home <R> connected_with <T> END <H> Take_an_umbrella <R> connected_with <T> END || START is connected with Check Weather which is then connected with Is it raining?. If Is it raining is NO then Leave umbrella at home and if Is it raining is YES then Take an umbrella. Leave umbrella at home and Take an umbrella both are connected with END.  
<H> Plaintext <R> connected_with <T> Ciphertext <H> ID <R> connected_with <T> Ciphertext <H> Ciphertext <R> connected_with <T> Plaintext <H> Pass <R> connected_with <T> Plaintext || Plaintext is connected with Ciphertext which is then connected with Plaintext. Also, ID is connected with Ciphertext and Pass is connected with Plaintext.
<H> Screening_from_database <R> connected_with <T> Cluster_random_sampling <H> Screening_from_database <R> connected_with <T> Exclusion <H> Cluster_random_samling <R> connected_with <T> 128_institutions <H> Cluster_random_samling <R> connected_with <T> No_paticipation <H> 128_institutions <R> connected_with <T> Enrollment_128_institutions <H> 128_institutions <R> connected_with <T> Data_missing,_Unconfirmed_diagnosis || Screening from database is connected with both Cluster random sampling and Exclusion. Then, Cluster random sampling is connected with 128 institutions and No participation. Then, 128 institutions is connected with Enrollment 128 institutions and Data missing, Unconfirmed diagnosis.
<H> Promotion <R> connected_with <T> Manager_Post <H> Manager_Post <R> connected_with <T> Send_Letter_via_Internet <H> Manager_Post <R> connected_with <T> Auditor_Schedules_Opening_Conference <H> Auditor_Schedules_Opening_Conference <R> connected_with <T> Send_Opening_Conference_Confirmation_(via_Email) <H> Auditor_Schedules_Opening_Conference <R> connected_with <T> Risk_Assessment_by_Auditors <H> Risk_Assessment_by_Auditors <R> connected_with <T> Documentation <H> Documentation <R> connected_with <T> Opening_Conference <H> Opening_Conference <R> connected_with <T> Risk_Assessment_by_Auditors <H> Opening_Conference <R> connected_with <T> Manager_Reviews_Planning <H> Manager_Reviews_Planning <R> connected_with <T> Fieldwork_Performance <H> Fieldwork_Performance <R> connected_with <T> Audit_Observation_Form <H> Audit_Observation_Form <R> connected_with <T> Finalization <H> Finalization <R> connected_with <T> Fieldwork_Performance || Promotion is connected with Manager Post which is then connected with both Send Letter via Internet and Auditor Schedules Opening Conference. Auditor Schedules Opening Conference is then connected with both Send Opening Conference Confirmation (via Email) and Risk Assessment by Auditors which is further connected with Documentation. Documentation is connected with Opening Conference which is further connected with both Risk Assessment by Auditors and Manager Reviews Planning. Manager Reviews Planning is connected with Fieldwork Performance which is then connected with Audit Observation Form which is further connected with Finalization which is finally connected with Fieldwork Performance.    
<H> Hans_Albert_Einstein <R> Son_of <T> Mileva_Maric <H> Hans_Albert_Einstein <R> son_of <T> Albert_Einstein <H> Albert_Einstein <R> Son_of <T> Hermann_Einstein <H> Mileva_Maric <R> Wife_of <T> Albert_Einstein <H> Albert_Einstein <R> Born_In <T> German_Empire || Hans Albert Einstein is Son of Mileva Mariac and Albert Einstein. Mileva Maric is wife of Albert Einstein and Albert Einstein is son of Hermann Einstein. Also, Albert Einstein was born in German Empire.
<H> Hans_Albert_Einstein <R> son_of <T> Albert_Einstein <H> Albert_Einstein <R> Son_of <T> Hermann_Einstein <H> Mileva_Maric <R> Wife_of <T> Albert_Einstein <H> Albert_Einstein <R> Born_In <T> German_Empire || Hans Albert Einstein is Son of Albert Einstein. Mileva Maric is wife of Albert Einstein and Albert Einstein is son of Hermann Einstein. Also, Albert Einstein was born in German Empire.
<H> Piotr_Hallmann <R> lives_in <T> Gdynia,_Poland <H> Piotr_Hallmann <R> born_on <T> 1987-08-25 <H> Piotr_Hallmann <R> weight <T> 70.308 <H> Piotr_Hallmann <R> height <T> 175.26 || Piotr Hallmann was born on 25 August 1987 in Gdynia, Poland. He is 175.26m tall and weighs 70.308kg.
<H> Artificial_Intelligence <R> connected_with <T> Machine_Learning <H> Machine_Learning <R> connected_with <T> Deep_Learning || Artificial Intelligence is connected with Machine Learning which is further connected with Deep Learning.
<H> START <R> connected_with <T> K_is_equal_to_0 <H> K_is_equal_to_0 <R> connected_with <T> LOOP <H> LOOP <R> connected_with <T> YES_OR_NO? <H> YES_OR_NO? <R> connected_with <T> Calculate_K_as_K+1 <H> Calculate_K_as_K+1 <R> connected_with <T> LOOP <H> YES_OR_NO? <R> connected_with <T> PRINT_K <H> PRINT_K <R> connected_with <T> STOP || START is connected to K is equal to 0 which is then connected with LOOP and further connected with YES OR NO?. Also, YES OR NO is connected with both calculate K as K+1 and PRINT K. Calculate K as K+1 is then connected to LOOP and PRINT K is connected to STOP.
<H> Customer <R> order <T> TV_Sofa <H> TV_Sofa <R> order_confirmation <T> Shipping || If Customer order TV Sofa then after order confirmation it ships.
<H> JOHN <R> LIKES <T> MANGO <H> ALLEN <R> DISLIKES <T> MANGO || John likes Mango and Allen Dislikes Mango.
<H> Start <R> connected_with <T> Read_A <H> Read_A <R> connected_with <T> Read_B <H> Read_B <R> connected_with <T> Calculate_sum_as_A+B <H> Calculate_sum_as_A+B <R> connected_with <T> Print_Sum <H> Print_Sum <R> connected_with <T> End || Start is connected with Read A, which is then connected with Read B. Read B is connected with Calculate sum as A + B, which is then connected with Print Sum which is finally connected with the End.
<H> START <R> connected_with <T> K_is_equal_to_0 <H> K_is_equal_to_0 <R> connected_with <T> Calculate_K_as_K+1 <H> Calculate_K_as_K+1 <R> connected_with <T> PRINT_K <H> PRINT_K <R> connected_with <T> STOP || START is connected with K is equal to 0 which is then connected with Calculate K as K+1 which is further connected with PRINT K which is finally connected with STOP.  
<H> START <R> connected_with <T> Input_Variable:_K <H> Input_Variable:_K <R> connected_with <T> if_K%2==0 <H> if_K%2==0 <R> False <T> Print:_K_is_odd <H> if_K%2==0 <R> True <T> Print:_K_is_Even <H> Print:_K_is_Even <R> connected_with <T> STOP || START is connected with Input Variable: K which is then connected with If K%2==0 which if K%2==0 is False then Print: K is odd and if K%2==0 is True then Print: K is Even which is finally connected with STOP.
<H> START <R> connected_with <T> K_is_equal_to_0 <H> K_is_equal_to_0 <R> connected_with <T> LOOP <H> LOOP <R> connected_with <T> YES_OR_NO? <H> YES_OR_NO? <R> Yes <T> Calculate_K_as_K+1 <H> Calculate_K_as_K+1 <R> connected_with <T> LOOP <H> YES_OR_NO? <R> No <T> PRINT_K <H> PRINT_K <R> connected_with <T> STOP || START is connected with K is equal to 0 which is then connected with LOOP. LOOP is connected with YES OR NO?. If YES OR NO, is yes then calculate K as K+1 which is then connected to LOOP. If YES OR NO is No then PRINT K which is finally connected with STOP. 
<H> Lamp_doesn't_work <R> connected_with <T> Lamp_plugged_in? <H> Lamp_plugged_in? <R> No <T> Plug_in_lamp <H> Lamp_plugged_in? <R> Yes <T> Lamp_plugged_in? <H> Lamp_plugged_in? <R> Yes <T> Replace_bulb <H> Lamp_plugged_in? <R> No <T> PRINT_K || Lamp doesn't work is connected with Lamp plugged in? which if Lamp plugged in? is No then Plug in lamp and if Lamp plugged in? is Yes then Lamp plugged in?. If Lamp plugged in? is Yes then Replace bulb and if Lamp plugged in? is No then PRINT K.
<H> BEGIN <R> connected_with <T> Check_Parameter <H> Check_Parameter <R> connected_with <T> CLICK_CHOLERA_ETEC_OR_BACK <H> CLICK_CHOLERA_ETEC_OR_BACK <R> connected_with <T> Take_rest <H> CLICK_CHOLERA_ETEC_OR_BACK <R> connected_with <T> THE_SCREEN_GOES_BACK_TO_THE_HOME <H> CLICK_CHOLERA_ETEC_OR_BACK <R> connected_with <T> THE_APP_PLAYS_AUDIO_FOR_ETEC <H> Take_rest <R> connected_with <T> CLICK_CHOLERA_BUTTON_AGAIN <H> THE_SCREEN_GOES_BACK_TO_THE_HOME <R> connected_with <T> END <H> THE_APP_PLAYS_AUDIO_FOR_ETEC <R> connected_with <T> CLICK_ETEC <H> CLICK_CHOLERA_BUTTON_AGAIN <R> connected_with <T> THE_CHOLERA_AUDIO_STOPS <H> CLICK_ETEC <R> connected_with <T> THE_ETEC_AUDIO_STOPS <H> THE_CHOLERA_AUDIO_STOPS <R> connected_with <T> END <H> THE_ETEC_AUDIO_STOPS <R> connected_with <T> END || BEGIN is connected with Check Parameter which is then connected with CLICK CHOLERA ETEC OR BACKnwhich is then connected with Take rest, THE SCREEN GOES BACK TO THE HOME, and THE APP PLAYS AUDIO FOR ETEC. Take rest is then connected with CLICK CHOLERA BUTTON AGAIN. THE SCREEN GOES BACK TO THE HOME is connected with END. THE APP PLAYS AUDIO FOR ETEC is connected with CLICK ETEC. CLICK CHOLERA BUTTON AGAIN is connected with THE CHOLERA AUDIO STOPS and CLICK ETEC is connected with THE ETEC AUDIO STOPS. Also, THE CHOLERA AUDIO STOPS and THE ETEC AUDIO STOPS both are connected with END.
<H> Start <R> connected_with <T> Input <R> connected_with <T> If_(angka%2==1) <H> If_(angka%2==1) <R> False <T> Non_prime <H> If_(angka%2==1) <R> True <T> Prime_Number <H> Prime_Number <R> connected_with <T> Finish <H> Non_prime <R> connected_with <T> Finish || Start is connected with Input which is then connected with If (angka%2==1) which if (angka%2==1) is False then Non prime and if (angka%2==1) is True then Prime Number. Also, Prime Number and Non prime both are connected with Finish.
<H> 1 <R> connected_with <T> Costumer_Order <H> Costumer_Order <R> connected_with <T> Sales_Order <H> Sales_Order <R> connected_with <T> Documentation <H> Documentation <R> No <T> Sales_Order <H> Documentation <R> Yes <T> Prepare_DO <H> Prepare_DO <R> connected_with <T> Shipment <H> Shipment <R> connected_with <T> Goods_Delivered <H> Goods_Delivered <R> connected_with <T> 2 || 1 is connected with Costumer Order which is then connected with Sales Order which is further connected with Documentation. If Documentation is No then again Sales Order and if Documentation is YES then Prepare DO which is further connected with Shipment. Shipment is connected with Goods Delivered which is finally connected with 2.
<H> Preparation <R> connected_with <T> Documentation <H> Documentation <R> connected_with <T> Process <H> Process <R> connected_with <T> Authentication <H> Authentication <R> connected_with <T> Finalize <H> Finalize <R> connected_with <T> Stop || Preparation is connected with Documentation which is then connected with Process which is further connected with Authentication. Authentication is connected with Finalize whhich is finally connected with Stop.
<H> START <R> connected_with <T> Is_it_necessary? <H> Is_it_necessary? <R> NO <T> Don't_do_it <H> Is_it_necessary? <R> YES <T> Will_it_fail? <H> Will_it_fail? <R> NO <T> Do_it! <H> Will_it_fail? <R> YES <T> Knowledge <H> Knowledge <R> NO <T> Don't_do_it! <H> Knowledge <R> YES <T> Do_it! || START is connected with Is it necessary? which if Is it necessary? is NO then Don't do it! and if Is it necessary? is YES then Will it fail?. If Will it fail? is NO then Do it! and if Will it fail? is YES then Knowledge. If Knowledge is NO then Don't do it and if Knowledge is YES then Do it!.    
<H> Mixed_Data <R> connected_with <T> Classifier <H> Classifier <R> connected_with <T> Class_1 <H> Classifier <R> connected_with <T> Class_2 <H> Classifier <R> connected_with <T> Class_3 <H> Classifier <R> connected_with <T> Class_4 || Mixed Data is connected with Classifier which is then connected with Class 1, Class 2, Class 3, and Class 4.
<H> Analog_retrieval <R> learning <T> Sampling <H> Sampling <R> Self-supervised_learning <T> Analogical_Inference <H> Analogical_Inference <R> Intersection <T> End || If Analog retrieval is learning then Sampling and If Sampling is Self-supervised learning then Analogical Inference. If Analogical Inference is Intersection then End.
<H> Activities <R> connected_with <T> Atmosphere <H> Activities <R> connected_with <T> Consumption_of_fossil_energy <H> Consumption_of_fossil_energy <R> connected_with <T> Emissions_of_primary_pollutants <H> Emissions_of_primary_pollutants <R> connected_with <T> Transformation_and_transport_of_pollutants <H> Emissions_of_primary_pollutants <R> connected_with <T> pollutants <H> Transformation_and_transport_of_pollutants <R> connected_with <T> pollutants <H> pollutants <R> connected_with <T> Exposure_to_pollutants <H> pollutants <R> connected_with <T> Effects_of_pollution <H> Exposure_to_pollutants <R> connected_with <T> Effects_of_pollution <H> Effects_of_pollution <R> connected_with <T> Effects_on_vegetation <H> Effects_of_pollution <R> connected_with <T> Effects_on_fauna,_human_and_animal_health <H> Effects_of_pollution <R> connected_with <T> Effects_on_biotopes || Activities is connected with Atmosphere and Consumption of fossil energy. Consumption of fossil energy is then connected with Emission of primary pollutants which is further connected with both Transformation and transport of pollutants and pollutants. Also, Transformation and transport of pollutants is connected with pollutants which is then connected with both Exposure to pollutants and Effects of pollution. Also, Exposure to pollutants is connected with Effects of pollution. Effects of pollution is then connected with Effects on vegetation, Effects on fauna, human and animal health, and Effects on biotopes. 
<H> Got_the_first_dose? <R> Yes <T> 1_dose <H> Got_the_first_dose? <R> No/Don't_know <T> Got_second_dose? <H> Got_second_dose? <R> Yes <T> 1_dose <H> Got_second_dose? <R> No/Don't_know <T> 2_dose || If Got the first dose? is Yes then 1 dose and if Got the first dose? is No/Don't know then Got second dose?. If Got second dose? is Yes then 1 dose and if Got second dose? is No/Don't know then 2 doses. 
<H> connection <R> Error <T> Calculations <H> Calculations <R> Output <T> System <H> System <R> Sensor <T> connection || If Connection is Error then Calculations which if Calculations is Output then System and if System is Sensor then again connection.  
<H> Application <R> connected_with <T> Plan_&_design_worload_&_jobs_to_be_executed <H> Plan_&_design_worload_&_jobs_to_be_executed <R> connected_with <T> Prepare_Custom_Script/Clients <H> Prepare_Custom_Script/Clients <R> connected_with <T> Run_Tests_and_analyze <H> Run_Tests_and_analyze <R> connected_with <T> Error <H> Error <R> connected_with <T> Revising <H> Revising <R> connected_with <T> Run_Tests_and_analyze <H> Error <R> connected_with <T> Finalize_Configuration || Application is connected with Plan & design worload & jobs to be executed which is then connected with Prepare Custom Script/Clients which is further connected with Run Tests and analyze. Run Tests and analyze is connected with Eror which is then connected with both Revising and Finalize Configuration. Also, Revising is connected with Run Tests and analyze.  
<H> Frequency_Mixer <R> connected_with <T> Local_Oscillator <H> Frequency_Mixer <R> connected_with <T> Power <H> Power <R> connected_with <T> Bandpass_2MHz <H> Power <R> connected_with <T> Bandpass_Filter_0MHz <H> Power <R> connected_with <T> Bandpass_Filter <H> Bandpass_2MHz <R> connected_with <T> Frequency_Mixer <H> Frequency_Mixer <R> connected_with <T> Finish <H> Bandpass_Filter_0MHz <R> connected_with <T> Power_Splitter <H> Power_Splitter <R> connected_with <T> Frequency_Mixer <H> Power_Splitter <R> connected_with <T> Frequency <H> Bandpass_Filter <R> connected_with <T> Frequency <H> Frequency <R> connected_with <T> Finish || Frequency Mixer is connected with both Power and Local Oscillator. Power is then connected with Bandpass 2MHz, Bandpass Filter 0MHz, and Bandpass Filter. Bandpass 2MHz is connected with Frequency Mixer which is then connected with Finish. Bandpass Filter 0MHz is connected with Power Splitter. Bandpass Filter is connected with Frequency which is then connected with Finish. Power Splitter is then connected with both Frequency Mixer and Frequency.
<H> board <R> connected_with <T> Lighting <H> board <R> connected_with <T> Power <H> board <R> connected_with <T> General_power <H> Power <R> connected_with <T> Conveyer_1 <H> Conveyer_1 <R> connected_with <T> Processing <H> Processing <R> connected_with <T> Conveyer || board is connected with Lighting, Power, and General power. Power is then connected with Conveyer 1 which is further connected with Processing which is finally connected with Conveyer.
<H> Start <R> Brainstorm <T> Topic_assigned <H> Topic_assigned <R> Outline <T> Discuss <H> Discuss <R> Return <T> Topic_assigned <H> Discuss <R> Draft <T> Draft_review <H> Draft_review <R> changes <T> Discuss <H> Draft_review <R> Approved <T> Finish || If Start is Brainstorm then Topic assigned which if Topic assigned is Outline then Discuss. If Discuss is Return then Topic assigned and if Discuss is Draft then Draft review. If Draft review is changes then Discuss and if Draft review is Approved then Finish. 
<H> Start <R> connected_with <T> Get_N_from_user <H> Get_N_from_user <R> connected_with <T> Initialize <R> connected_with <T> I_is_greater_than_N <H> I_is_greater_than_N <R> Yes <T> Show_Sum_on_output <H> Show_Sum_on_output <R> connected_with <T> End <H> I_is_greater_than_N <R> No <T> Add_I_to_Sum <H> Add_I_to_Sum <R> connected_with <T> Update <H> Update <R> connected_with <T> I_is_greater_than_N || Start is connected with Get N from user which is then connected with Initialize which is further connected with I is greater than N. If I is greater than N is Yes then Show Sum on output which is then connected with End and if I is greater than N is No then Add I to Sum which is then connected with Update which is further connected with I is greater than N.  
<H> Begin <R> connected_with <T> Development_Plan <H> Development_Plan <R> connected_with <T> Form_a_team <H> Form_a_team <R> connected_with <T> Give_contract <H> Give_contract <R> connected_with <T> Planning <H> Planning <R> connected_with <T> Estimate_cost <H> Estimate_cost <R> connected_with <T> Tender_pass <H> Tender_pass <R> connected_with <T> Finalize <H> Finalize <R> connected_with <T> Finish || Begin is connected with Development Plan which is then connected with Form a Team which is further connected with Give contract. Give Contract is connected with Planning which is then connected with Estimate cost which is further connected with Tender pas. Tender pass is connected with Finalize which is finally connected with Finish.
<H> Information_input_transducer <R> connected_with <T> Source_encoder <H> Source_encoder <R> connected_with <T> Channel_encoder <H> Channel_encoder <R> connected_with <T> Digital <H> Digital <R> connected_with <T> Amplifier <H> Amplifier <R> connected_with <T> demodulator <H> demodulator <R> connected_with <T> Channel_decoder <H> Channel_decoder <R> connected_with <T> Source_decoder <H> Source_decoder <R> connected_with <T> Output_transducer ||Information input transducer is connected with Source encoder which is then connected with Channel encoder which is further connected with Digital. Digital is connected with Amplifier which is then connected with demodulator which is further connected with Channel decoder. Channel decoder is connected with Source decoder which is finally connected with Output transducer.
<H> Source <R> connected_with <T> Transmitter <H> Transmitter <R> connected_with <T> Transmission_channel <H> Amplifier <R> connected_with <T> Transmission_channel <H> Transmission_channel <R> connected_with <T> Receiver <H> Receiver <R> connected_with <T> Destination || Source is connected with Transmitter which is then connected with Transmission channel which is further connected with Receiver. Receiver is connected with Destination. Also, Amplifier is connected with Transmission channel.
<H> Create_Document <R> connected_with <T> Document <H> Document <R> connected_with <T> Manager_Approval <H> Manager_Approval <R> connected_with <T> Approval_Decision <H> Approval_Decision <R> Approve <T> Onboard <H> Approval_Decision <R> Reject <T> Create_Document || Create Document is connected with Document which is connected with Manager Approval. Manager Approval is connected with Approval Decision which if Approval Decision is Approve then Onboard and if Approval Decision is Reject then again Create Document. 
<H> Movie <R> connected_with <T> has_subtitles <H> has_subtitles <R> No <T> Ask_someone <H> has_subtitles <R> Yes <T> Type <H> Ask_someone <R> connected_with <T> Type <H> Type <R> Single <T> Summarize_based_on_selected_algorithm <H> Type <R> Combined <T> Create_new_algorithm <H> Summarize_based_on_selected_algorithm <R> connected_with <T> Generate_the_summarized_video <H> Create_new_algorithm <R> connected_with <T> Generate_the_summarized_video || Movie is connected with has subtitles which if has subtitles is No then Ask someone and if has subtitles is Yes then Type. If Type is Single then Summarize based on selected algorithm and if Type is Combined then Crate new algorithm. Also, Summarize based on selected algorithm and Crate new algorithm both are connected with Generate the summarized video.  
<H> Start <R> connected_with <T> Initialize <H> Initialize <R> connected_with <T> Decision <H> Decision <R> No <T> Update <H> Update <R> connected_with <T> Initialize <H> Decision <R> Yes <T> End || Start is connected with Initialize which is then connected with Decision. If Decision is No then Update which is further connected with Initialize and if Decision is Yes then End.
<H> Initial <R> connected_with <T> Fitness_Computation <H> Fitness_Computation <R> connected_with <T> Fitness <H> Fitness_Computation <R> connected_with <T> Converged? <H> Converged? <R> YES <T> STOP <H> Converged? <R> NO <T> Reproduction <H> Reproduction <R> connected_with <T> New_Generation <H> New_Generation <R> connected_with <T> Fitness_Computation || Initial is connected with Fitness Computation which is then connected with both Fitness and Converged?. If Converged? is YES then STOP and if Converged? is NO then Reproduction which is further connected with New Generation which is finally connected with Fitness Computation. 
<H> Start <R> connected_with <T> Fill_the_bath_with_water <H> Fill_the_bath_with_water <R> connected_with <T> Add_warm_water <H> Add_warm_water <R> connected_with <T> Get_into_bath <H> Get_into_bath <R> connected_with <T> Wash <H> Wash <R> connected_with <T> Come_Out <H> Come_Out <R> connected_with <T> Empty_the_bath_water <H> Empty_the_bath_water <R> connected_with <T> Get_dressed <H> Get_dressed <R> connected_with <T> End || Start is connected with Fill the bath with water which is then connected with Add warm water which is further connected with Get into bath. Get into bath is connected with Wash which is then connected with Come Out which is further connected with Empty the bath water. Empty the bath water is connected with Get dressed which is finally connected with End. 
<H> Start <R> connected_with <T> Are_you_happy? <H> Are_you_happy? <R> Yes <T> Make_others_happy <H> Make_others_happy <R> connected_with <T> Stop <H> Are_you_happy? <R> No <T> Want_to_be_happy? <H> Want_to_be_happy? <R> Yes <T> Ask_someone <H> Ask_someone <R> connected_with <T> Stop <H> Want_to_be_happy? <R> No <T> all_over <H> all_over <R> connected_with <T> Start || Start is connected with Are you happy? which if Are you happy? is Yes then Make others happy which is further connected with Stop and if Are you happy? is No then Want to be happy? and if Want to be happy? is Yes then Ask someone which is then connected with Stop and if Want to be happy? is No then all over which is finally connected with Start.
<H> Start <R> connected_with <T> ACCEPT_INPUT_FROM_USER <H> ACCEPT_INPUT_FROM_USER <R> connected_with <T> CONDITION_for(i=1;i<=a;i++) <H> CONDITION_for(i=1;i<=a;i++) <R> CONDITION_is_FALSE <T> PRINT_VALUE_OF_FACTORIAL <H> CONDITION_for(i=1;i<=a;i++) <R> CONDITION_is_TRUE <T> Process <H> Process <R> connected_with <T> CONDITION_for(i=1;i<=a;i++) <H> Process <R> connected_with <T> PRINT_VALUE_OF_FACTORIAL <H> PRINT_VALUE_OF_FACTORIAL <R> connected_with <T> STOP || START is connected with ACCEPT INPUT FROM USER which is then connected with CONDITION for(i=1;i<=a;i++) which if CONDITION for(i=1;i<=a;i++) is CONDITION is FALSE then PRINT VALUE OF FACTORIAL and if CONDITION for(i=1;i<=a;i++) is CONDITION is TRUE then Process. Process is then connected with both CONDITION for(i=1;i<=a;i++) and PRINT VALUE OF FACTORIAL which is finally connected with STOP.   
<H> Start <R> connected_with <T> Initialize <H> Initialize <R> connected_with <T> L=p.l <H> L=p.l <R> connected_with <T> Print <H> Print <R> connected_with <T> End || Start is connected with Initialize which is then connected with L=p.l which is further connected with Print which is finally connected with End.
<H> Start <R> connected_with <T> Are_you_happy? <H> Are_you_happy? <R> Yes <T> Very_good,_have_a_great_day! <H> Very_good,_have_a_great_day! <R> connected_with <T> Finish <H> Are_you_happy? <R> No <T> Want_to_be_happy? <H> Want_to_be_happy? <R> connected_with <T> Very_good,_Then_you_are_already_happy <H> Very_good,_Then_you_are_already_happy <R> connected_with <T> Finish <H> Want_to_be_happy? <R> No <T> Stay_fit <H> Stay_fit <R> connected_with <T> Start || Start is connected with Are you happy? which if Are you happy? is Yes then Very good, have a great day! which is further connected with Finish and if Are you happy? is No then Want to be happy? which is then connected with Very good, Then you are already happy which is further connected with Finish. Also, If Want to be happy? is No then Stay fit which is finally connected with Start.
<H> START <R> connected_with <T> Initialize <H> Initialize <R> connected_with <T> CHECK_CONDITION <H> CHECK_CONDITION <R> Condition_is_TRUE <T> Initialize <H> CHECK_CONDITION <R> Condition_is_FALSE <T> EXIT_LOOP <H> EXIT_LOOP <R> connected_with <T> STOP || START is connected with Initialize which is then connected with CHECK CONDITION. If CHECK CONDITION is Condition is TRUE then Initialize and if CHECK CONDITION is Condition is FALSE then EXIT LOOP which is finally connected with STOP. 
<H> Set_of_input_Images <R> connected_with <T> conversion <H> conversion <R> connected_with <T> DWT <H> DWT <R> connected_with <T> Feature_extraction <H> Feature_extraction <R> connected_with <T> Feature_matching_algorithm <H> images <R> connected_with <T> Feature_extraction <H> Feature_extraction <R> connected_with <T> Feature_matching_algorithm <H> Feature_matching_algorithm <R> connected_with <T> results || Set of input images is connected with conversion which is connected with DWT which is further connected with Feature extraction. Feature extraction is connected with Feature matching algorithm. images are connected with Feature extraction which is then connected with Feature matching algorithm which is finally connected with results. 
<H> Global <R> UART <T> Bluetooth <H> Bluetooth <R> I2C <T> Accelerometer <H> Bluetooth <R> I2C <T> Battery_Monitor <H> USB_Connector <R> 5V <T> Battery <H> Battery <R> connected_with <T> LiPo_Battery <H> LiPo_Battery <R> 3.7V <T> Battery_Monitor <H> LiPo_Battery <R> connected_with <T> Voltage_Regulator || If Global is UART then Bluetooth and if Bluetooth is I2C then Accelerometer and also Battery Monitor. If USB Connector is 5V then Battery which is then connected with LiPo Battery and if LiPo Battery is 3.7V then Battery Monitor. Also, LiPo Battery is further connected with Voltage Regulator.  
<H> modulation_mapping <R> connected_with <T> EE_operations <H> EE_operations <R> connected_with <T> pilot/DC/guard_band_insertion <H> pilot/DC/guard_band_insertion <R> connected_with <T> CP_insertion <H> CP_insertion <R> connected_with <T> iF <H> iF <R> connected_with <T> analog_gain_control <H> analog_gain_control <R> connected_with <T> front-end <H> front-end <R> connected_with <T> Channel <H> Channel <R> connected_with <T> front-end <H> front-end <R> connected_with <T> analog_gain_control <H> analog_gain_control <R> connected_with <T> correction <H> correction <R> connected_with <T> Synchronization+CFO_estimation <H> Synchronization+CFO_estimation <R> connected_with <T> correction <H> Synchronization+CFO_estimation <R> connected_with <T> removal <H> removal <R> connected_with <T> Add <H> Add <R> connected_with <T> EEE_operations <H> EEE_operations <R> connected_with <T> channel_estimation || modulation mapping is connected with EE operation which is then connected with pilot/DC/guard band insertion which is further connected with CP insertion. CP insertion is connected with iF which is then connected with analog gain control which is further connected with front-end. front-end is connected with Channel which is then connected front-end which is further connected with analog gain control. analog gain control is connected with correction which is then connected with Synchronization+CFO estimation which is again connected with correction. Also, Synchronization+CFO estimation is connected with removal which is then connected with Add which is further connected with EEE operations which is finally connected with channel estimation.
<H> Start <R> connected_with <T> A=1 <H> A=1 <R> connected_with <T> A<=10? <H> A<=10? <R> F <T> End <H> A<=10? <R> T <T> Print_A <H> Print_A <R> connected_with <T> A=A+1 <H> A=A+1 <R> connected_with <T> A<=10? <H> A=A+1 <R> connected_with <T> End || Start is connected with A=1 which is then connected with A<=10? which if A<=0? is F then End and if A<=10? is T then Print A which is further connected with A=A+1. A=A+1 is connected with A<=10? and End. 
<H> Begin <R> connected_with <T> Initial_Population <H> Initial_Population <R> connected_with <T> Fitness_Evaluation <H> Fitness_Evaluation <R> connected_with <T> Tournament_Selection <H> Tournament_Selection <R> connected_with <T> Team_Selection <H> Team_Selection <R> connected_with <T> Finalize_Team <H> Finalize_Team <R> connected_with <T> New_Generation <H> New_Generation <R> connected_with <T> condition_fulfil? <H> condition_fulfil? <R> YES <T> connector <H> condition_fulfil? <R> NO <T> Tournament_Selection || Begin is connected with Initial Population which is then connected with Fitness Evaluation which is further connected with Tournament Selection. Tournament Selection is connected with Team Selection which is then connected with Finalize Team which is further connected with New Generation. New Generation is connected with condition fulfil? which if condition fulfil? is YES then connector and if condition fulfil? is NO then again Tournament Selection.
<H> Initial_setting <R> Traffic_monitoring <T> Start_analysis_mode <H> Start_analysis_mode <R> connected_with <T> Condition? <H> Condition? <R> Yes <T> Drop_packet <H> Drop_packet <R> connected_with <T> Initial_setting <H> Condition? <R> connected_with <T> Normal_network_status <H> Normal_network_status <R> connected_with <T> Initial_setting || If Initial setting is Traffic monitoring then Start analysis mode which is further connected with Condition?. If Condition is Yes then Drop packet which is then connected with Initial setting. Also, Condition? is connected with Normal network status which is finally connected with Initial setting. 
<H> Source <R> connected_with <T> Electrical_Transmit <H> Electrical_Transmit <R> connected_with <T> Optical <H> Optical <R> connected_with <T> fibre_cable <H> fibre_cable <R> connected_with <T> Demodular <H> Demodular <R> connected_with <T> receiver <H> receiver <R> connected_with <T> Destination || Source is connected with Electrical Transmit which is then connected with Optical which is further connected with fibre cable. Fibre cable is connected with Demodular which is then connected with receiver which is finally connected with Destination.
<H> King? <R> Yes <T> Sven_is_not_currently_King <H> King? <R> No <T> Is_Sven_the_current_heir? <H> Is_Sven_the_current_heir? <R> Yes <T> Sven_is_not_currently_King <H> Is_Sven_the_current_heir? <R> No <T> Ask_Queen || If King? is Yes then Sven is not currently King and if King? is No then Is Sven the current heir?. If Is Sven the current heir? is Yes then Sven is not currently King and if Is Sven the current heir? is No then Ask Queen 
<H> Begin <R> connected_with <T> Make_coffee <H> Make_coffee <R> connected_with <T> Browse_the_web? <H> Browse_the_web? <R> Yes <T> Make_coffee <H> Browse_the_web? <R> No <T> Okay_then <H> Okay_then <R> connected_with <T> See_you_later <H> See_you_later <R> connected_with <T> Thing_done || Begin is connected with Make coffee which is then connected with Browse the web? which if Browse the web? is Yes then Make coffee and if Browse the web? is No then Okay then which is further connected with See you later which is finally connected with Thing done.
<H> Begin <R> connected_with <T> Generate_Initial_Population <H> Generate_Initial_Population <R> connected_with <T> Compute_the_fitness_of_each_individual <H> Compute_the_fitness_of_each_individual <R> connected_with <T> Check_all_person <H> Check_all_person <R> connected_with <T> Categorize_them <H> Categorize_them <R> connected_with <T> Converging? <H> Converging? <R> NO <T> Compute_the_fitness_of_each_individual <H> Converging? <R> YES <T> End || Begin is connected with Generate Initial Population which is then connected with Compute the fitness of each individual which is further connected with Check all person. Check all person is connected with Categorize them which is then connected with Converging?. If Converging is NO then Compute the fitness of each individual and if Converging is YES then End.
<H> Applications <R> connected_with <T> Check_manual <H> Check_manual <R> connected_with <T> LibVA_API <H> LibVA_API <R> connected_with <T> Processor <H> Processor <R> connected_with <T> driver <H> driver <R> connected_with <T> Firmwares <H> Firmwares <R> connected_with <T> Graphics_Card <H> driver <R> connected_with <T> Graphics_Card || Applications is connected with Check manual which is then connected with libVA API which is further connected with Processor. Processor is connected with driver which is then connected with Firmwares and Graphics Card. Also, Firmwares is connected with Graphics Card.
<H> Start <R> connected_with <T> Download_game <H> Download_game <R> connected_with <T> Update_Game <H> Update_Game <R> connected_with <T> Render_game_state_onto_window <H> Render_game_state_onto_window <R> connected_with <T> Process <H> Process <R> connected_with <T> Is_window_still_open? <H> Is_window_still_open? <R> Yes <T> Update_Game <H> Is_window_still_open? <R> No <T> Application_Shutdown || Start is connected with Download game which is then connected with Update Game. Update Game is connected with Render game state onto window which is then connected with Process which is further connected with Is window still open?. If Is window still open? is Yes then Update Game and if Is window still open? is No then Application Shutdown.
<H> Start <R> connected_with <T> Mobile_Switch_on <H> Mobile_Switch_on <R> connected_with <T> GPS_senses_motion <H> GPS_senses_motion <R> connected_with <T> GPS_and_phone <H> GPS_and_Phone <R> connected_with <T> Give_location <H> Give_location <R> connected_with <T> GPS_notifies_Police <H> GPS_notifies_Police <R> connected_with <T> Server_tracks_GPS <H> GPS_notifies_Police <R> connected_with <T> Cell_phone_tracks_GPS || Start is connected with Mobile Switch on which is then connected with GPS senses motion which is further connected with GPS and phone. GPS and phone is connected with Give location which is then connected with GPS notifies Police. Further, GPS notifies Police is connected with both Server tracks GPS and Cell phone tracks GPS.
<H> Transformer <R> connected_with <T> Rectifier <H> Rectifier <R> connected_with <T> Regulator <H> Regulator <R> connected_with <T> ARDUINO <H> Sensor <R> connected_with <T> ARDUINO <H> ARDUINO <R> connected_with <T> Crystal_glass <H> Crystal_glass <R> connected_with <T> LED_PANNEL || Transformer is connected with Rectifier which is then connected with Regulator which is further connected with ARDUINO. Sensor is connected with ARDUINO which is then connected with Crystal glass which is finally connected with LED PANNEL.
<H> Temperature <R> connected_with <T> Arduino <H> Arduino <R> connected_with <T> LCD <H> Arduino <R> connected_with <T> Home_Automation || Temperature is connected with Arduino which is then connected with both LCD and Home Automation.
<H> Money <R> Delivery_Dispatch <T> Depots <H> Depots <R> Indents <T> Money <H> Depots <R> connected_with <T> Distributors <H> Distributors <R> connected_with <T> Retailers <H> Retailers <R> connected_with <T> Consumers || If Money is Delivery Dispatch then Depots which if Depots is Indents then Money. Also, Depots is connected with Distributors which is then connected with Retailers which is finally connected with Consumers. 
<H> Start <R> connected_with <T> Initialize <H> Initialize <R> connected_with <T> Average=(num1+num2)/2 <H> Average=(num1+num2)/2 <R> connected_with <T> Print_Average <H> Print_Average <R> connected_with <T> End || Start is connected with Initialize which is then connected with Average=(num1+num2)/2 which is further connected with Print Average which is finally connected with End.
<H> Input_Devices <R> connected_with <T> Process <H> Process <R> connected_with <T> Output_Devices <H> Memory <R> connected_with <T> Process || Input Devices is connected with Process which is then connected with Output Devices and Memory is also connected with Process.
<H> Source <R> connected_with <T> Amplification <H> Amplifictaion <R> connected_with <T> Process <H> Process <R> connected_with <T> Demodulator <H> Demodulator <R> connected_with <T> Target || Source is connected with Amplification which is then connected with Process which is further connected with Demodulator which is finally connected with Target.
<H> Start <R> connected_with <T> Input_Salary <H> Input_Salary <R> connected_with <T> Find_Increase_in_salary <H> Find_Increase_in_salary <R> connected_with <T> Add_increase_to_salary <H> Add_increase_to_salary <R> connected_with <T> Print_result <H> Print_result <R> connected_with <T> End || Start is connected with Input Salary which is then connected with Find Increase in salary. Find Increase in salary is connected with Add increase to salary which is then connected with Print result which is finally connected with End.
<H> Design_a_Postcard <R> connected_with <T> Customer_like_it? <H> Customer_like_it? <R> connected_with <T> Yes <H> Customer_like_it? <R> connected_with <T> No || Design a Postcard which is then connected with Customer like it? which is then connected with Yes and No.
<H> Start <R> connected_with <T> Enter_measurements <H> Enter_measurements <R> connected_with <T> Input_Width <H> Input_Width <R> connected_with <T> Input_value_of_Long <H> Input_value_of_Long <R> connected_with <T> Input_Long <H> Input_Long <R> connected_with <T> Width*Long <H> Width*Long <R> connected_with <T> Area_of_a_rectangle <H> Area_of_a_rectangle <R> connected_with <T> End || Start is connected with Enter measurements which is then connected with Input Width which is further connected with Input value of Long. Input value of Long is connected with Input Long which is then connected with Width*Long. Width*Long is connected with Area of a Rectangle which is finally connected with End. 
<H> Dinosaur_dies <R> connected_with <T> Body_found? <H> Body_found? <R> NO <T> Dinosaur_is_eaten_or_rots_and_no_fossil_is_formed <H> Body_found? <R> YES <T> Scientist_do_some_experiments_on_it? <H> Scientist_do_some_experiments_on_it? <R> NO <T> Dinosaur_rots_and_no_fossil_is_formed <H> Scientist_do_some_experiments_on_it? <R> YES <T> Find_many_intersting_facts_about_Dianosaur || Dinosaur dies is connected with Body found? which if Body found? is Yes then Scientist do some experiments on it? and if Body found? is No then Dinosaur is eaten or rots and no fossil is formed. If Scientist do some experiments on it? is YES then Find many intersting facts about Dianosaur and if Scientist do some experiments on it? is NO then Dinosaur rots and no fossil is formed.
<H> Awkward? <R> connected_with <T> No <H> No <R> connected_with <T> Stay <H> Awkward? <R> connected_with <T> Yes <H> Yes <R> connected_with <T> Talk_with_others <H> Talk_with_others <R> connected_with <T> Yes <H> Talk_with_others <R> connected_with <T> No <H> Yes <R> connected_with <T> Stay <H> No <R> connected_with <T> Leave || Awkward? is connected with both No and Yes. If No then Stay and if Yes then Talk with others. Talk with others is connectedw ith both Yes and No. If Yes then Stay and if No then Leave.
<H> Begin <R> connected_with <T> Lapping <H> Lapping <R> connected_with <T> Die_sawing <H> Die_sawing <R> connected_with <T> Die_bounding <H> Die_bounding <R> connected_with <T> Wire <H> Wire <R> connected_with <T> Molding <H> Molding <R> connected_with <T> Marketing <H> Marketing <R> connected_with <T> Plating <H> Plating <R> connected_with <T> sampling <H> sampling <R> connected_with <T> Forming <H> Forming <R> connected_with <T> End || Begin is connected with Lapping which is then connected with Die sawing which is further connected with Die bonding. Die bonding is connected with Wire which is then connected with Molding which is further connected with Marketing. Marketing is connected with Plating which is then connected with sampling which is further connected with Forming which is finally connected with End. 
<H> Reviewer <R> connected_with <T> Taking_feedback_from_others <H> Taking_feedback_from_others <R> connected_with <T> Final_comments <H> Final_comments <R> connected_with <T> Document_selection <H> Document_selection <R> connected_with <T> Selection_rounds <H> Selection_rounds <R> connected_with <T> Introduction <H> Selection_rounds <R> connected_with <T> Coding_Test <H> Selection_rounds <R> connected_with <T> Tech_Interview <H> Selection_rounds <R> connected_with <T> HR_Interview || Reviewer is connected with Taking feedback from others which is then connected with Final comments which is further connected with Document selection. Document selection is connected with Selection rounds which is further connected with Introduction, Coding Test, Tech Interview, and HR Interview. 
<H> Start_/_reset <R> connected_with <T> Bootloader_button_pressed? <H> Bootloader_button_pressed? <R> Yes <T> Firmware_upgrade_mode <H> Bootloader_button_pressed? <R> No <T> Init_variables_and_constants <H> Init_variables_and_constants <R> connected_with <T> Configure_chip <H> Pin_config_data <R> connected_with <T> Configure_chip <H> Configure_chip <R> connected_with <T> Initialize <H> Initialize <R> connected_with <T> Process <H> Process <R> connected_with <T> New_message_from_host <H> New_message_from_host <R> No <T> Background_tasks <H> New_message_from_host <R> Yes <T> Process_request_message <H> Process_request_message <R> connected_with <T> Send_response_message_to_host <H> Send_response_message_to_host <R> connected_with <T> Background_tasks <H> Background_tasks <R> connected_with <T> Process || Start / reset is connected with Bootloader button pressed? which if Bootloader button pressed? is Yes then Firmware upgrade mode and if Bootloader button pressed? is No then Init variables and constants which is further connected with Configure chip. Also, Pin config data is connected with Configure chip which is then connected with Initialize. Initialize is connected with Process which is then connected with New message from host? which if New message from host? is No then Background tasks and if New message from host? is Yes then Process request message. Process request message is connected with Send response message to host which is further connected with Background tasks which is finally connected with Process.      
<H> Start <R> connected_with <T> Find_changes_in_work <H> Find_changes_in_work <R> connected_with <T> Approval <H> Approval <R> No <T> Ignore_change <H> Approval <R> Yes <T> Method <H> Method <R> connected_with <T> Agree? <H> Agree? <R> Yes <T> Expand <H> Agree? <R> No <T> Discard <H> Expand <R> connected_with <T> END <H> Discard <R> connected_with <T> END <H> Ignore_change <R> connected_with <T> END || Start is connected with Find changes in work which is then connected with Approval. If Approval is No then Ignore change and if Approval is Yes then Method which is then connected with Agree?. If Agree? is Yes then Expand and if Agree? is No then Discard. Expand, Discard, and Ignore change all are connected with END.
<H> Vibration_signal <R> connected_with <T> Separating_noise_from_the_signal <H> Separating_noise_from_the_signal <R> connected_with <T> Processing_on_signal <H> Processing_on_signal <R> connected_with <T> Calculation_of_every_value_to_find_amplification <H> Calculation_of_every_value_to_find_amplification <R> connected_with <T> End_the_process || Vibration signal is connected with Separate noise from the signal which is then connected with Processing on signal which is further connected with Calculation of every value to find amplification which is finally connected with End the process.
<H> Signal <R> connected_with <T> Real-time_algorithm <H> Real-time_algorithm <R> connected_with <T> Amplification <H> Amplification <R> connected_with <T> Hybrid_Thresholding_Criterion <H> Hybrid_Thresholding_Criterion <R> connected_with <T> Noise_Removal <H> Noise_Removal <R> connected_with <T> Denoise_Signal || Signal is connected with Real-time algorithm which is then connected with Amplification which is further connected with Hybrid Thresholding Criterion. Hybrid Thresholding Criterion is connected with Noise Removal which is further connected with Denoise Signal.
<H> Would_you_do_anything_for_love? <R> Yes <T> Even_that? <H> Would_you_do_anything_for_love? <R> No <T> In_Love <H> Even_that? <R> connected_with <T> Depends <H> Even_that? <R> connected_with <T> Yes,_even_that <H> Depends <H> Even_that? <R> connected_with <T> Not_in_love <H> Yes,_even_that <R> connected_with <T> In_Love || If Would you do anything for love is Yes then Even that? and if Would you do anything for love is No then In Love. Even that? is connected with both Depends and Yes, even that. Depends is further connected with Not in love and Yes, even that is connected with In Love.
<H> Input_3D_Coordinates_of_atomic_nuclei <R> connected_with <T> Different_parts_of_nuclei <H> Input_3D_Coordinates_of_atomic_nuclei <R> connected_with <T> Formation <H> Different_parts_of_nuclei <R> connected_with <T> Formation <H> Formation <R> connected_with <T> Diagonaization <H> Diagonaization <R> connected_with <T> Converged? <H> Converged? <R> Yes <T> Calculate_Properties_End <H> Converged? <R> No <T> Formation || Input 3D Coordinates of atomic nuclei is connected with both Different parts of nuclei and Formation. Different parts of nuclei is connected with Formation which is then connected with Diagonalization which is further connected with Converged?. If Converged? is Yes then Calculate Properties End and if Converged? is No then Formation. 
<H> Is_it_food? <R> No <T> Try_to_eat_it_immediately. <H> Is_it_food? <R> Yes <T> First_heat_it || If Is it food? is No then Try to eat it immediately and if Is it food? is Yes then First heat it. 
<H> CMTS_receives_an_IP_or_ARP_frame_on_an_upstream_interface <R> connected_with <T> Attach_all_the_wires_from_the_circuit_and_fix_all_the_components <R> connected_with <T> Is_cable-source_verify_activated <H> Is_cable-source_verify_activated <R> No <T> Let_the_packet_through_for_further_processing <H> Is_cable-source_verify_activated <R> connected_with <T> Is_there_an_entry_in_the_CPE_database <H> Is_there_an_entry_in_the_CPE_database <R> Yes <T> 2 <H> Is_there_an_entry_in_the_CPE_database <R> No <T> 3 || CMTS receives an IP or ARP frame on an upstream interface is connected with Attach all the wires from the circuit and fix all the component which is then connected with Is cable-source verify activated. If Is cable-source verify activated is No then Let the packet through for further processing. Also, Is cable-source verify activated is connected with Is there an entry in the CPE database which if Is there an entry in the CPE database is Yes then 2 and if Is there an entry in the CPE database is No then 3. 
<H> Start <R> connected_with <T> Enter_Website <H> Enter_Website <R> connected_with <T> Homepage <H> Homepage <R> connected_with <T> Enter_Details <H> Enter_Details <R> connected_with <T> Correct? <H> Correct? <R> No <T> Enter_Again <H> Enter_Again <R> connected_with <T> Enter_Details <H> Correct? <R> Yes <T> Enter <H> Enter <R> connected_with <T> Stop || Start is connected with Enter Website which is then connected with Homepage which is further connected with Enter Details. Enter Details is connected with Correct? which if Correct? is No then Enter Again which is further connected with Enter Details and if Correct? is Yes then Enter which is then connected with Stop.
<H> Enter_Details <R> connected_with <T> Confirmation <H> Confirmation <R> connected_with <T> Attempts? <H> Attempts? <R> Yes <T> Display <H> Attempts? <R> No <T> Confirmation || Enter Details is connected with Confirmation which is then connected with Attempts? which if Attempts? is Yes then Display and if Attempts? is No then Confirmation.
<H> Start <R> connected_with <T> Login_Page <H> Login_Page <R> Yes <T> Check <H> Login_Page <R> No <T> Reconfirm <H> Reconfirm <R> connected_with <T> Login_Page <H> Check <R> connected_with <T> NewsFeed <H> NewsFeed <R> connected_with <T> Like <H> Like <R> connected_with <T> End || Start is connected with Login Page which if Login Page is No then Reconfirm and if Login Page is Yes then Check which is then connected with NewsFeed. Also, Reconfirm is connected with Login Page. NewsFeed is connected with Like which is further connected with End.
<H> connector <R> connected_with <T> Check_Time <H> Check_Time <R> connected_with <T> Before_4_pm? <H> Before_4_pm? <R> Yes <T> Home <H> Before_4_pm? <R> No <T> Office <H> Office <R> connected_with <T> Check <H> Check <R> connected_with <T> Before_7_pm? <H> Before_7_pm? <R> No <T> Office <H> Before_7_pm? <R> Yes <T> School <H> School <R> connected_with <T> End || Connector is connected with Check Time which is then connected with Before 4 pm? which if Before 4 pm? is Yes then Home and if Before 4 pm? is No then Office. Office is then connected with Check which is further connected with Before 7 pm?. If Before 7pm? is No then again Office and if Before 7pm? is Yes then School which is finally connected with End.  
<H> Office <R> connected_with <T> Home || Office is connected with home.
<H> Start <R> connected_with <T> Collide <H> Collide <R> connected_with <T> Wake_up <H> Wake_up <R> connected_with <T> Run <H> Run <R> connected_with <T> End || Strat is connected with Collide which is then connected with Wake up which is further connected with Run which is finally connected with End.
<H> Start <R> connected_with <T> Add <H> Add <R> connected_with <T> Sub <H> Sub <R> connected_with <T> Update <H> Sub <R> connected_with <T> Print <H> Update <R> connected_with <T> Stop <H> Print <R> connected_with <T> Stop || Start is connected with Add which is then connected with Sub. Sub is then connected with both Update and Print. Also, both Update and Print are connected with Stop.
<H> Converter <R> connected_with <T> Boost_Converter <H> Monitor <R> connected_with <T> Boost_Converter || Converter is connected with Boost Converter and also Monitor is connected with Boost Converter.
<H> Worker <R> connected_with <T> Disease <H> Disease <R> connected_with <T> Consult <H> Consult <R> connected_with <T> Explain_everything <H> Explain_everything <R> connected_with <T> Surgery <H> Surgery <R> connected_with <T> End || Worker is connected with Disease which is then connected with Consult. Consult is then connected with Explain everything which is then connected with Surgery which is finally connected with End.
<H> Assessment <R> connected_with <T> Team_work <H> Team_work <R> connected_with <T> Work <H> Work <R> connected_with <T> Gather <H> Gather <R> connected_with <T> Complete <H> Complete <R> connected_with <T> Closure <H> Closure <R> connected_with <T> Primary_closure <H> Closure <R> connected_with <T> Bandaging <H> Bandaging <R> connected_with <T> Delayed_primary_closure <H> Bandaging <R> connected_with <T> Secondary_closure || Assessment is connected with Team work which is then connected with Work which is further connected with Gather. Gather is connected with Complete which is then connected with Closure. Closure is connected with both Primary closure and Bandaging. Bandaging is then connected with both Delayed primary closure and Secondary closure.
<H> Intro <R> connected_with <T> Display_message <H> Dispaly_message <R> connected_with <T> Return || Intro is connected with Display message which is then connected with Return.
<H> Bootstrap <R> connected_with <T> Installation <H> Installation <R> connected_with <T> Copy <H> Copy <R> connected_with <T> Unpack <H> Unpack <R> connected_with <T> Register <H> Register <R> connected_with <T> Config <H> Config <R> connected_with <T> Zip <H> Config <R> connected_with <T> Image <H> Config <R> connected_with <T> ISO || bootstrap is connected with Installation which is then connected with Copy which is further connected with Unpack. Unpack is connected with Register which is then connected with Config. Config is further connected with Zip, Image and ISO. 
<H> TV_not_working <R> connected_with <T> Switch_On? <H> Switch_On? <R> No <T> Switch_on <H> Switch_On? <R> Yes <T> Power_supply? <H> Power_supply? <R> No <T> Wait_for_power <H> Power_supply? <R> Yes <T> Finish || TV not working is connected with Switch On? which if Switch On? is No then Switch on and if Switch On? is yes then Power supply?. If Power supply? is No then Wait for power and if Power supply? is Yes then Finish.
<H> Program <R> connected_with <T> Logical_Plan <H> Logical_Plan <R> connected_with <T> Physical_Plan <H> Physical_Plan <R> connected_with <T> Map-Reduce <H> Map-Reduce <R> connected_with <T> Execution || Program is connected with Logical Plan which is then connected with Physical Plan which is further connected with Map-Reduce Plan which is finally connected with Execution.
<H> Input <R> connected_with <T> Request <H> Request <R> connected_with <T> Session <H> Session <R> connected_with <T> Control <H> Control <R> connected_with <T> Process <H> Process <R> connected_with <T> LEVEL_POSITIONING <H> LEVEL_POSITIONING <R> connected_with <T> OUTPUT_DISPLAY <H> Access <R> connected_with <T> OUTPUT_DISPLAY || Input is connected with Request which is then connected with Session which is further connected with Control. Control is connected with Process which is then connected with LEVEL POSITIONING which is further connected with OUTPUT DISPLAY. Also, Access is connected with OUTPUT DISPLAY. 
<H> Input <R> connected_with <T> Signal_Conditioning <H> Signal_Conditioning <R> connected_with <T> CPU <H> CPU <R> connected_with <T> Power_Electronics <H> Power_Supply <R> connected_with <T> Input <H> Power_Supply <R> connected_with <T> Signal_Conditioning <H> Power_Supply <R> connected_with <T> CPU <H> Actuator_Power_Supply <R> connected_with <T> Power_Electronics || Input is connected with Signal Conditioning which is then connected with CPU whcih is further connected with Power Electronics. Actuator Power Supply is also connected with Power Electronics. Power Supply is then connected with Input, Signal Conditioning, and CPU. 
<H> Sensor <R> connected_with <T> Arduino <H> Arduino <R> connected_with <T> Home_automation || Sensor is connected with Arduino which is then connected with Home automation.
<H> Signal <R> connected_with <T> Mapping <H> Mapping <R> connected_with <T> Amplification <H> Amplification <R> connected_with <T> Induction || Signal is connected with Mapping which is then connected with Amplification which is finally connected with Induction.
<H> Start <R> connected_with <T> Get_ready_for_bath <H> Get_ready_for_bath <R> connected_with <T> Remove_clothes <H> Remove_clothes <R> connected_with <T> Get_into_bath <H> Get_into_bath <R> connected_with <T> Wash <H> Wash <R> connected_with <T> Get_out_of_bath <H> Get_out_of_bath <R> connected_with <T> Switch_off_the_light <H> Switch_off_the_light <R> connected_with <T> Get_dressed || Start is connected with Get ready for bath which is then connected with Remove clothes which is further connected with Get into bath. Get into bath is connected with Wash which is then connected with Get out of bath. Get out of bath is connected with Switch off the light which is finally connected with Get dressed.
<H> Start <R> connected_with <T> Go_to_kitchen <H> Go_to_kitchen <R> connected_with <T> Find_food <H> Find_food <R> connected_with <T> Microwave_it <H> Microwave_it <R> connected_with <T> Switch_off_light <H> Switch_off_light <R> connected_with <T> Get_out_of_kitchen <H> Get_out_of_kitchen <R> connected_with <T> Enoy_dinner || Start is connected with Go to kitchen which is then connected with Find food which is further connected with Microwave it. Microwave is connected with Switch off light which is then connected with Get out of kitchen which is finally connected with Enjoy dinner.
<H> Dead_body <R> connected_with <T> EMG_Electrode <H> EMG_Electrode <R> connected_with <T> Amplifier <H> Amplifier <R> connected_with <T> EMG_Recorder <H> Amplifier <R> connected_with <T> AF_Amplifier <H> Amplifier <R> connected_with <T> Oscilloscope || Dead body is connected with EMG Electrode which is then connected with Amplifier which is then connected with EMG Recorder. Also, Amplifier is connected with both Oscilloscope and AF Amplifier.
<H> REST_API <R> connected_with <T> pre_process <H> pre_process <R> connected_with <T> document-filter-topic <H> document-filter-topic <R> connected_with <T> document-converter <H> document-converter <R> connected_with <T> document-converter-topic <H> document-converter-topic <R> connected_with <T> Topic <H> Topic <R> connected_with <T> publisher-topic <H> Topic <R> connected_with <T> workflow || REST API is connected with pre process which is then connected with document-filter-topic which is further connected with document-converter. document-converter is connected with document-converter-topic which is further connected with Topic. Topic is then connected with both publisher-topic and workflow.
<H> Topic <R> connected_with <T> Power_signal <H> Power_signal <R> Stream <T> Processor <H> Processor <R> Stream <T> Output <H> Output <R> connected_with <T> End || Topic is connected with Power signal which if Power signal is Stream then Processor and if Processor is also Stream then Output which is finally connected with End.
<H> Kitchen <R> connected_with <T> Open_fridge <H> Open_fridge <R> connected_with <T> Cook_yourself <H> Cook_yourself <R> connected_with <T> Enjoy <H> Enjoy <R> connected_with <T> Kitchen || Kitchen is connectedw ith Open fridge which is then connected with Cook yourself which is then connected with Enjoy which is finally connected with Kitchen.
<H> START <R> connected_with <T> Initialize <H> Initialize <R> connected_with <T> SUM=A+B <H> SUM=A+B <R> connected_with <T> PRINT_VALUE_OF_SUM <H> PRINT_VALUE_OF_SUM <R> connected_with <T> STOP || START is connected with Initialize which is then connected with SUM=A+B. SUM=A+B is connected with PRINT VALUE OF SUM which is finally connected with STOP.
<H> Inputs <R> connected_with <T> Arduino_Uno <H> Arduino_Uno <R> connected_with <T> IOT <H> Arduino_Uno <R> connected_with <T> LCD <H> Arduino_Uno <R> connected_with <T> Process <H> Process <R> connected_with <T> Motor <H> Process <R> connected_with <T> Pump || Inputs are connected with Arduino Uno which is then connected with IOT, LCD, and also Process. Process is then connected with both Motor and Pump.
<H> Goals <R> connected_with <T> Winning <H> Planning <R> connected_with <T> Winning <H> Trust <R> connected_with <T> Winning <H> Action <R> connected_with <T> Winning <H> Result <R> connected_with <T> Winning || Goals, Planning, Trust, Action, Result all are connected with Winning.
<H> Input <R> connected_with <T> Filtering <H> Filtering <R> connected_with <T> Connect_ribs <H> Connect_ribs <R> connected_with <T> Skeleton <H> Skeleton <R> connected_with <T> Segmentation_Using_Level_set || Input is connected with Filtering which is then connected with Connect ribs which is further connected with Skeleton which is finally connected with Segmentation Using Level set.
<H> START <R> connected_with <T> Input <H> Input <R> connected_with <T> PROCESS <H> PROCESS <R> connected_with <T> Display <H> Display <R> connected_with <T> END || START is connected with Input which is then connected with PROCESS which is further connected with Display which is finally connected with END.
<H> Take_all_the_inputs <R> connected_with <T> Assign_each_variable <H> Assign_each_variable <R> connected_with <T> Calculate_loss <H> Calculate_loss <R> connected_with <T> Reduce_loss <H> Reduce_loss <R> connected_with <T> Search_vector <H> Search_vector <R> connected_with <T> Update_values <H> Update_values <R> connected_with <T> Converge? <R> No <T> Calculate_loss <T> Converge? <R> Yes <T> Exit || Take all the inputs which is then connected with Assign each variable which is then connected with Calculate loss which is further connected with Reduce loss. Reduce loss is connected with Search vector which is then connected with Update values. Update values is then connected with Converge? which if Converge? is No then Calculate loss and if Converge? is Yes then Exit.
<H> Tuner <R> connected_with <T> Mixer <H> Noise <R> connected_with <T> Mixer <H> Mixer <R> connected_with <T> IF_Amplifier <H> IF_Amplifier <R> connected_with <T> Detector <H> Detector <R> connected_with <T> AF_Amplifier || Tuner is connected with Mixer. Also, Noise is connected with Mixer which is then connected with IF Amplifier which is further connected with Detector which is finally connected with AF Amplifier.
<H> Start <R> connected_with <T> Read <H> Read <R> connected_with <T> Update_value <H> Update_value <R> connected_with <T> Print <H> Print <R> connected_with <T> X>0 <H> X>0 <R> Yes <T> Update_value <H> X>0 <R> No <T> End || Start is connected with Read which is then connected with Update value which is further connected with Print. Print is connected with X>0 which if X>0 is YES then Update value and if X>0 is NO then End.
<H> Application <R> connected_with <T> Login <H> Login <R> connected_with <T> Apply <H> Apply <R> connected_with <T> Shortlist_resumes <H> Shortlist_resumes <R> connected_with <T> E-mail_resumes_to_departments <H> E-mail_resumes_to_departments <R> connected_with <T> Resumes_approved? <H> Resumes_approved? <R> No <T> Screen_more_resumes <H> Screen_more_resumes <R> connected_with <T> E-mail_resumes_to_departments <H> Resumes_approved? <R> Yes <T> Call_for_interview <H> Call_for_interview <R> connected_with <T> End_hiring_Stage_1 || Application is connected with Login which is then connected with Apply which is further connected with Shortlist resumes. Shortlist resumes is connected with E-mail resumes to departments which is then connected with Resumes approved? which if Resumes approved? is No then Screen more resumes which is further connected with E-mail resumes to departments and if Resumes approved? is Yes then Call for Interview which is finally connected with End hiring Stage 1.
<H> Lamp_doesn't_work <R> connected_with <T> Want_more_lamp? <H> Want_more_lamp? <R> No <T> Plug_in_lamp <H> Want_more_lamp? <R> Yes <T> Bulb_burned_out? <H> Bulb_burned_out? <R> Yes <T> Replace_bulb <H> Bulb_burned_out? <R> No <T> Repair_lamp || Lamp doesn't work is connected with Want more Lamp? which if Want more Lamp? is No then Plug in lamp and if Want more Lamp? is Yes then Bulb burned out?. If Bulb burned out? is Yes then Replace bulb and if Bulb burned out? is No then Repair lamp.  
<H> Draw_shapes_easily <R> connected_with <T> Your_chart_adjusts_automatically <H> Your_chart_adjusts_automatically <R> connected_with <T> Present_it || Draw shapes easily is connected with Your chart adjusts automatically which is then connected with Present it.
<H> idea <R> connected_with <T> Program <H> Program <R> connected_with <T> Python <H> Program <R> connected_with <T> C++ || Idea is connected with Program which is then connected with Python and C++.
<H> Start <R> connected_with <T> Payment_gateway <H> Payment_gateway <R> connected_with <T> Enter_your_amount_and_mode <H> Enter_your_amount_and_mode <R> connected_with <T> Enter_code <H> Enter_code <R> connected_with <T> Select_gateway <H> Select_gateway <R> connected_with <T> Converging? <H> Converging? <R> NO <T> Enter_your_amount_and_mode <H> Converging? <R> YES <T> End || Start is connected with Payment gateway which is then connected with Enter your amount and mode which is further connected with Enter code. Enter code is connected with Select gateway which is then connected with Converging? which if Converging? is No then Enter your amount and mode and if Converging? is YES then End.
<H> Start <R> connected_with <T> Are_you_happy? <H> Are_you_happy? <R> Yes <T> Nice <H> Nice <R> connected_with <T> End <H> Are_you_happy? <R> No <T> Want_to_be_happy? <H> Want_to_be_happy? <R> connected_with <T> Laugh <H> Laugh <R> connected_with <T> End <H> Want_to_be_happy? <R> No <T> All_over_again <H> All_over_again <R> connected_with <T> Start || Start is connected with Are you happy? which if Are you happy? is Yes then Nice which is then connected with End and if Are you happy? is No then Want to be happy? which is then connected with Laugh and finally connected with End. Also, if Want to be happy? is No then All over again which is then connected with Start.
<H> Start <R> connected_with <T> Are_you_happy? <H> Are_you_happy? <R> connected_with <T> Good <H> Are_you_happy? <R> connected_with <T> Want_to_be_happy? || Start is connected with Are you happy? which is then connected with both Good and Want to be happy?
<H> Dyed_and_Finished_Fabric_in_Roll <R> connected_with <T> Fabric_Inspection <H> Fabric_Inspection <R> connected_with <T> Authentication <H> Authentication <R> connected_with <T> Different_Tests_of_Fabric <H> Different_Tests_of_Fabric <R> connected_with <T> Test_Cutting <H> Test_Cutting <R> connected_with <T> Confirmation <H> Confirmation <R> connected_with <T> Input_to_cutting_Section || Dyed and Finished Fabric in Roll is connected with Fabric Inspection which is then connected with Authentication. Authentication is connected with Different Tests of Fabric which is then connected with Test Cutting which is further connected with Confirmation which is finally connected with Input to Cutting Section. 
<H> Start <R> connected_with <T> Take_Inputs <H> Take_Inputs <R> connected_with <T> Perimeter=2*(length+width) <H> Perimeter=2*(length+width) <R> connected_with <T> Print_the_perimeter <H> Print_the_perimeter <R> connected_with <T> END || START is connected with Take Inputs which is then connected with Perimeter=2*(length+width) which is further connected with Print the perimeter which is finally connected with END.
<H> Start <R> connected_with <T> Input <H> Input <R> connected_with <T> C=5/9(F-32) <H> C=5/9(F-32) <R> connected_with <T> Dispaly <H> Display <R> connected_with <T> End || Start is connected with Input which is then connected with C=5/9*(F-32) which is further connected with Display which is finally connected with End.
<H> Work_flow <R> connected_with <T> model_estimator <H> model_estimator <R> connected_with <T> model_merger <H> model_merger <R> connected_with <T> region_classifier <H> region_classifier <R> connected_with <T> region_splitter <H> region_splitter <R> connected_with <T> Extract <H> Extract <R> connected_with <T> region_generator <H> region_generator <R> connected_with <T> model_estimator || Work flow is connected with model estimator which is then connected with model merger which is further connected with region classifier. Region classifier is connected with region splitter which is then connected with Extract which is further connected with region generator which is finally connected with model estimator.
<H> Start <R> connected_with <T> Input_variables <H> Input_variables <R> connected_with <T> C=(F-32)*519 <H> C=(F-32)*519 <R> connected_with <T> Dispaly_all_variables <H> Display_all_variables <R> connected_with <T> STOP || START is connected with Input variables which is then connected with C=(F-32)*519 which is further connected with Display all variables which is finally connected with STOP. 
<H> Start <R> connected_with <T> Count=0 <H> Count=0 <R> connected_with <T> Operation <H> Operation <R> connected_with <T> count=count+1 <H> count=count+1 <R> connected_with <T> Is_count<10 <H> Is_count<10 <R> YES <T> Operation <H> Is_count<10 <R> NO <T> Stop || Start is connected with count=0 which is then connected with Operation which is further connected with count=count+1. count=count+1 is connected with Is count<10 which if Is count<10 is YES then Operation and if Is count<10 is NO then Stop. 
<H> Input <R> connected_with <T> Vibration_signal <H> Vibration_signal <R> connected_with <T> OCR <H> OCR <R> connected_with <T> MBS <H> MBS <R> connected_with <T> Fault_Features <H> Faults <R> connected_with <T> Bayesian_diagnostic_network <H> Fault_Features <R> connected_with <T> Bayesian_diagnostic_network <H> Fault_causes <R> connected_with <T> Bayesian_diagnostic_network <H> Bayesian_diagnostic_network <R> connected_with <T> Diagnostic_results || Input is connected with Vibration signal which is then connected with OCR which is further connected with MBS. MBS is connected with Fault Features. Faults, Fault Features and Fault causes all are connected with Bayesian diagnostic network which is finally connected with Diagnostic results.
<H> PV_array <R> connected_with <T> Power <H> Power <R> connected_with <T> Distribution_pannel <H> Distribution_pannel <R> connected_with <T> AC_loads <H> Distribution_pannel <R> connected_with <T> Electricity_utility || PV array is connected with Power which is then connected with Distribution pannel. Distribution pannel is then connected with both AC loads and Electricity utility.
<H> Power <R> connected_with <T> TV <H> Remote <R> connected_with <T> TV <H> TV <R> connected_with <T> Output_Devices || Power is connected with TV which is then connected with Output Devices. Also, Remote is connected with TV.
<H> START <R> connected_with <T> FLOWCHART <H> FLOWCHART <R> YES <T> FLOWCHART || START is connected with FLOWCHART which if FLOWCHART is YES then again FLOWCHART.
<H> Traffic_rules <R> connected_with <T> Check_colour_of_light <H> Check_colour_of_light <R> connected_with <T> Light_green <H> Check_colour_of_light <R> connected_with <T> Light_orange <H> Check_colour_of_light <R> connected_with <T> Light_red <H> Light_green <R> connected_with <T> Go <H> Light_orange <R> connected_with <T> Don't_speed <H> Light_red <R> connected_with <T> Stop <H> Don't_speed <R> connected_with <T> Go <H> Don't_speed <R> connected_with <T> Stop || Traffic rules is connected with Check colour of light which is then connected with Light green, Light orange, and Light red. Light green is then connected with Go. Light orange is connected with Don't speed and Light red is connected with Stop. Don't speed is then connected with Go and Stop. 
<H> Start <R> connected_with <T> Read_Temperature <H> Read_Temperature <R> connected_with <T> Temperature<32? <H> Temperature<32? <R> YES <T> Not_so_cold <H> Temperature<32? <R> NO <T> Cold <H> Not_so_cold <R> connected_with <T> End <H> Cold <R> connected_with <T> End || Start is connected with Read Temperature which is then connected with Temperature<32? which if Temperature<32? is YES then Not so cold and if Temperature<32? is NO then Cold. Also, Not so cold and Cold both are connected with End.
<H> Food_poision <R> connected_with <T> Damaged_bone_marrow <H> virus <R> connected_with <T> Damaged_bone_marrow <H> Toxic_item <R> connected_with <T> Damaged_bone_marrow <H> Damaged_bone_marrow <R> connected_with <T> Inability_to_digest_food <H> Inability_to_digest_food <R> connected_with <T> Anemia,_neutropenia,_and_thrombocytoperia <H> Anemia,_neutropenia,_and_thrombocytoperia <R> connected_with <T> Infection,_bleeding <H> Infection,_bleeding <R> connected_with <T> high_risk || Food poision, virus, and Toxic item all are connected with Damaged bone marrow which is then connected with Inability to digest food. Inability to digest food is connected with Anemia, neutropenia, and thrombocytopenia which is then connected with Infection, bleeding which is finally connected with high risk.
<H> Paper_review <R> connected_with <T> Correction <H> Correction <R> Implement <T> Was_the_article_important? <H> Was_the_article_important? <R> Yes <T> Was_the_changes_worth_it? <H> Was_the_changes_worth_it? <R> Disagree <T> Seek_the_changes <H> Seek_the_changes <R> Wait <T> Correction <H> Was_the_article_important? <R> No <T> New_changes <H> Was_the_changes_worth_it? <R> Agree <T> New_changes || Paper review is connected with Correction which if Correction is Implement then Was the article important?. IF Was the article important? is Yes then Was the changes worth it? and if Was the article important? is No then New changes. If Was the changes worth it? is Disagree then Seek the changes and if Seek the changes is Wait then Correction. If Was the changes worth it? is Agree then New changes. 
<H> Raw_materials <R> connected_with <T> Addition_of_water_containing_yeast <H> Addition_of_water_containing_yeast <R> connected_with <T> Kneading <H> Kneading <R> connected_with <T> Proofing <H> Proofing <R> connected_with <T> Read_again <H> Read_again <R> connected_with <T> Proofing_(30_min) <H> Proofing_(30_min) <R> connected_with <T> Filling_in_greased_pan <H> Filling_in_greased_pan <R> connected_with <T> Proofing_(35_min) || Raw materials is connected with Addition of water containing yeast which is then connected with Kneading which is further connected with Proofing. Proofing is connected with Read again which is then connected with Proofing (30 min) which is further connected with Filling in greased pan which is finally connected with Proofing (35 min.).
<H> Start <R> connected_with <T> Input <H> Input <R> connected_with <T> C<=0? <H> C<=0? <R> F <T> End <H> C<=0? <R> T <T> Output <H> Output <R> connected_with <T> C=C+1 <H> C=C+1 <R> connected_with <T> C<=10? <H> C=C+1 <R> connected_with <T> End || Start is connected with Input which is then connected with C<10? which if C<=10? is F then End and if C<0? is T then Output. Output is then connected with C=C+1 which is then connected with both C<=10? and End.
<H> Logo <R> connected_with <T> Hardcopy <H> Logo <R> connected_with <T> Softcopy <H> Hardcopy <R> connected_with <T> Quality <H> Hardcopy <R> connected_with <T> paper_material <H> Softcopy <R> connected_with <T> Copyright <H> Softcopy <R> connected_with <T> Privacy || Logo is connected with both Hardcopy and Softcopy. Hardcopy is connected with Quality and paper material. Softcopy is connected with Copyright and privacy.
<H> Start <R> connected_with <T> Inputs <H> Inputs <R> connected_with <T> Find_Area <H> Find_Area <R> connected_with <T> Display <H> Display <R> connected_with <T> Stop || Start is connected with Inputs which is then connected with Find Area which is further connected with Display which is finally connected with Stop.
<H> Data_process <R> connected_with <T> Degree_calculation <H> Degree_calculation <R> connected_with <T> Area_calculation <H> Area_calculation <R> connected_with <T> Similarity_calculation <H> Similarity_calculation <R> connected_with <T> Core_calculation <H> Core_calculation <R> connected_with <T> Dimension_expansion <H> Dimension_expansion <R> connected_with <T> Finish || Data process is connected with Degree calculation which is then connected with Area calculation which is further connected with Similarity calculation. Similarity calculation is connected with Core calculation which is connected with Dimension expansion which is finally connected with Finish.
<H> Planning <R> connected_with <T> In_progress <H> In_progress <R> connected_with <T> review <H> review <R> connected_with <T> Done || Planning is connected with In progress which is then connected with review which is finally connected with Done.
<H> Design_a_novel <R> connected_with <T> Is_the_design_based_on_a_template <H> Is_the_design_based_on_a_template <R> connected_with <T> Yes <H> Is_the_design_based_on_a_template <R> connected_with <T> No || Design a novel is connected with Is the design based on a template? which is further connected with both Yes and No.
<H> Start <R> connected_with <T> Input <H> Input <R> connected_with <T> C=A+B <H> C=A+B <R> connected_with <T> Print_A <H> Print_A <R> connected_with <T> End || Start is connected with Input which is then connected with C=A+B which is further connected with Print A which is finally connected with End.
<H> Start <R> connected_with <T> Input <H> Input <R> connected_with <T> C=A+B <H> C=A+B <R> connected_with <T> Print_A <H> Print_A <R> connected_with <T> End || Start is connected with Input which is then connected with C=A+B which is further connected with Print B which is finally connected with End.
<H> Session_Obect <R> connected_with <T> GetQuery() <H> GetQuery <R> connected_with <T> Input_variables <H> Input_variables <R> connected_with <T> Process <H> Input_variables <R> connected_with <T> Read_or_make_changes <H> Read_or_make_changes <R> connected_with <T> Save() <H> Save() <R> connected_with <T> Process <H> Process <R> connected_with <T> Close() <H> Save() <R> connected_with <T> Close() <H> Close() <R> connected_with <T> Finish || Session Object is connected with GetQuery() which is then connected with Input variables which is then connected with both Process and Read or make changes. Read or make changes is connected with Save() which is then connected with both Process and Close(). Process is then connected with Close() which is further connected with Finish. 
<H> Start-up <R> connected_with <T> Input_variables <H> Input_variables <R> connected_with <T> Operator <H> Operator <R> connected_with <T> Main_function <H> Main_function <R> connected_with <T> MPU_WDT1_setup <H> MPU_WDT1_setup <R> connected_with <T> Configuration <H> Configuration <R> connected_with <T> Finish || Start-up is connected with Input variables which is then connected with Operator which is further connected with Main function. Main function is connected with MPU WDT1 setup which is then connected with Configuration which is finally connected with Finish. 
<H> Start <R> connected_with <T> Read_Temperature <H> Read_Temperature <R> connected_with <T> Check_Temperature <H> Check_Temperature <R> YES <T> Print"Below_Freezing" <H> Check_Temperature <R> YES <T> Print"Above_Freezing" <H> Print"Below_Freezing" <R> connected_with <T> End <H> Print"Above_Freezing" <R> connected_with <T> End || Start is connected with Read Temperature which is then connected with Check Temperature which if Check Temperature is YES then Print "Below Freezing" and if Check Temperature is NO then Print "Above Freezing". Also, both Print "Below Freezing" and Print "Above Freezing" are connected with End. 
<H> Start <R> connected_with <T> Input_data_user <H> Input_data_user <R> connected_with <T> Enter_ID <H> Enter_ID <R> connected_with <T> Authentication <H> Authentication <R> connected_with <T> Memory <H> Memory <R> connected_with <T> Result <H> Result <R> connected_with <T> end || start is connected with Input data user which is then connected with Enter ID which is further connected with Authentication. Authentication is connected with Memory which is then connected with Result which is finally connected with end.
<H> STORAGE <R> connected_with <T> Separation <H> Separation <R> connected_with <T> MILLING <H> MILLING <R> connected_with <T> HULLS_GRINDING <H> HULLS_GRINDING <R> connected_with <T> DRY_EXTRUDING <H> DRY_EXTRUDING <R> connected_with <T> FULL_PRESSING <H> FULL_PRESSING <R> connected_with <T> OIL_CLARIFICATION <H> FULL_PRESSING <R> connected_with <T> Waste_removal <H> Waste_removal <R> connected_with <T> CAKE_STORAGE <H> OIL_CLARIFICATION <R> connected_with <T> CRUDE_OIL_STORAGE || STORAGE is connected with Separation which is then connected with MILLING which is further connected with HULLS GRINDING. HULLS GRINDING is connected with DRY EXTRUDING which is then connected with FULL PRESSING which is then connected with both Waste removal and OIL CLARIFICATION. Waste removal is connected with CAKE STORAGE and OIL CLARIFICATION is connected with CRUDE OIL STORAGE.
<H> Start <R> connected_with <T> Enter_numbers <H> Enter_numbers <R> connected_with <T> Process <H> Process <R> connected_with <T> Output <H> Output <R> connected_with <T> End || Start is connected with Enter numbers which is then connected with Process. Process is connected with Output which is finally connected with end.
<H> Worker_(as_the_victim) <R> connected_with <T> Family_members <H> Family_members <R> connected_with <T> Loss_of_earning_capacity <H> Loss_of_earning_capacity <R> connected_with <T> Pain_&_Suffering <H> Pain_&_Suffering <R> connected_with <T> Family_issue <H> Family_issue <R> connected_with <T> Changed_Social_Life || Worker (as the victim) is connected with Family members which is then connected with Loss of earning capacity which is further connected with Pain & Suffering. Pain & Suffering is connected with Family issue which is finally connected with Changed Social Life.
<H> Data_Collection <R> connected_with <T> Conceptual_Model_Construction <H> Conceptual_Model_Construction <R> connected_with <T> Sufficient_Data? <H> Sufficient_Data? <R> Yes <T> Groundwater_Flow <H> Groundwater_Flow <R> connected_with <T> Liberal? <H> Liberal? <R> No <T> Groundwater_Flow <H> Liberal? <R> Yes <T> Contaminant_transport <H> Contaminant_transport <R> connected_with <T> Adequate? <H> Adequate? <R> No <T> Contaminant_transport <H> Adequate? <R> Yes <T> Predictive_Simulations || Data Collection is connected with Conceptual Model Construction which is then connected with Sufficient Data? which if Sufficient Data? is No then Data Collection and if Sufficient Data? is Yes then Groundwater Flow which is further connected with Liberal?. If Liberal is No then Groundwater Flow and if Liberal? is Yes then Contaminant Transport which is further connected with Adequate?. If Adequate? is No then Contaminant Transport and if Adequate? is Yes then Predictive Simulations.  
<H> Start <R> connected_with <T> Input <H> Input <R> connected_with <T> Area_=_Width*Height <H> Area_=_Width*Height <R> connected_with <T> Height <H> Height <R> connected_with <T> Stop || Start is connected with Input which is then connected with Area = Width*Height which is further connected with Height which is finally connected with Stop.
<H> Online_search_and_retrieving_of_articles <R> connected_with <T> 117_articles <H> 117_articles <R> connected_with <T> Evaluation_of_articles <H> Evaluation_of_articles <R> connected_with <T> articles_with_no_full_text <H> Evaluation_of_articles <R> connected_with <T> Chinese_language <H> Evaluation_of_articles <R> connected_with <T> articles_met_the_inclusion <H> articles_met_the_inclusion <R> connected_with <T> Sort_them_by_numbers <H> Sort_them_by_numbers <R> connected_with <T> Summaries_of_papers <H> Summaries_of_papers <R> connected_with <T> Development || Online search and retrieving of articles is connected with 117 articles which is then connected with Evaluation of articles which is further connected with articles with no full text or duplicates, articles met the inclusion and Chinese language. articles met the inclusion is connected with Sort them by numbers which is then connected with Summaries of papers which is finally connected with Development.
<H> Start <R> connected_with <T> Initialize_parameters_of_particles <H> Initialize_parameters_of_particles <R> connected_with <T> Calculate_the_fitness_function <H> Calculate_the_fitness_function <R> connected_with <T> Compare_with_others_fitness <H> Compare_with_others_fitness <R> connected_with <T> Update_the_global_best_position_of_particle_swarm <H> Update_the_global_best_position_of_particle_swarm <R> connected_with <T> Find_overall_performance <H> Find_overall_performance <R> connected_with <T> Does_it_satisfy_the_termination_conditions? <H> Does_it_satisfy_the_termination_conditions? <R> N <T> Calculate_the_fitness_function <H> Does_it_satisfy_the_termination_conditions? <R> Y <T> Display_the_results <H> Display_the_results <R> connected_with <T> End || Strat is connected with Initialize parameters of particle swarm which is then connected with Calculate the fitness function which is then connected with Compare with others fitness. Compare with others fitness is connected with Update the global best position of particle swarm which is then connected with Find overall performance which is further connected with Does it satisfy the termination conditions?. If Does it satisfy the termination conditions? is N then Calculate the fitness function and if Does it satisfy the termination conditions? is Y then Display the results which is finally connected with End.  
<H> Data_acquistion_for_vibration_signal <R> connected_with <T> Pressure_control_unit <H> Pressure_control_unit <R> connected_with <T> Characteristic_frequency_exits <H> Characteristic_frequency_exits <R> NO <T> Normal_condition <H> Characteristic_frequency_exits <R> YES <T> Characteristic_not_exist <H> Characteristic_not_exist <R> YES <T> Not_Good_condition <H> Characteristic_not_exist <R> NO <T> Blade_with_crack || Data acquistion for vibration signal is connected with Pressue control unit which is then connected with Characteristic frequency exits. If Characteristic frequency exits is NO then Normal condition and if Characteristic frequency exits is YES then Characteristic not exist. If Characteristic not exist is YES then Not Good condition and if Characteristic not exist is NO then Blade with crack. 
<H> Initialization <R> connected_with <T> System_update_Time-updating <H> System_update_Time-updating <R> connected_with <T> DVL_Availble? <H> DVL_Availble? <R> N <T> System_update_Time-updating <H> DVL_Availble? <R> Y <T> Measurement-updating <H> Measurement-updating <R> connected_with <T> Alignment_Over? <H> Alignment_Over? <R> N <T> System_update_Time-updating <H> Alignment_Over? <R> Y <T> End || Initialization is connected with System update Time-updating which is then connected with DVL Availble? which if DVL Availble is N then System update Time-updating and if DVL Availble is Y then Measurement-updating. Measurement-updating is connected with Alingment Over? which if Alignment Over? is N then System update Time-updating and if Alignment Over? is Y then End.    
<H> Time_Series_Gateway <R> connected_with <T> Initialize <H> Initialize <R> connected_with <T> Compare_Time_Series <H> Compare_Time_Series <R> connected_with <T> Different? <H> Different? <R> Yes <T> Analyze_Time_Series_Difference <H> Analyze_Time_Series_Difference <R> connected_with <T> Determine_Change_Date <H> Determine_Change_Date <R> connected_with <T> t=N-1? <H> Different? <R> No <T> t=N-1? <H> t=N-1? <R> No <T> Compare_Time_Series <H> t=N-1? <R> Yes <T> Output_Changed_Dates || Time Series Gateway is connected with Initialize which is then connected with Compare Time Series which is further connected with Different. If Different is Yes then Analyze Time Series Difference and if Different? is No then t=N-1. Also, Analyze Time Series Difference is connected with Determine Change Date which is then connected with t=N-1. If t=N-1 is No then Compare Time Series and if t=N-1? is Yes then Output Changed Dates.
<H> Patient_requests <R> connected_with <T> Patient_is_not_eligible <H> Patient_requests <R> connected_with <T> Doctor <H> Patient_is_not_eligible <R> connected_with <T> Procedure_not_executed <H> Doctor <R> connected_with <T> Healthcare_Brain_doctor <H> Doctor <R> connected_with <T> Healthcare_Heart_doctor <H> Healthcare_Brain_doctor <R> connected_with <T> Find_replacement <H> Healthcare_Heart_doctor <R> connected_with <T> Procedure_executed <H> Find_replacement <R> connected_with <T> Replacement_not_found <H> Find_replacement <R> connected_with <T> Replacement_found <H> Replacement_not_found <R> connected_with <T> Call_another_hospital <H> Replacement_found <R> connected_with <T> Procedure_executed || Patient requests is connected with both Patient is not eligible and Doctor. Patient is not eligible is connected with Procedure not executed. Doctor is then connected with both Healthcare Brain doctor and Healthcare Heart doctor. Healthcare Brain doctor is connected with Find replacement and Healthcare Heart doctor is connected with Procedure executed. Find replacement is connected with both Replacement not found and Replacement found. Replacement not found is connected with Call another hospital and Replacement found is connected with Procedure executed.
<H> Start <R> connected_with <T> Administrator <H> Administrator <R> connected_with <T> Admin_two <H> Administrator <R> connected_with <T> Admin_one <H> Admin_two <R> connected_with <T> User_One <H> Admin_one <R> connected_with <T> User_Four <H> Admin_two <R> connected_with <T> Login <H> Admin_one <R> connected_with <T> Unknown <H> Login <R> connected_with <T> Secret_Question <H> Unknown <R> connected_with <T> Database || Start is connected with Administrator which is then connected with both Admin two and Admin one. Admin two is connected with User One and Login. Admin one is connected with User Four and Unknown. Login is connected with Secret Question and Unknown is connected with Database.
<H> Start <R> connected_with <T> Do_you_understand_English? <H> Do_you_understand_English? <R> YES <T> GOOD <H> GOOD <R> connected_with <T> LET'S_GO_DRINK <H> LET'S_GO_DRINK <R> 6_DRINKS <T> I_should_go_home <H> Do_you_understand_English? <R> NO <T> Okay,_YOU_SEE_THE_LINE_LABELED_"YES"? <H> Okay,_YOU_SEE_THE_LINE_LABELED_"YES"? <R> YES <T> ...AND_YOU_CAN_SEE_THE_ONES_LABELED_"NO"? <H> ...AND_YOU_CAN_SEE_THE_ONES_LABELED_"NO"? <R> YES <T> GOOD <H> ...AND_YOU_CAN_SEE_THE_ONES_LABELED_"NO"? <R> NO <T> BUT_YOU_JUST_FOLLOWED_THEM_TWICE <H> Okay,_YOU_SEE_THE_LINE_LABELED_"YES"? <R> NO <T> BUT_YOU_SEE_THE_ONES_LABELED_"NO". <H> BUT_YOU_SEE_THE_ONES_LABELED_"NO". <R> YES <T> Okay <H> BUT_YOU_SEE_THE_ONES_LABELED_"NO". <R> NO <T> LISTEN. <H> LISTEN. <R> connected_with <T> I_HATE_YOU. <H> BUT_YOU_JUST_FOLLOWED_THEM_TWICE <R> YES <T> (THAT_WASN'T_A_QUESTION.) <H> BUT_YOU_JUST_FOLLOWED_THEM_TWICE <R> NO <T> (THAT_WASN'T_A_QUESTION.) <H> (THAT_WASN'T_A_QUESTION.) <R> connected_with <T> SCREW_IT. <H> SCREW_IT. <R> connected_with <T> LET'S_GO_DRINK || START is connected with Do you understand English? which if Do you understand English? is YES then GOOD which is further connected with LET'S GO DRINK and if Do you understand English? is NO then OKAY, YOU SEE THE LINE LABELED "YES"?. If OKAY, YOU SEE THE LINE LABELED "YES"? is YES then ..AND YOU CAN SEE THE ONES LABELED "NOT"? which if ..AND YOU CAN SEE THE ONES LABELED "NOT"? is YES then GOOD and if ..AND YOU CAN SEE THE ONES LABELED "NOT"? is NO then BUT YOU JUST FOLLOWED THEM TWICE!. And if OKAY, YOU SEE THE LINE LABELED "YES"? is NO then BUT YOU SEE THE ONES LABELED "NO". If BUT YOU SEE THE ONES LABELED "NO" is YES then Okay and if BUT YOU SEE THE ONES LABELED "NO" is NO then LISTEN which is then connected with I HATE YOU. If BUT YOU JUST FOLLOWED THEM TWICE! is YES then (THAT WASN'T A QUESTION.) which is then connected with SCREW IT which is further connected with LET'S GO DRINK. If LET'S GO DRINK is 6 DRINKS then I should go home. Also, if BUT YOU JUST FOLLOWED THEM TWICE! is NO then (THAT WASN'T A QUESTION.).    
<H> Case_status_changes <R> connected_with <T> Approval_triggered <H> Approval_triggered <R> connected_with <T> Is_the_approval_applied_to_the_case <H> Is_the_approval_applied_to_the_case <R> Yes <T> Self-approval_configured <H> Is_the_approval_applied_to_the_case <R> No <T> Change_the_case <H> Self-approval_configured <R> No <T> Approval_flow_configured? <H> Self-approval_configured <R> Yes <T> Case_status_change <H> Case_status_change <R> connected_with <T> Task_status_changes_based_on_approval_mapping <H> Approval_flow_configured? <R> No <T> Task_status_changes_based_on_approval_mapping <H> Approval_flow_configured? <R> No <T> Task_sent_to_approver <H> Task_sent_to_approver <R> connected_with <T> Approver_make_decision || Case status changes is connected with Approval triggered which is then connected with Is the approval applied to the case?. If Is the approval applied to the case? is Yes then Self-approval configured? and if Is the approval applied to the case? is No then Change the case. If Self-approval configured? is No then Approval flow configured? and if Self-approval configured? is Yes then Case status change which is further connected with Task status changes based on approval mapping. If Approval flow configured? is Yes then Task sent to approver which is further connected with Approver make decision and if Approval flow configured? is No then Task status changes based on approval mapping.
<H> Admission_records_Authentication <R> connected_with <T> Records_after_duplicates_removed <H> Transfer_Admission_records_Authentication <R> connected_with <T> Records_after_duplicates_removed <H> Records_after_duplicates_removed <R> connected_with <T> Records_screened <H> Records_screened <R> connected_with <T> Records_excluded <H> Records_screened <R> connected_with <T> Full-text_articles_assessed_for_eligibility <H> Full-text_articles_assessed_for_eligibility <R> connected_with <T> Full-text_articles_excluded,_with_reasons <H> Full-text_articles_assessed_for_eligibility <R> connected_with <T> Assessment_result_of_each_article || Admission records Authentication and Transfer Admission records Authentication both are connected with Records after duplicates removed which is then connected with Records screened. Records screened is then connected with both Records excluded and Full-text articles assessed for eligibility. Full-text articles assessed for eligibility is then connected with both Full-text articles excluded, with reasons and Assessment result of each article. 
<H> Identify_the_Change <R> connected_with <T> Engineering_Change_request_Approval <H> Engineering_Change_request_Approval <R> connected_with <T> Approval <H> Approval <R> Rejected <T> Engineering_Change_request_Approval <H> Approval <R> Approved <T> Engineering_Change_Order_Approval <H> Engineering_Change_Order_Approval <R> connected_with <T> Change_Implementation <H> Change_Implementation <R> connected_with <T> Engineering_Change_Release_Note || Identify the Change is connected with Engineering Change request Approval which is then connected with Approval. If Approval is Rejected then Engineering Change request Approval and if Approval is Approved then Engineering Change Order Approval which is further connected with Change Implementation which is finally connected with Engineering Change Release Note.
<H> Inspection_for_toxic_drugs_in_each_house <R> connected_with <T> Team_selection_for_different_Inspection <H> Team_selection_for_different_Inspection <R> connected_with <T> Agree_and_describe_domains_and_subdomains <H> Agree_and_describe_domains_and_subdomains <R> connected_with <T> Panel_review_and_feedback <H> Panel_review_and_feedback <R> connected_with <T> Consensus <H> Consensus <R> No <T> Panel_review_results,_implement_changes <H> Panel_review_results,_implement_changes <R> connected_with <T> Agree_and_describe_domains_and_subdomains <H> Consensus <R> Yes <T> Summarize_results <H> Summarize_results <R> connected_with <T> Feedback <H> Feedback <R> connected_with <T> Consensus <H> Consensus <R> No <T> Panel_review_results,_implement_changes <H> Panel_review_results,_implement_changes <R> connected_with <T> Feedback <H> Consensus <R> Yes <T> Publish_results || Inspection for toxic drugs in each house is connected with Team selection for different Inspection which is then connected with Agree and describe domains and subdomains which is further connected with Panel review and feedback. Panel review and feedback is connected with Consensus which if Consensus is No then Panel review results, implemented changes which is further connected with Agree and describe domains and subdomains. If Consensus is Yes then Summarize results which is then connected with Feedback which is further connected with Consensus. If Consensus is No then Panel review results, implement changes which is further connected with Feedback and if Consensus is Yes then Publish results.
<H> Identify_Problem <R> connected_with <T> User_"Issues" <H> User_"Issues" <R> Yes <T> Login_Fixed <H> User_"Issues" <R> No <T> Browser_Issue <H> Browser_Issue <R> Yes <T> Different_Browser <H> Browser_Issue <R> No <T> Platform_Issue <H> Platform_Issue <R> Yes <T> Use_Different_Platform <H> Platform_Issue <R> No <T> Import_Settings <H> Import_Settings <R> Yes <T> use_different_version <H> Import_Settings <R> No <T> Settings <H> Settings <R> Yes <T> Adjust_Settings <H> Settings <R> No <T> Content_Issue <H> Content_Issue <R> Yes <T> Change_Content || Identify Problem is connected with User "Issues" which if User "Issues" is No then Browser Issue and if User "Issues" is Yes then Login Fixed. If Browser Issue is Yes then Different Browser and if Browser Issue is No then Platform Issue which if Platform Issue is No then Import Settings and if Platform Issue is Yes then Use Different Platform. If Import Settings is No then Settings and if Import Settings is Yes then use different version. If Settings is No then Content Issue and if Settings is Yes then Adjust Settings and if Content Issue is Yes then Change Content.
<H> Begin <R> connected_with <T> i=0 <H> i=0 <R> connected_with <T> Assign_operations_to_variables <H> Assign_operations_to_variables <R> connected_with <T> Generate_'k'_test_samples <H> Generate_'k'_test_samples <R> connected_with <T> Compute_a <H> Compute_a <R> connected_with <T> a>c <H> a>c <R> Yes <T> User_is_located_in_location_i <H> a>c <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> i>M <H> i>M <R> Yes <T> Display_i <H> i>M <R> No <T> Assign_operations_to_variables || Begin is connected with i=0 which is then connected with Assign operations to variables which is further connected with Generate 'k' test samples. Generate 'k' test samples is connected with Compute a which is then connected with a>l which if a>l is No then i=i+1 and if a>l is Yes then User is located in location i. i=i+1 is connected with i>M which if i>M is Yes then Display i and if i>M is No then Assign operations to variables.
<H> Random_Initialization <R> connected_with <T> Operation_on_counter <H> Operation_on_counter <R> connected_with <T> Compute_the_Objective_function <H> Compute_the_Objective_function <R> connected_with <T> Update_Velocity <H> Update_Velocity <R> connected_with <T> Update_individual_best_if_needed <H> Update_individual_best_if_needed <R> connected_with <T> Update_Position <H> Update_Position <R> connected_with <T> Store_position_in_new_variable <H> Store_position_in_new_variable <R> connected_with <T> Stopping_criteria <H> Stopping_criteria <R> No <T> Operation_on_counter <H> Stopping_criteria <R> Yes <T> Finish || Random Initialization is connected with Operation on counter which is then connected with Compute the Objective function which is further connected with Update Velocity. Update Velocity is connected with Update individual best if needed which is then connected with Update Position which is further connected with Store position in new variable. Store position in new variable is connected with Stopping criteria which if Stopping criteria is No then Operation on counter and if Stopping criteria is Yes then Finish.  
<H> literature_reference <R> connected_with <T> Identify_relevant_sources <H> Identify_relevant_sources <R> connected_with <T> Collect_specific_data <H> Collect_specific_data <R> connected_with <T> Available_data_determination_Is_there_missing_data? <H> Available_data_determination_Is_there_missing_data? <R> Yes <T> Smart_toolkit <H> Smart_toolkit <R> connected_with <T> Emission_factor <H> Available_data_determination_Is_there_missing_data? <R> No <T> Emission_factor <H> Emission_factor <R> connected_with <T> specific_emission_inventory || literature reference is connected with Identify relevant sources which is then connected with Collect specific data which is further connected with Available data determination Is there missing data?. If Available data determination Is there missing data? is Yes then Smart toolkit and if Available data determination Is there missing data? is No then Emission factor. Smart toolkit is connected with Emission factor which is finally connected with specific emission inventory.  
<H> Select_Topic <R> connected_with <T> Background_Search <H> Background_Search <R> connected_with <T> Develop_Search_Strategy <H> Develop_Search_Strategy <R> connected_with <T> Task_assign <H> Task_assign <R> connected_with <T> Evaluate_information_for_Accuracy_&_Reliability <H> Evaluate_information_for_Accuracy_&_Reliability <R> connected_with <T> Discuss_with_others <H> Discuss_with_others <R> connected_with <T> Revision_of_Paper <H> Revision_of_Paper <R> connected_with <T> Report <H> Revision_of_Paper <R> connected_with <T> Submit || Select Topic is connected with Background Search which is then connected with Develop Search Strategy which is further connected with Task assign. Task assign is connected with Evaluate Information for Accuracy Reliability which is then connected with Discuss with others which is further connected with Revision of Paper. Revision of Paper is then connected with both Report and Submit. 
<H> Simulation_of_ORC_system_with_nano-fluid <R> connected_with <T> Note_all_the_records_of_fluid <H> Note_all_the_records_of_fluid <R> connected_with <T> Preparation_of_the_nano-fluids <H> Preparation_of_the_nano-fluids <R> connected_with <T> Testing_of_fluid_in_Lab <H> Testing_of_fluid_in_Lab <R> connected_with <T> Real_life_ORC_in_Hybrid_OTEC_implementation_with_nano-fluid <H> Real_life_ORC_in_Hybrid_OTEC_implementation_with_nano-fluid <R> connected_with <T> Submit_the_progress || Simulation of OCR system with nano-fluid is connected with Note all the records of fluid which is then connected with Preparation of the nano-fluids. Preparation of the nano-fluids is connected with Testing of fluid in Lab which is then connected with Real life ORC in Hybrid OTEC implementation with nano-fluid which is finally connected with Submit the progress. 
<H> Start <R> connected_with <T> Read_Inputs <H> Read_Inputs <R> connected_with <T> Calculate_S <H> Calculate_S <R> connected_with <T> Calculate_area_=sqrt(s*(s-a)*(s-b)*(s-c)) <H> Calculate_area_=sqrt(s*(s-a)*(s-b)*(s-c)) <R> connected_with <T> Print_area <H> Print_area <R> connected_with <T> End || Start is connected with Read Inputs which is then connected with Calculate S. Calculate is connected with Calculate area=sqrt(s*(s-a)*(s-b)*(s-c)) which is then connected with Print area which is finally connected with End.
<H> Input_Image <R> connected_with <T> Image_Enhancement <H> Image_Enhancement <R> connected_with <T> Image_Segmentation <H> Image_Segmentation <R> connected_with <T> Cropping_ROI_Manually <H> Image_Segmentation <R> connected_with <T> Threshold_and_region_based_technique <H> Image_Segmentation <R> connected_with <T> NCNNN <H> NCNNN <R> connected_with <T> Testing <H> Testing <R> connected_with <T> Evaluation || Input Image is connected with Image Enhancement which is then connected with Image Segmentation which is further connected with Cropping ROI Manually, Threshold and region based technique, and NCNNN. NCNNN is connected with Testing which is finally connected with Evaluation.
<H> Application <R> connected_with <T> Close_other_apps <H> Close_other_apps <R> connected_with <T> Update_Game <H> Update_Game <R> connected_with <T> Render_game_state_onto_window <H> Render_game_state_onto_window <R> connected_with <T> Process_events_from_window <H> Process_events_from_window <R> connected_with <T> Does_game_lag? <H> Does_game_lag? <R> Yes <T> Update_Game <H> Does_game_lag? <R> No <T> Application_Shutdown || Application Start is connected with Close other apps which is then connected with Update Game which is further connected with Render game state onto window. Render game state onto window is connected with Process events from window which is then connected with Does game lag? which if Does game lag? is Yes then Update Game and if Does game lag? is No then Application Shutdown.
<H> BEGIN <R> connected_with <T> Enter_Limit <H> Enter_Limit <R> connected_with <T> Initialize_number <H> Initialize_number <R> connected_with <T> Set_Sum_equal_to_0 <H> Set_Sum_equal_to_0 <R> connected_with <T> DO <H> DO <R> connected_with <T> If_Sum>Limit <H> If_Sum>Limit <R> true <T> Dispaly_Number_and_Sum <H> If_Sum>Limit <R> flase <T> Update_values <H> Update_values <R> connected_with <T> Decrease_loss <H> Decrease_loss <R> connected_with <T> DO <H> Dispaly_Number_and_Sum <R> connected_with <T> END || BEGIN is connected with Enter Limit which is then connected with Initialize number which is further connected with Set Sum equal to 0. Set Sum equal to 0 is connected with Do which is further connected with If Sum>Limit which if Sum>Limit is true then Display Number and Sum. If Sum>Limit is false then Update values which is further connected with Decrease loss. Decrease loss is then connected with DO and also DIsplay Number and Sum is connected with END.
<H> Vibration_signal <R> connected_with <T> Dicompose_the_signal_into_different_components <H> Dicompose_the_signal_into_different_components <R> connected_with <T> Obtain_the_order_of_component_according_to_size <H> Obtain_the_order_of_component_according_to_size <R> connected_with <T> Calculate_the_significance_indicator_and_further_construct_the_fault_sensitive_matrix <H> Calculate_the_significance_indicator_and_further_construct_the_fault_sensitive_matrix <R> connected_with <T> Identify_fault_type_and_find_out_the_optimal_IMF_to_fault || Vibration signal is connected with Dicompose the signal into different components which is then connected with Obtain the order of component according to size which is further connected with Calculate the significance indicator and further construct the fault sensitive matrix which is finally connected with Identify fault type and find out the optimal IMF to fault.
<H> Exploration <R> connected_with <T> Drilling_and_blasting <H> Drilling_and_blasting <R> connected_with <T> Mining <H> mining <R> connected_with <T> Separation <H> Separation <R> connected_with <T> Refining <H> Refining <R> connected_with <T> Distribution || Exploration is connected with Drilling and blasting which is then connected with Mining which is further connected with Separation. Separation is connected with Refining which is finally connected with Distribution.
<H> Information_source <R> connected_with <T> Amplifier <H> Amplifier <R> connected_with <T> Channel <H> Noise_source <R> connected_with <T> Channel <H> Channel <R> connected_with <T> Receiver <H> Receiver <R> connected_with <T> Destination || Information source is connected with Amplifier which is then connected with Channel. Also, Noise source is connected with Channel which is then connected with Receiver which is finally connecte dwith Destination. 
<H> Start <R> connected_with <T> Read_Inputs <H> Read_Inputs <R> connected_with <T> Let_Factor=1,I=1 <H> Let_Factor=1,I=1 <R> connected_with <T> I_is_greater_than_N <H> I_is_greater_than_N <R> Yes <T> Show_Factor_on_output <H> I_is_greater_than_N <R> No <T> Update <H> Show_Factor_on_output <R> connected_with <T> End <H> Update <R> connected_with <T> Add_1_to_I <H> Add_1_to_I <R> connected_with <T> I_is_greater_than_N || Start is connected with Read Inputs which is then connected with Let Factor=1, I=1 which is further connected with I is greater than N. If I is greater than N is Yes then Show Factor on output which is then connected with End and if I is greater than N is No then Update which is then connected with Add 1 to I which is further connected with I is greater than N. 
<H> Raw_Materials <R> connected_with <T> Melting <H> Melting <R> connected_with <T> Forming <H> Forming <R> connected_with <T> Sampling <H> Sampling <R> connected_with <T> Inspection_and_Testing <H> Inspection_and_Testing <R> connected_with <T> Secondary_Processing <H> Secondary_Processing <R> connected_with <T> Warehousing || Raw Materials is connected with Melting which is then connected with Forming which is further connected with Sampling. Sampling is connected with Inspection and Testing which is then connected with Secondary Processing which is finally connected with Warehousing. 
<H> Cell_in_human_body <R> connected_with <T> Flexible_Assembly_Cell <H> Flexible_Assembly_Cell <R> connected_with <T> Study_cell_particle <H> Study_cell_particle <R> connected_with <T> Multi_Functional_Layer_Bonding_Cell <H>  Multi_Functional_Layer_Bonding_Cell <R> connected_with <T> Slicing_Cell || Cell in human body is connected with Flexible Assembly Cell which is then connected with Study cell particle. Study cell particle is connected with Multi-Functional Layer Bonding Cell which is finally connected with Slicing Cell.
<H> Are_you_thirsty? <R> Yes <T> Take_water <H> Are_you_thirsty? <R> no <T> Don't_get_a_drink || If Are you thirsty? is Yes then Take water and if Are you thirsty? is no then Don't get a drink.
<H> New_Budget <R> connected_with <T> Make_an_edit <H> Make_an_edit <R> Wait <T> Was_the_article_edited_further? <H> Was_the_article_edited_further? <R> Yes <T> Do_you_agree_with_the_change? <H> Do_you_agree_with_the_change? <R> Disagree <T> Discuss <H> Discuss <R> Implement <T> Make_an_edit <H> Was_the_article_edited_further? <R> No <T> Implement_Budget <H> Do_you_agree_with_the_change? <R> Agree <T> Implement_Budget || New Budget is connected with Make an edit which if Make an edit is Wait then Was the article edited further?. If Was the article edited further is Yes then Do you agree with the change? which if Do you agree with the change? is Disagree then Discuss which if Discuss is Implement then again Make an edit and If Do you agree with the change? is Agree then Implement Budget. Also, If Was the article edited further? is No then Implement Budget.
<H> Input_Source <R> connected_with <T> Input_Transducers <H> Input_Transducers <R> connected_with <T> Modulation <H> Modulation <R> connected_with <T> Source_Encoder <H> Source_Encoder <R> connected_with <T> Encoder <H> Encoder <R> connected_with <T> Base-band_Amplifier <H> Base-band_Amplifier <R> connected_with <T> Channel <H> Channel <R> connected_with <T> Band-pass_Demodulator <H> Band-pass_Demodulator <R> connected_with <T> Decoder <H> Decoder <R> connected_with <T> Source_Decoder <H> Source_Decoder <R> connected_with <T> De-modulation <H> De-modulation <R> connected_with <T> Output_Transducers <H> Output_Transducers <R> connected_with <T> Output_Signal || Input Source is connected with Input Transducers which is then connected with Modulation which is further connected with Source Encoder. Source Encoder is connected with Encoder which is then connected with Base-band Amplifier which is further connected with Channel. Channel is connected with Band-pass Demodulator which is then connected with Decoder which is further connected with Source Decoder. Source Decoder is connected with De-modulation which is then connected with Output Transducers which is finally connected with Output Signal.
<H> Start <R> connected_with <T> Requirements <H> Requirements <R> connected_with <T> System_simulation <H> System_simulation <R> connected_with <T> Result_Analyzing <H> Result_Analyzing <R> connected_with <T> Improvement_&_Development <H> Improvement_&_Development <R> connected_with <T> Hardware_implementation <H> Hardware_implementation <R> connected_with <T> Display <H> Display <R> connected_with <T> End || Start is connected with Requirements which is then connected with System simulation. System simulation is connected with Result Analyzing which is then connected with Improvement & Development. Improvement & Development is connected with Hardware implementation which is then connected with Display which is finally connected with End.
<H> Start <R> connected_with <T> Power_On <H> Power_On <R> connected_with <T> Look_for_previous_data <H> Look_for_previous_data <R> connected_with <T> Generate_Map_and_Location <H> Generate_Map_and_Location <R> connected_with <T> Plan_route <H> Plan_route <R> connected_with <T> Route <H> Plan_route <R> connected_with <T> Stop || Start is connected with Power On which is then connected with Look for previous data which is further connected with Generate Map and Location. Generate Map and Location is connected with Plan route which is then connected with both Route and Stop.
<H> Privacy <R> connected_with <T> Password <H> Privacy <R> connected_with <T> Biometric_Cryptosystem <H> Password <R> connected_with <T> PIN <H> Password <R> connected_with <T> Non-invertible_Transformation <H> Biometric_Cryptosystem <R> connected_with <T> Key_Binding <H> Biometric_Cryptosystem <R> connected_with <T> Key_Generation || Privacy is connected with Password and Biometric Cryptosystem. Password is then connected with PIN and Non-invertible Transformation and Biometric Cryptosystem is connected with Key Binding and Key Generation.