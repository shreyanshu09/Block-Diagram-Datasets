<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F.M <H> F=F.M <R> connected_with <T> M=N <H> M=N <R> NO <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F.M <H> M=N <R> YES <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F.M. F=F.M is connected with M=N which if NO then M=M+1 and is then connected with F=F.M. If M=N is YES then Print F and is connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X.X <H> X=X.X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X.X which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> NO <T> OUTPUT_B <H> A>=B <R> Yes <T> OUTPUT_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is NO, then OUTPUT B and if A>=B is Yes, then OUTPUT A.  
<H> Start <R> connected_with <T> More_example? <H> More_example? <R> Yes <T> Error<best_error <H> More_example? <R> No <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_example? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_example? <H> i<100 <R> No <T> Stop || Start is connected with More example? If More example is Yes then Error<best_error and if More example? is No then update weights which is then connected with Next example and further connected with More example? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> END || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> No <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and if i<=length(A)-2 is No then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is finally connected with swapped=true. 
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> No <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> connected_with <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 and is then connected with F=F*M. F=F*M is connected with M=N which if No then M=M+1 and is connected with F=F*M. M=N is connected with Print F and is connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> END || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> More_examples? <H> More_examples? <R> Yes <T> Error<best_error <H> More_examples? <R> No <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_examples? <H> Error<best_error <R> YES <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_examples? <H> i<100 <R> No <T> Stop || Start is connected with More examples? If More examples is Yes then Error<best_error and if More example? is No then update weights which is then connected with Next example and further connected with More examples? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More examples? If i<100 is No, then Stop. 
<H> terminator <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=FxM <H> F=FxM <R> connected_with <T> M=N <H> M=N <R> No <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=FxM <H> M=N <R> yes <T> Print_F <H> Print_F <R> connected_with <T> End || terminator is connected with Read N which is connected with M=1 and F=1 and is then connected with F=FxM. F=FxM is connected with M=N which if no then M=M+1 and is connected with F=FxM. If M=N is yes then Print F and is connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=XxX <H> X=XxX <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=XxX which is further connected with Output X and finally connected with terminator.
<H> terminator <R> connected_with <T> Input_A, <H> Input_A, <R> connected_with <T> A>=B <H> A>=B <R> no <T> Output_B <H> A>=B <R> yes <T> Output_A || Start is connected with Input A, which is then connected with A>=B. If A>=B is no, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> More_example? <H> More_example? <R> no <T> Error<best_error <H> More_example? <R> yes <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_example? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_example? <H> i<100 <R> No <T> Stop || Start is connected with More example? If More example is no then Error<best_error and if More example? is yes then update weights which is then connected with Next example and further connected with More example? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> No <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and if i<=length(A)-2 is No then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> terminator <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> no <T> a=b_and_b=r <H> a=b_and_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Terminator is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is no then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> no <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if yes then T=B and is then connected with B=A and A=T and if A>B is no then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> then <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 is True then Output P and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> End || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with End.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> NO <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> YES <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if NO then M=M+1 and is then connected with F=F*M. If M=N is yes then Print F and is connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=XxX <H> X=XxX <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=XxX which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> connected_with <T> Output_B <H> A>=B <R> Yes <T> OUTPUT_A || Start is connected with Input A,B which is then connected with A>=B and further connected with Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> More_examples? <H> More_examples? <R> no <T> Error<best_error <H> More_example? <R> yes <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_examples? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_examples? <H> i<100 <R> No <T> Stop || Start is connected with More examples? If More examples is no then Error<best_error and if More examples? is yes then update weights which is then connected with Next example and further connected with More examples? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=0 <H> sum=0_i=0 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=0 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=r <H> a=b_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Start is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> no <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if yes then T=B and is then connected with B=A and A=T and if A>B is no then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> then <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 is True then Output P and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> End || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with End.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_i=3 <H> T[1]=1_T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> connected_with <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End. Also, A=0 is connected with output -b+c/2a and is then connected with output b-a/2a which is finally connected with End.
<H> start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=r <H> a=b_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Start is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> then <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 is True then Output P and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_i=3 <H> T[1]=1_T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> NO <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> YES <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if NO then M=M+1 and is then connected with F=F*M. If M=N is yes then Print F and is connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=XxX <H> X=XxX <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=XxX which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> OUTPUT_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> More_examples? <H> More_examples? <R> no <T> Error<best_error <H> More_example? <R> yes <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_examples? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_examples? <H> i<100 <R> No <T> Stop || Start is connected with More examples? If More examples is no then Error<best_error and if More examples? is yes then update weights which is then connected with Next example and further connected with More examples? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> No <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and if i<=length(A)-2 is No then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=r <H> a=b_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Start is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> then <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 is True then Output P and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_i=3 <H> T[1]=1_T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0 <H> sum=0 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> connected_with <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. Also, i==n? is connected with output n which is finally connected with End.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0 <H> sum=0 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> connected_with <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. Also, i==n? is connected with output n which is finally connected with End.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> No <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> Yes <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 and is then connected with F=F*M. F=F*M is connected with M=N which if No then M=M+1 and is connected with F=F*M. If M=N is Yes then Print F and is connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=XxX <H> X=XxX <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=XxX which is further connected with Output X and finally connected with terminator.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=XxX <H> X=XxX <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=XxX which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> More_examples? <H> More_examples? <R> Yes <T> Error<best_error <H> More_example? <R> No <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_example? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_example? <H> i<100 <R> No <T> Stop || Start is connected with More example? If More example is Yes then Error<best_error and if More example? is No then update weights which is then connected with Next example and further connected with More example? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> No <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and if i<=length(A)-2 is No then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> No <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and if i<=length(A)-2 is No then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> n=1_F=1 <H> n=1_F=1 <R> connected_with <T> F=F*n <H> F=F*n <R> connected_with <T> n=N <H> n=N <R> NO <T> n=n+1 <H> n=n+1 <R> connected_with <T> F=F*n <H> n=N <R> Yes <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with n=1 and F=1 which is then connected with F=F*n. F=F*n is connected with n=N which if No then n=n+1 and is then connected with F=F*n. If n=N is yes then Print F and is connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=XxX <H> X=XxX <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=XxX which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> n=1_F=1 <H> n=1_F=1 <R> connected_with <T> F=F*n <H> F=F*n <R> connected_with <T> n=N <H> n=N <R> No <T> n=n+1 <H> n=n+1 <R> connected_with <T> F=F*n <H> n=N <R> Yes <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with n=1 and F=1 which is then connected with F=F*n. F=F*n is connected with n=N which if No then n=n+1 and is then connected with F=F*n. If n=N is yes then Print F and is connected with End.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> More_examples? <H> More_examples? <R> Yes <T> Error<best_error <H> More_example? <R> No <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_example? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_example? <H> i<100 <R> No <T> Stop || Start is connected with More example? If More example is Yes then Error<best_error and if More example? is No then update weights which is then connected with Next example and further connected with More example? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> More_examples? <H> More_examples? <R> Yes <T> Error<best_error <H> More_example? <R> No <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_example? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_example? <H> i<100 <R> No <T> Stop || Start is connected with More example? If More example is Yes then Error<best_error and if More example? is No then update weights which is then connected with Next example and further connected with More example? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> No <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and if i<=length(A)-2 is No then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> n=a%b <H> n=a%b <R> connected_with <T> n=0 <H> n=0 <R> No <T> a=b_b=n <H> a=b_b=n <R> connected_with <T> n=a%b <H> n=0 <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Start is connected with Input a,b which is then connected with n=a%b. n=a%b is connected with n=0 and If n=0 is No then a=b and b=n and is again connected with n=a%b. If n=0 is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> connected_with <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and P>0 is connected Output P and it is finally connected with end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_i=3 <H> T[1]=1_T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> connected_with <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> connected_with <T> A=0 <H> A=0 <R> connected_with <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> connected_with <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. A<0 is connected with nothing and is then connected with End. Also, A=0 is connected with output -b/2a and is then connected with End. A=0 is connected with output -b+c/2a and is then connected with output b-a/2a which is finally connected with End.
<H> Start <R> connected_with <T> Read_M <H> Read_M <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> No <T> M=M.1 <H> M=M.1 <R> connected_with <T> F=F*M <H> M=N <R> Yes <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read M which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if No then M=M.1 and is then connected with F=F*M. If M=N is yes then Print F and is connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=0 <H> sum=0_i=0 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=0 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> No <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and if i<=length(A)-2 is No then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=r <H> a=b_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Start is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> connected_with <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and P>0 is connected Output P and it is finally connected with end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_i=3 <H> T[1]=1_T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> More_examples? <H> More_examples? <R> no <T> Error<best_error <H> More_example? <R> yes <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_examples? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_examples? <H> i<100 <R> No <T> Stop || Start is connected with More examples? If More examples is no then Error<best_error and if More examples? is yes then update weights which is then connected with Next example and further connected with More examples? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> connected_with <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and i<=length(A)-2 is connected with then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=r <H> a=b_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Start is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> connected_with <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and P>0 is connected Output P and it is finally connected with end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_i=3 <H> T[1]=1_T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> connected_with <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> connected_with <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End and is connected with A=0 which if A=0 then output -b/2a and is then connected with End. A=0 is connected with output -b+c/2a and is then connected with output b-a/2a which is finally connected with End.
<H> start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=r <H> a=b_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Start is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> connected_with <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and P>0 is connected Output P and it is finally connected with end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_i=3 <H> T[1]=1_T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=r <H> a=b_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Start is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> connected_with <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and P>0 is connected Output P and it is finally connected with end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_i=3 <H> T[1]=1_T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> No <T> M=M.1 <H> M=M.1 <R> connected_with <T> F=F*M <H> M=N <R> Yes <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if No then M=M.1 and is then connected with F=F*M. If M=N is yes then Print F and is finally connected with End.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> No <T> M=M.1 <H> M=M.1 <R> connected_with <T> F=F*M <H> M=N <R> connected_with <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if No then M=M.1 and is then connected with F=F*M. M=N is connected with Print F and is finally connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> No <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and if i<=length(A)-2 is No then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=FxM <H> F=FxM <R> connected_with <T> M=N <H> M=N <R> No <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=FxM <H> M=N <R> connected_with <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=FxM. F=FxM is connected with M=N which if No then M=M+1 and is then connected with F=FxM. M=N is connected with Print F and is finally connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> More_examples? <H> More_examples? <R> no <T> Error<best_error <H> More_example? <R> yes <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_examples? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_examples? <H> i<100 <R> No <T> Stop || Start is connected with More examples? If More examples is no then Error<best_error and if More examples? is yes then update weights which is then connected with Next example and further connected with More examples? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=0 <H> sum=0_i=0 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_sum || Start is connected with Input n which is then connected with sum=0 and i=0 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output sum.
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> No <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and if i<=length(A)-2 is No then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> terminator <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=r <H> a=b_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Terminator is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> connected_with <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and P>0 is connected Output P and it is finally connected with end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_i=3 <H> T[1]=1_T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> No <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> connected_with <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if No then M=M+1 and is then connected with F=F*M. M=N is connected with Print F and is finally connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> More_examples? <H> More_examples? <R> Yes <T> Error<best_error <H> More_example? <R> No <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_example? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> connected_with <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_example? <H> i<100 <R> No <T> Stop || Start is connected with More example? If More example is Yes then Error<best_error and if More example? is No then update weights which is then connected with Next example and further connected with More example? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. i<100 is connected with Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1]. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> Start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=r <H> a=b_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Terminator is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> connected_with <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and A>B is connected with terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> then <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 is True then Output P and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_and_i=3 <H> T[1]=1_T[2]=1_and_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> No <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> connected_with <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if No then M=M+1 and is then connected with F=F*M. M=N is connected with Print F and is finally connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> More_examples? <H> More_examples? <R> no <T> Error<best_error <H> More_example? <R> yes <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_examples? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_examples? <H> i<100 <R> No <T> Stop || Start is connected with More examples? If More examples is no then Error<best_error and if More examples? is yes then update weights which is then connected with Next example and further connected with More examples? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> No <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and if i<=length(A)-2 is No then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> No <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> yes <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if No then M=M+1 and is then connected with F=F*M. If M=N is yes then Print F and is finally connected with End.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> connected_with <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and A>=B is connected with Output A. 
<H> Start <R> connected_with <T> More_example? <H> More_example? <R> Yes <T> Error<best_error <H> More_example? <R> No <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_example? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_example? <H> i<100 <R> No <T> Stop || Start is connected with More example? If More example is Yes then Error<best_error and if More example? is No then update weights which is then connected with Next example and further connected with More example? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More example? If i<100 is No, then Stop.
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_and_b=r <H> a=b_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Terminator is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> then <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 is True then Output P and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_i=3 <H> T[1]=1_T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=r <H> a=b_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Terminator is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> then <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 is True then Output P and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> connected_with <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> yes <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which is then connected with M=M+1 and is then connected with F=F*M. If M=N is yes then Print F and is finally connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> More_examples? <H> More_examples? <R> no <T> Error<best_error <H> More_example? <R> yes <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_examples? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_examples? <H> i<100 <R> No <T> Stop || Start is connected with More examples? If More examples is no then Error<best_error and if More examples? is yes then update weights which is then connected with Next example and further connected with More examples? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> connected_with <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and i==n? is connected with i=i+1 which is then connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> No <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and if i<=length(A)-2 is No then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> Start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_and_b=r <H> a=b_and_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Terminator is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> connected_with <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and A>B is connected with terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> then <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 is True then Output P and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_i=3 <H> T[1]=1_T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> No <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> yes <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if No then M=M+1 and is then connected with F=F*M. If M=N is yes then Print F and is finally connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> More_examples? <H> More_examples? <R> no <T> Error<best_error <H> More_example? <R> yes <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_examples? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_examples? <H> i<100 <R> No <T> Stop || Start is connected with More examples? If More examples is no then Error<best_error and if More examples? is yes then update weights which is then connected with Next example and further connected with More examples? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> No <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and if i<=length(A)-2 is No then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> Start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=r <H> a=b_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Terminator is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> then <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 is True then Output P and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_i=3 <H> T[1]=1_T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> No <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> yes <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if No then M=M+1 and is then connected with F=F*M. If M=N is yes then Print F and is finally connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> More_examples? <H> More_examples? <R> No <T> Error<best_error <H> More_example? <R> connected_with <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_examples? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> Yes <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_examples? <H> i<100 <R> No <T> Stop || Start is connected with More examples? If More examples is no then Error<best_error and More examples? is connected with update weights which is then connected with Next example and further connected with More examples? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. If i<100 is Yes, then Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=1 <H> sum=0_i=1 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> No <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and if i<=length(A)-2 is No then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> Start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=r <H> a=b_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Terminator is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> then <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 is True then Output P and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_i=3 <H> T[1]=1_T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> connected_with <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. i<n is connected with Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> No <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> yes <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if No then M=M+1 and is then connected with F=F*M. If M=N is yes then Print F and is finally connected with End.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No, then Output B and if A>=B is Yes, then Output A. 
<H> Start <R> connected_with <T> More_examples? <H> More_examples? <R> No <T> Error<best_error <H> More_example? <R> Yes <T> update_weights <H> update_weights <R> connected_with <T> Next_example <H> Next_example <R> connected_with <T> More_examples? <H> Error<best_error <R> yes <T> best_error=error <H> best_error=error <R> connected_with <T> Save_weights <H> Save_weights <R> connected_with <T> i++ <H> Error<best_error <R> No <T> i++ <H> i++ <R> connected_with <T> i<100 <H> i<100 <R> connected_with <T> Back_to_first_sample <H> Back_to_first_sample <R> connected_with <T> More_examples? <H> i<100 <R> No <T> Stop || Start is connected with More examples? If More examples is no then Error<best_error and if More examples? is yes then, update weights which is then connected with Next example and further connected with More examples? If Error<best_error is Yes then best_error=error which is then connected with save weights and which is further connected with i++. If Error<best_error is No then i++ which is then connected with i<100. i<100 is connected with Back to first example which is then connected with More example? If i<100 is No, then Stop. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=0 <H> sum=0_i=0 <R> connected_with <T> sum=sum+i <H> sum=sum+i <R> connected_with <T> i==n? <H> i==n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+i <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=1 which is further connected with sum=sum+i. sum=sum+i is then connected with i==n? and if i==n? is No then i=i+1 which is connected with sum=sum+i. If i==n? is Yes then output n which is finally connected with End.
<H> Start <R> connected_with <T> i=0_swapped=false <H> i=0_swapped=false <R> connected_with <T> i<=length(A)-2 <H> i<=length(A)-2 <R> yes <T> A[i]>A[i+1] <H> i<=length(A)-2 <R> No <T> Swapped=true <H> Swapped=true <R> true <T> i=0_swapped=false <H> Swapped=true <R> false <T> End <H> A[i]>A[i+1] <R> else <T> i=i+1 <H> i=i+1 <R> connected_with <T> i<=length(A)-2 <H> A[i]>A[i+1] <R> then <T> swap(A[i]>A[i+1]) <H> swap(A[i]>A[i+1]) <R> connected_with <T> swapped=true <H> swapped=true <R> connected_with <T> i<=length(A)-2 || Start is connected with i=0 and swapped=false which is then connected with i<=length(A)-2. If i<=length(A)-2 is Yes then A[i]>A[i+1] and if i<=length(A)-2 is No then swapped=true. If swapped=true is true then i=0 and swapped=false and if swapped=true is false then End. If A[i]>A[i+1] is then swap(A[i],A[i+1]) else i=i+1 which is then connected with i<=length(A)-2. swap(A[i],A[i+1]) is then connected with swapped=true which is finally connected with i<length(A)-2. 
<H> Start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=r <H> a=b_b=r <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Terminator is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=r and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> else <T> Input_P <H> P>0 <R> then <T> Output_P <H> Output_P <R> connected_with <T> end || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 is True then Output P and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> display_h(x)g(x) <H> display_h(x)g(x) <R> connected_with <T> end || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with display h(x)g(x) and is finally connected with end.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=1_T[2]=1_i=3 <H> T[1]=1_T[2]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.    