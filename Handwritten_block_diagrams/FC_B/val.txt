<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F.M <H> F=F.M <R> connected_with <T> M=N <H> M=N <R> NO <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F.M <H> M=N <R> YES <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F.M. F=F.M is connected with M=N which if NO then M=M+1 and is then connected with F=F.M. If M=N is YES then Print F and is connected with End.
<H> Begin <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> n=1_R=1 <H> n=1_R=1 <R> connected_with <T> R=R.n <H> R=R.n <R> connected_with <T> n=X <H> n=X <R> Yes <T> Disp_R <H> n=X <R> connected_with <T> n=n+1 <H> n=n+1 <R> connected_with <T> R=R.n <H> Disp_R <R> connected_with <T> Stop || Begin is connected with Input X and is then connected with n=1 and R=1 which is further connected with R=R.n. R=R.n is connected with n=X and n=x is connected with n=n+1 and if n=x is yes then Disp R. n=n+1 is connected with R=R.n and Disp R is connected with Stop.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X.X <H> X=X.X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X.X which is further connected with Output X and finally connected with terminator.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> n=n.n <H> n=n.n <R> connected_with <T> Print_n <H> Print_n <R> connected_with <T> terminator || Terminator is connected with Read n which is connected with n=n.n which is further connected with Print n and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No then Output B and if A>=B is Yes, then Output A.
<H> Begin <R> connected_with <T> Input_X,Y <H> Input_X,Y <R> connected_with <T> X>=Y <H> X>=Y <R> 0 <T> Display_Y <H> X>=Y <R> 1 <T> Display_X || Begin is connected with Input X,Y and is connected with X>=Y which if 0 then display Y and if 1 then display X.
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=0 <H> sum=0_i=0 <R> connected_with <T> sum=sum+1 <H> sum=sum+1 <R> connected_with <T> i=n? <H> i=n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+1 <H> i=n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=0 which is further connected with sum=sum+1. sum=sum+1 is then connected with i=n? and if i=n? is No then i=i+1 which is connected with sum=sum+1. If i=n? is Yes then output n which is finally connected with End.
<H> Begin <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> k=1_sum=0 <H> k=1_sum=0 <R> connected_with <T> sum=sum+k <H> sum=sum+k <R> connected_with <T> k==n <H> k==n <R> 0 <T> k=k+1 <H> k=k+1 <R> connected_with <T> sum=sum+k <H> k==n <R> 1 <T> Disp_sum <H> Disp_sum <R> connected_with <T> Finish || Begin is connected with Input n and is then connected with k=1 and Sum=1 which is further connected with Sum=Sum+k. Sum=Sum+k is connected with K==n? which if 0 then k=k+1 and is then connected with Sum=Sum+k. Also, if K==n is 1 then Disp Sum and then disp sum is connected with Finish.
<H> start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=y <H> a=b_b=y <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Start is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=y and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> Begin <R> connected_with <T> Input_n,m <H> Input_n,m <R> connected_with <T> r=n%m <H> r=n%m <R> connected_with <T> r=0? <H> r=0? <R> True <T> Output_m <H> r=0? <R> False <T> n=m_m=r <H> n=m_m=r <R> connected_with <T> r=n%m <H> output_m <R> connected_with <T> End || Begin is connected with Input n,m which is then connected with r=n%m. r=n%m is connected with r=0? which if true, then output m and if r=0? is false then n=m and m=r and is again connected with r=n%m. Output m is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator.
<H> terminator <R> connected_with <T> X>Y <H> X>Y <R> Then <T> T=Y <H> T=Y <R> connected_with <T> Y=X_X=T <H> X>Y <R> else <T> terminator <H> Y=X_X=T <R> connected_with <T> terminator || Terminator is connected with X>Y and if X>Y then T=Y and is then connected with Y=X and X=T, else connected with terminator and also Y=X and X=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> Else <T> Input_P <H> P>0 <R> Then <T> Output_P <H> Output_P <R> connected_with <T> End || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 then Output P and it is finally connected with end.
<H> Start <R> connected_with <T> Input_V <H> Input_V <R> connected_with <T> V>0 <H> V>0 <R> True <T> Output_V <H> Output_V <R> connected_with <T> end || Start is connected with Input V and is connected with V>0. If v>0 is True then Output V and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> Display_h(x)g(x) <H> Display_h(x)g(x) <R> connected_with <T> End || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with Display h(x)g(x) and is finally connected with end.
<H> Start <R> connected_with <T> Input_V <H> Input_V <R> connected_with <T> Compute_f(v) <H> Compute_f(v) <R> connected_with <T> Compute_g(V) <H> Compute_g(V) <R> connected_with <T> Output_f(V)+g(V) <H> Output_f(V)+g(V) <R> connected_with <T> Stop || Start is connected with Input V and is connected with Compute f(V) which is then connected with Compute g(V) and is further connected with Output f(V)+g(V) and is finally connected with Stop.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[i]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> terminator <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[i]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> N <T> Output_T[n] <H> i<n <R> Y <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> output_T[n] <R> connected_with <T> terminator || Terminator is connected with Input n and is connected with T[1]=T[2]=1 and i=3 and is then connected with i<n. If i<n is N, then output T[n] and if Y, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Output T[n] is connected with terminator.
<H> Begin <R> connected_with <T> Read_a,b,c <H> Read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> Then <T> Nothing <H> Nothing <R> connected_with <T> End <H> A<0 <R> Else <T> A=0 <H> A=0 <R> Then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> Else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> input_a,b,c <H> input_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> Y <T> No_solution <H> No_solution <R> connected_with <T> End <H> A<0 <R> N <T> A=0 <H> A=0 <R> Y <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> N <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Start is connected with input a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 is Y then No solution and is then connected with End. A<0 is N then A=0 which if Y, then output -b/2a and is then connected with End. If A=0 is N, then output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> Do_I_want_to_do_this? <H> Do_I_want_to_do_this? <R> No <T> Don't_do_it. <H> Do_I_want_to_do_this? <R> Yes <T> Will_it_likely_end_in_disaster? <H> Will_it_likely_end_in_disaster? <R> No <T> Do_it! <H> Will_it_likely_end_in_disaster? <R> Yes <T> will_it_make_a_good_story_anyway? <H> will_it_make_a_good_story_anyway? <R> No <T> Don't_do_it. <H> will_it_make_a_good_story_anyway? <R> Yes <T> Do_it! || Start is connected with Do I want to do this? which if No, then Don't do it. If Do I want to do this? is Yes then will it likely end in disaster? which if No then Do it! and if will it likely end in disaster? is yes then will it make a good story anyway? If will it make a good story anyway? is Yes then Do it! and if No then Don't do it.
<H> Start <R> connected_with <T> Do_I_want_to_do_this <H> Do_I_want_to_do_this <R> Yes <T> Do_it! <H> Do_I_want_to_do_this <R> No <T> Will_it_likely_end_in_disaster? <H> Will_it_likely_end_in_disaster? <R> No <T> Do_it! <H> Will_it_likely_end_in_disaster? <R> Yes <T> will_it_make_a_good_story_anyway? <H> will_it_make_a_good_story_anyway? <R> No <T> Don't_do_it. <H> will_it_make_a_good_story_anyway? <R> Yes <T> Do_it! || Start is connected with Do I want to do this? which if Do I want to do this? is Yes then Do it! which if No then will it likely end in disaster? and if will it likely end in disaster? is No then Do it! and if will it likely end in disaster? is yes then will it make a good story anyway? If will it make a good story anyway? is Yes then Do it! and if No then Don't do it.
<H> Start <R> connected_with <T> Read_X <H> Read_X <R> connected_with <T> X>0 <H> X>0 <R> False <T> Read_Y <H> X>0 <R> True <T> X=2.X <H> X=2.X <R> connected_with <T> Halt <H> Read_Y <R> connected_with <T> X=X.Y <H> X=X.Y <R> connected_with <T> Halt || Start is connected with Read X which is then connected with X>0. If X>0 is False then Read Y and if X>0 is True then X=2.X which is further connected with Halt. Read Y is connected with X=X.Y and is connected with Halt.
<H> Start <R> connected_with <T> Input_a <H> Input_a <R> connected_with <T> Let_X=a/3 <H> Let_X=a/3 <R> connected_with <T> ls|a-x3|<S? <H> ls|a-x3|<S? <R> Yes <T> Output:The_cube_root_of_a_is_X. <H> Output:The_cube_root_of_a_is_X. <R> connected_with <T> Stop <H> ls|a-x3|<S? <R> No <T> Let_X=X-(X3-a)/3X2 <H> Let_X=X-(X3-a)/3X2 <R> connected_with <T> ls|a-x3|<S? || Start is connected with Input a which is then connected with Let x=a/3 and let x=a/3 is connected with ls|a-x3|<S? If ls|a-x3|<S? is Yes then Output: The Cube root of a is x and is then connected with Stop. If ls|a-x3|<S? is No then Let x=x-(x3-a)/3x2 which is further connected with ls|a-x3|<S?
<H> Work <R> connected_with <T> Tired? <H> Tired? <R> No <T> Work <H> Tired? <R> Yes <T> Go_to_coffee_maker <H> Go_to_coffee_maker <R> connected_with <T> Fresh_coffee? <H> Fresh_coffee? <R> Yes <T> Drink_coffee <H> Drink_coffee <R> connected_with <T> Tired? <H> Fresh_coffee? <R> No <T> Make_coffee <H> Make_coffee <R> connected_with <T> Drink_coffee || Work is connected with Tired? which if Tired? is No then Work and if Tired? is Yes then Go to coffee maker. Go to coffee maker is connected with Fresh coffee? which if Fresh coffee? is Yes then Drink Coffee and Drink Coffee is connected with Tired? If Fresh coffee? is No then Make coffee which is then connected with Drink coffee. 
<H> Start <R> connected_with <T> Request_key_from_mem_cached <H> Request_key_from_mem_cached <R> connected_with <T> Does_key_exist? <H> Does_key_exist? <R> No <T> Load_data_from_database <H> Load_data_from_database <R> connected_with <T> Update_memcached <H> Does_key_exist? <R> Yes <T> Use_data <H> Update_memcached <R> connected_with <T> Use_data || Start is connected with Request Key from mem cached which is then connected with Does key exist? If Does key exist? is No then Load data from database which is then connected with Update memcached. If Does key exist? is Yes then Use data and also update memcached is connected with use data.
<H> terminator <R> connected_with <T> SET_RESULT_TO_ZERO <H> SET_RESULT_TO_ZERO <R> connected_with <T> LSB(MPR)=1? <H> LSB(MPR)=1? <R> No <T> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <H> LSB(MPR)=1? <R> Yes <T> RESULT=RESULT+MPD <H> RESULT=RESULT+MPD <R> connected_with <T> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <H> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <R> connected_with <T> NEXT_LSB_(MPR) <H> NEXT_LSB_(MPR) <R> connected_with <T> DONE_FOR_8_BITS? <H> DONE_FOR_8_BITS? <R> No <T> LSB(MPR)=1? <H> DONE_FOR_8_BITS? <R> Yes <T> terminator || Terminator is connected with SET RESULT TO ZERO which is then connected with LSB(MPR)=1? If LSB(MPR)=1? is No then LEFT SHIFT (1) MPD OR RIGHT SHIFT (1) RES. If LSB(MPR)=1? is Yes then RESULT=RESULT+MPD. RESULT=RESULT+MPD is connected with LEFT SHIFT (1) MPD OR RIGHT SHIFT (1) RES which is further connected with NEXT LSB (MPR). NEXT LSB (MPR) is connected with DONE FOR 8 BITS? which if No then LSB(MPR)=1? and if DONE FOR 8 BITS? is Yes then terminator.
<H> S <R> connected_with <T> Initialisation <H> Initialisation <R> connected_with <T> Population_of_solutions <H> Population_of_solutions <R> connected_with <T> Terminate? <H> Terminate? <R> Yes <T> Output_Best_Sol. <H> Output_Best_Sol. <R> connected_with <T> T <H> Terminate? <R> No <T> Selection <H> Selection <R> connected_with <T> Promising_Solutions <H> Promising_Solutions <R> connected_with <T> Reproduction <H> Reproduction <R> connected_with <T> New_Solutions <H> New_Solutions <R> connected_with <T> Replacement <H> Replacement <R> connected_with <T> Population_of_solutions || S is connected with Initialisation which is then connected with Population of Solutions. Population of Solutions is connected with Terminate? If Terminate? is Yes then Output Best Sol. which is further connected with T. If Terminate? is No then Selection which is further connected with Promisiong Solutions. Promising Solutions is connected with Reproduction which is then connected with New solutions and further connected with Replacement. Replacement is then connected with Population of solutions.                    
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> NO <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> YES <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if NO then M=M+1 and is then connected with F=F*M. If M=N is YES then Print F and is connected with End.
<H> Begin <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> n=1_R=1 <H> n=1_R=1 <R> connected_with <T> R=R*n <H> R=R*n <R> connected_with <T> n=X <H> n=X <R> Yes <T> Disp_R <H> n=X <R> No <T> n=n+1 <H> n=n+1 <R> connected_with <T> R=R*n <H> Disp_R <R> connected_with <T> Stop || Begin is connected with Input X and is then connected with n=1 and R=1 which is further connected with R=R*n. R=R*n is connected with n=X and if n=x is No then n=n+1 and if yes then Disp R. n=n+1 is connected with R=R*n and Disp R is connected with Stop.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> n=n*n <H> n=n*n <R> connected_with <T> Print_n <H> Print_n <R> connected_with <T> terminator || Terminator is connected with Read n which is connected with n=n*n which is further connected with Print n and finally connected with terminator. 
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No then Output B and if A>=B is Yes, then Output A.
<H> Begin <R> connected_with <T> Input_X,Y <H> Input_X,Y <R> connected_with <T> X>=Y <H> X>=Y <R> 0 <T> Display_Y <H> X>=Y <R> 1 <T> Display_X || Begin is connected with Input X,Y and is connected with X>=Y which if 0 then display Y and if 1 then display X. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=0 <H> sum=0_i=0 <R> connected_with <T> sum=sum+1 <H> sum=sum+1 <R> connected_with <T> i=n? <H> i=n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+1 <H> i=n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=0 which is further connected with sum=sum+1. sum=sum+1 is then connected with i=n? and if i=n? is No then i=i+1 which is connected with sum=sum+1. If i=n? is Yes then output n which is finally connected with End.
<H> Begin <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> k=1_sum=0 <H> k=1_sum=0 <R> connected_with <T> sum=sum+k <H> sum=sum+k <R> connected_with <T> k==n? <H> k==n? <R> 0 <T> k=k+1 <H> k=k+1 <R> connected_with <T> sum=sum+k <H> k==n? <R> 1 <T> Disp_sum <H> Disp_sum <R> connected_with <T> Finish || Begin is connected with Input n and is then connected with k=1 and Sum=1 which is further connected with Sum=Sum+k. Sum=Sum+k is connected with K==n? which if 0 then k=k+1 and is then connected with Sum=Sum+k. Also, if K==n is 1 then Disp Sum and then disp sum is connected with Finish. 
<H> start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=y <H> a=b_b=y <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Start is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=y and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> Begin <R> connected_with <T> Input_n,m <H> Input_n,m <R> connected_with <T> r=n%m <H> r=n%m <R> connected_with <T> r=0? <H> r=0? <R> True <T> Output_m <H> r=0? <R> False <T> n=m_m=r <H> n=m_m=r <R> connected_with <T> r=n%m <H> output_m <R> connected_with <T> End || Begin is connected with Input n,m which is then connected with r=n%m. r=n%m is connected with r=0? which if true, then output m and if r=0? is false then n=m and m=r and is again connected with r=n%m. Output m is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator.
<H> terminator <R> connected_with <T> X>Y <H> X>Y <R> Then <T> T=Y <H> T=Y <R> connected_with <T> Y=X_X=T <H> X>Y <R> else <T> terminator <H> Y=X_X=T <R> connected_with <T> terminator || Terminator is connected with X>Y and if X>Y then T=Y and is then connected with Y=X and X=T, else connected with terminator and also Y=X and X=T is connected with terminator.
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> Else <T> Input_P <H> P>0 <R> Then <T> Output_P <H> Output_P <R> connected_with <T> End || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 then Output P and it is finally connected with end.
<H> Start <R> connected_with <T> Input_V <H> Input_V <R> connected_with <T> V>0 <H> V>0 <R> True <T> Output_V <H> Output_V <R> connected_with <T> end || Start is connected with Input V and is connected with V>0. If v>0 is True then Output V and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> Display_h(x)g(x) <H> Display_h(x)g(x) <R> connected_with <T> End || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with Display h(x)g(x) and is finally connected with end.
<H> Start <R> connected_with <T> Input_V <H> Input_V <R> connected_with <T> Compute_f(v) <H> Compute_f(v) <R> connected_with <T> Compute_g(V) <H> Compute_g(V) <R> connected_with <T> Output_f(V)+g(V) <H> Output_f(V)+g(V) <R> connected_with <T> Stop || Start is connected with Input V and is connected with Compute f(V) which is then connected with Compute g(V) and is further connected with Output f(V)+g(V) and is finally connected with Stop.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[i]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> connected_with <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. Also, i<n is connected with Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> terminator <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[i]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> N <T> Output_T[n] <H> i<n <R> connected_with <T> i++ <H> i<n <R> Y <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> output_T[n] <R> connected_with <T> terminator || Terminator is connected with Input n and is connected with T[1]=T[2]=1 and i=3 and is then connected with i<n. If i<n is N, then output T[n] and if Y, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Output T[n] is connected with terminator.
<H> Begin <R> connected_with <T> Read_a,b,c <H> Read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> Then <T> Nothing <H> Nothing <R> connected_with <T> End <H> A<0 <R> Else <T> A=0 <H> A=0 <R> Then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> Else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> input_a,b,c <H> input_a,b,c <R> connected_with <T> A=b2-4ac <H> A<0 <R> Y <T> No_solution <H> No_solution <R> connected_with <T> End <H> A<0 <R> N <T> A=0 <H> A=0 <R> Y <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> N <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Start is connected with input a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 is Y then No solution and is then connected with End. A<0 is N then A=0 which if Y, then output -b/2a and is then connected with End. If A=0 is N, then output -b+c/2a and is connected with output b-a/2a which is then connected with End. 
<H> Start <R> connected_with <T> Do_I_want_to_do_this? <H> Do_I_want_to_do_this? <R> No <T> Don't_do_it. <H> Do_I_want_to_do_this? <R> Yes <T> Will_it_likely_end_in_disaster? <H> Will_it_likely_end_in_disaster? <R> No <T> Do_it! <H> Will_it_likely_end_in_disaster? <R> Yes <T> will_it_make_a_good_story_anyway? <H> will_it_make_a_good_story_anyway? <R> No <T> Don't_do_it. <H> will_it_make_a_good_story_anyway? <R> Yes <T> Do_it! || Start is connected with Do I want to do this? which if No, then Don't do it. If Do I want to do this? is Yes then will it likely end in disaster? which if No then Do it! and if will it likely end in disaster? is yes then will it make a good story anyway? If will it make a good story anyway? is Yes then Do it! and if No then Don't do it.
<H> Start <R> connected_with <T> Do_you_want_to_do_this <H> Do_you_want_to_do_this <R> Yes <T> Do_it! <H> Do_you_want_to_do_this <R> No <T> Will_it_likely_end_in_disaster? <H> Will_it_likely_end_in_disaster? <R> No <T> Do_it! <H> Will_it_likely_end_in_disaster? <R> Yes <T> will_it_make_a_good_story_anyway? <H> will_it_make_a_good_story_anyway? <R> No <T> Don't_do_it. <H> will_it_make_a_good_story_anyway? <R> Yes <T> Do_it! || Start is connected with Do I want to do this? which if Do I want to do this? is Yes then Do it! which if No then will it likely end in disaster? and if will it likely end in disaster? is No then Do it! and if will it likely end in disaster? is yes then will it make a good story anyway? If will it make a good story anyway? is Yes then Do it! and if No then Don't do it.
<H> Start <R> connected_with <T> Read_X <H> Read_X <R> connected_with <T> X>0 <H> X>0 <R> False <T> Read_Y <H> X>0 <R> True <T> X=2*X <H> X=2*X <R> connected_with <T> Halt <H> Read_Y <R> connected_with <T> X=X*Y <H> X=X*Y <R> connected_with <T> Halt || Start is connected with Read X which is then connected with X>0. If X>0 is False then Read Y and if X>0 is True then X=2*X which is further connected with Halt. Read Y is connected with X=X*Y and is connected with Halt.
<H> Start <R> connected_with <T> Input_a <H> Input_a <R> connected_with <T> Let_X=a/3 <H> Let_X=a/3 <R> connected_with <T> ls|a-x3|<S? <H> ls|a-x3|<S? <R> Yes <T> Output:The_cube_root_of_a_is_X. <H> Output:The_cube_root_of_a_is_X. <R> connected_with <T> Stop <H> ls|a-x3|<S? <R> No <T> Let_X=X-(X3-a)/3X2 <H> Let_X=X-(X3-a)/3X2 <R> connected_with <T> ls|a-x3|<S? || Start is connected with Input a which is then connected with Let x=a/3 and let x=a/3 is connected with ls|a-x3|<S? If ls|a-x3|<S? is Yes then Output: The Cube root of a is x and is then connected with Stop. If ls|a-x3|<S? is No then Let x=x-(x3-a)/3x2 which is further connected with ls|a-x3|<S?
<H> Work <R> connected_with <T> Tired? <H> Tired? <R> No <T> Work <H> Tired? <R> Yes <T> Go_to_coffee_maker <H> Go_to_coffee_maker <R> connected_with <T> Fresh_coffee? <H> Fresh_coffee? <R> Yes <T> Drink_coffee <H> Drink_coffee <R> connected_with <T> Tired? <H> Fresh_coffee? <R> No <T> Make_coffee <H> Make_coffee <R> connected_with <T> Drink_coffee || Work is connected with Tired? which if Tired? is No then Work and if Tired? is Yes then Go to coffee maker. Go to coffee maker is connected with Fresh coffee? which if Fresh coffee? is Yes then Drink Coffee and Drink Coffee is connected with Tired? If Fresh coffee? is No then Make coffee which is then connected with Drink coffee. 
<H> Start <R> connected_with <T> Request_key_from_mem_cached <H> Request_key_from_mem_cached <R> connected_with <T> Does_key_exist? <H> Does_key_exist? <R> No <T> Load_data_from_database <H> Load_data_from_database <R> connected_with <T> Update_memcached <H> Does_key_exist? <R> Yes <T> Use_data <H> Update_memcached <R> connected_with <T> Use_data || Start is connected with Request Key from mem cached which is then connected with Does key exist? If Does key exist? is No then Load data from database which is then connected with Update memcached. If Does key exist? is Yes then Use data and also update memcached is connected with use data. 
<H> terminator <R> connected_with <T> SET_RESULT_TO_ZERO <H> SET_RESULT_TO_ZERO <R> connected_with <T> LSB(MPR)=1? <H> LSB(MPR)=1? <R> No <T> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <H> LSB(MPR)=1? <R> Yes <T> RESULT=RESULT+MPD <H> RESULT=RESULT+MPD <R> connected_with <T> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <H> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <R> connected_with <T> NEXT_LSB_(MPR) <H> NEXT_LSB_(MPR) <R> connected_with <T> DONE_FOR_8_BITS? <H> DONE_FOR_8_BITS? <R> No <T> LSB(MPR)=1? <H> DONE_FOR_8_BITS? <R> Yes <T> terminator || Terminator is connected with SET RESULT TO ZERO which is then connected with LSB(MPR)=1? If LSB(MPR)=1? is No then LEFT SHIFT (1) MPD OR RIGHT SHIFT (1) RES. If LSB(MPR)=1? is Yes then RESULT=RESULT+MPD. RESULT=RESULT+MPD is connected with LEFT SHIFT (1) MPD OR RIGHT SHIFT (1) RES which is further connected with NEXT LSB (MPR). NEXT LSB (MPR) is connected with DONE FOR 8 BITS? which if No then LSB(MPR)=1? and if DONE FOR 8 BITS? is Yes then terminator.
<H> S <R> connected_with <T> Initialisation <H> Initialisation <R> connected_with <T> Population_of_solutions <H> Population_of_solutions <R> connected_with <T> Terminate? <H> Terminate? <R> Yes <T> Output_Best_Sol. <H> Output_Best_Sol. <R> connected_with <T> T <H> Terminate? <R> No <T> Selection <H> Selection <R> connected_with <T> Promising_Solutions <H> Promising_Solutions <R> connected_with <T> Reproduction <H> Reproduction <R> connected_with <T> New_Solutions <H> New_Solutions <R> connected_with <T> Replacement <H> Replacement <R> connected_with <T> Population_of_solutions || S is connected with Initialisation which is then connected with Population of Solutions. Population of Solutions is connected with Terminate? If Terminate? is Yes then Output Best Sol. which is further connected with T. If Terminate? is No then Selection which is further connected with Promisiong Solutions. Promising Solutions is connected with Reproduction which is then connected with New solutions and further connected with Replacement. Replacement is then connected with Population of solutions.                    
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> NO <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> YES <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F.M. F=F.M is connected with M=N which if NO then M=M+1 and is then connected with F=F.M. If M=N is YES then Print F and is connected with End.
<H> Begin <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> n=1_R=1 <H> n=1_R=1 <R> connected_with <T> R=R*n <H> R=R*n <R> connected_with <T> n=x <H> n=x <R> No <T> n=n+1 <H> n=n+1 <R> connected_with <T> R=R*n <H> n=X <R> Yes <T> Disp_R <H> Disp_R <R> connected_with <T> Stop || Begin is connected with Input X and is then connected with n=1 and R=1 which is further connected with R=R*n. R=R*n is connected with n=X and if n=x is No then n=n+1 and if yes then Disp R. n=n+1 is connected with R=R*n and Disp R is connected with Stop. 
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator. 
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> n=n*n <H> n=n*n <R> connected_with <T> Print_n <H> Print_n <R> connected_with <T> terminator || Terminator is connected with Read n which is connected with n=n*n which is further connected with Print n and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. A>=B is connected with Output B and if A>=B is Yes, then Output A.
<H> Begin <R> connected_with <T> Input_X,Y <H> Input_X,Y <R> connected_with <T> X>=Y <H> X>=Y <R> 0 <T> Display_Y <H> X>=Y <R> 1 <T> Display_X || Begin is connected with Input X,Y and is connected with X>=Y which if 0 then display Y and if 1 then display X.
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=0 <H> sum=0_i=0 <R> connected_with <T> sum=sum+1 <H> sum=sum+1 <R> connected_with <T> i=n? <H> i=n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+1 <H> i==n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=0 which is further connected with sum=sum+1. sum=sum+1 is then connected with i=n? and if i=n? is No then i=i+1 which is connected with sum=sum+1. If i=n? is Yes then output n which is finally connected with End. 
<H> Begin <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> k=1_sum=0 <H> k=1_sum=0 <R> connected_with <T> sum=sum+k <H> sum=sum+k <R> connected_with <T> k==n? <H> k==n? <R> 0 <T> k=k+1 <H> k=k+1 <R> connected_with <T> sum=sum+k <H> k==n? <R> 1 <T> Disp_sum <H> Disp_sum <R> connected_with <T> Finish || Begin is connected with Input n and is then connected with k=1 and Sum=1 which is further connected with Sum=Sum+k. Sum=Sum+k is connected with K==n? which if 0 then k=k+1 and is then connected with Sum=Sum+k. Also, if K==n is 1 then Disp Sum and then disp sum is connected with Finish.
<H> start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=y <H> a=b_b=y <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Start is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=y and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End. 
<H> Begin <R> connected_with <T> Input_n,m <H> Input_n,m <R> connected_with <T> r=n%m <H> r=n%m <R> connected_with <T> r=0? <H> r=0? <R> True <T> Output_m <H> r=0? <R> False <T> n=m_m=r <H> n=m_m=r <R> connected_with <T> r=n%m <H> output_m <R> connected_with <T> End || Begin is connected with Input n,m which is then connected with r=n%m. r=n%m is connected with r=0? which if true, then output m and if r=0? is false then n=m and m=r and is again connected with r=n%m. Output m is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator and also B=A and A=T is connected with terminator.
<H> terminator <R> connected_with <T> X>Y <H> X>Y <R> Then <T> T=Y <H> T=Y <R> connected_with <T> Y=X_X=T <H> X>Y <R> else <T> terminator <H> Y=X_X=T <R> connected_with <T> terminator || Terminator is connected with X>Y and if X>Y then T=Y and is then connected with Y=X and X=T, else connected with terminator and also Y=X and X=T is connected with terminator.
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> Else <T> Input_P <H> P>0 <R> Then <T> Output_P <H> Output_P <R> connected_with <T> End || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 then Output P and it is finally connected with end.
<H> Start <R> connected_with <T> Input_V <H> Input_V <R> connected_with <T> V>0 <H> V>0 <R> True <T> Output_V <H> Output_V <R> connected_with <T> end || Start is connected with Input V and is connected with V>0. If v>0 is True then Output V and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> Display_h(x)g(x) <H> Display_h(x)g(x) <R> connected_with <T> End || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with Display h(x)g(x) and is finally connected with end.
<H> Start <R> connected_with <T> Input_V <H> Input_V <R> connected_with <T> Compute_f(v) <H> Compute_f(v) <R> connected_with <T> Compute_g(V) <H> Compute_g(V) <R> connected_with <T> Output_f(V)+g(V) <H> Output_f(V)+g(V) <R> connected_with <T> Stop || Start is connected with Input V and is connected with Compute f(V) which is then connected with Compute g(V) and is further connected with Output f(V)+g(V) and is finally connected with Stop.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[i]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> terminator <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[i]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> N <T> Output_T[n] <H> i<n <R> Y <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> output_T[n] <R> connected_with <T> terminator || Terminator is connected with Input n and is connected with T[1]=T[2]=1 and i=3 and is then connected with i<n. If i<n is N, then output T[n] and if Y, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Output T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> input_a,b,c <H> input_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> Y <T> No_solution <H> No_solution <R> connected_with <T> End <H> A<0 <R> N <T> A=0 <H> A=0 <R> Y <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> N <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Start is connected with input a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 is Y then No solution and is then connected with End. A<0 is N then A=0 which if Y, then output -b/2a and is then connected with End. If A=0 is N, then output -b+c/2a and is connected with output b-a/2a which is then connected with End. 
<H> Start <R> connected_with <T> Do_I_want_to_do_this? <H> Do_I_want_to_do_this? <R> No <T> Don't_do_it. <H> Do_I_want_to_do_this? <R> Yes <T> Will_it_likely_end_in_disaster? <H> Will_it_likely_end_in_disaster? <R> No <T> Do_it <H> Will_it_likely_end_in_disaster? <R> Yes <T> will_it_make_a_good_story_anyway? <H> will_it_make_a_good_story_anyway? <R> No <T> Don't_do_it. <H> will_it_make_a_good_story_anyway? <R> Yes <T> Do_it! || Start is connected with Do I want to do this? which if No, then Don't do it. If Do I want to do this? is Yes then will it likely end in disaster? if will it likely end in disaster? is No then Do it! and if will it likely end in disaster? is yes then will it make a good story anyway? If will it make a good story anyway? is Yes then Do it! and if No then Don't do it.
<H> Start <R> connected_with <T> Do_I_want_to_do_this <H> Do_I_want_to_do_this <R> Yes <T> Do_it! <H> Do_I_want_to_do_this <R> No <T> Will_it_likely_end_in_disaster? <H> Will_it_likely_end_in_disaster? <R> No <T> Do_it! <H> Will_it_likely_end_in_disaster? <R> Yes <T> will_it_make_a_good_story_anyway? <H> will_it_make_a_good_story_anyway? <R> No <T> Don't_do_it. <H> will_it_make_a_good_story_anyway? <R> Yes <T> Do_it! || Start is connected with Do I want to do this? which if Do I want to do this? is Yes then Do it! which if No then will it likely end in disaster? and if will it likely end in disaster? is No then Do it! and if will it likely end in disaster? is yes then will it make a good story anyway? If will it make a good story anyway? is Yes then Do it! and if No then Don't do it.
<H> Start <R> connected_with <T> Read_X <H> Read_X <R> connected_with <T> X>0 <H> X>0 <R> False <T> Read_Y <H> X>0 <R> True <T> X=2*X <H> X=2*X <R> connected_with <T> Halt <H> Read_Y <R> connected_with <T> X=X*Y <H> X=X*Y <R> connected_with <T> Halt || Start is connected with Read X which is then connected with X>0. If X>0 is False then Read Y and if X>0 is True then X=2*X which is further connected with Halt. Read Y is connected with X=X*Y and is connected with Halt.
<H> Start <R> connected_with <T> Input_a <H> Input_a <R> connected_with <T> Let_X=a/3 <H> Let_X=a/3 <R> connected_with <T> ls|a-x3|<S? <H> ls|a-x3|<S? <R> Yes <T> Output:The_cube_root_of_a_is_X. <H> Output:The_cube_root_of_a_is_X. <R> connected_with <T> Stop <H> ls|a-x3|<S? <R> No <T> Let_X=X-(X3-a)/3X2 <H> Let_X=X-(X3-a)/3X2 <R> connected_with <T> ls|a-x3|<S? || Start is connected with Input a which is then connected with Let x=a/3 and let x=a/3 is connected with ls|a-x3|<S? If ls|a-x3|<S? is Yes then Output: The Cube root of a is x and is then connected with Stop. If ls|a-x3|<S? is No then Let x=x-(x3-a)/3x2 which is further connected with ls|a-x3|<S?
<H> Work <R> connected_with <T> Tired? <H> Tired? <R> No <T> Work <H> Tired? <R> Yes <T> Go_to_coffee_maker <H> Go_to_coffee_maker <R> connected_with <T> Fresh_coffee? <H> Fresh_coffee? <R> Yes <T> Drink_coffee <H> Drink_coffee <R> connected_with <T> Tired? <H> Fresh_coffee? <R> No <T> Make_coffee <H> Make_coffee <R> connected_with <T> Drink_coffee || Work is connected with Tired? which if Tired? is No then Work and if Tired? is Yes then Go to coffee maker. Go to coffee maker is connected with Fresh coffee? which if Fresh coffee? is Yes then Drink Coffee and Drink Coffee is connected with Tired? If Fresh coffee? is No then Make coffee which is then connected with Drink coffee.
<H> Start <R> connected_with <T> Request_key_from_mem_cached <H> Request_key_from_mem_cached <R> connected_with <T> Does_key_exist? <H> Does_key_exist? <R> No <T> Load_data_from_database <H> Load_data_from_database <R> connected_with <T> Update_memcached <H> Does_key_exist? <R> Yes <T> Use_data <H> Update_memcached <R> connected_with <T> Use_data || Start is connected with Request Key from mem cached which is then connected with Does key exist? If Does key exist? is No then Load data from database which is then connected with Update memcached. If Does key exist? is Yes then Use data and also update memcached is connected with use data.
<H> terminator <R> connected_with <T> SET_RESULT_TO_ZERO <H> SET_RESULT_TO_ZERO <R> connected_with <T> LSB(MPR)=1? <H> LSB(MPR)=1? <R> No <T> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <H> LSB(MPR)=1? <R> Yes <T> RESULT=RESULT+MPD <H> RESULT=RESULT+MPD <R> connected_with <T> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <H> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <R> connected_with <T> NEXT_LSB_(MPR) <H> NEXT_LSB_(MPR) <R> connected_with <T> DONE_FOR_8_BITS? <H> DONE_FOR_8_BITS? <R> No <T> LSB(MPR)=1? <H> DONE_FOR_8_BITS? <R> Yes <T> terminator || Terminator is connected with SET RESULT TO ZERO which is then connected with LSB(MPR)=1? If LSB(MPR)=1? is No then LEFT SHIFT (1) MPD OR RIGHT SHIFT (1) RES. If LSB(MPR)=1? is Yes then RESULT=RESULT+MPD. RESULT=RESULT+MPD is connected with LEFT SHIFT (1) MPD OR RIGHT SHIFT (1) RES which is further connected with NEXT LSB (MPR). NEXT LSB (MPR) is connected with DONE FOR 8 BITS? which if No then LSB(MPR)=1? and if DONE FOR 8 BITS? is Yes then terminator.
<H> S <R> connected_with <T> Initialisation <H> Initialisation <R> connected_with <T> Population_of_solutions <H> Population_of_solutions <R> connected_with <T> Terminate? <H> Terminate? <R> Yes <T> Output_Best_Sol. <H> Output_Best_Sol. <R> connected_with <T> T <H> Terminate? <R> No <T> Selection <H> Selection <R> connected_with <T> Promising_Solutions <H> Promising_Solutions <R> connected_with <T> Reproduction <H> Reproduction <R> connected_with <T> New_Solutions <H> New_Solutions <R> connected_with <T> Replacement <H> Replacement <R> connected_with <T> Population_of_solutions || S is connected with Initialisation which is then connected with Population of Solutions. Population of Solutions is connected with Terminate? If Terminate? is Yes then Output Best Sol. which is further connected with T. If Terminate? is No then Selection which is further connected with Promisiong Solutions. Promising Solutions is connected with Reproduction which is then connected with New solutions and further connected with Replacement. Replacement is then connected with Population of solutions.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> NO <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> YES <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if No then M=M+1 and is then connected with F=F*M. If M=N is Yes then Print F and is connected with End. 
<H> Begin <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> n=1_R=1 <H> n=1_R=1 <R> connected_with <T> R=R*n <H> R=R*n <R> connected_with <T> n=X <H> n=X <R> Yes <T> Disp_R <H> n=X <R> No <T> n=n+1 <H> n=n+1 <R> connected_with <T> R=R*n <H> Disp_R <R> connected_with <T> Stop || Begin is connected with Input X and is then connected with n=1 and R=1 which is further connected with R=R*n. R=R*n is connected with n=X and if n=x is No then n=n+1 and if yes then Disp R. n=n+1 is connected with R=R*n and Disp R is connected with Stop.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> n=n*n <H> n=n*n <R> connected_with <T> Print_n <H> Print_n <R> connected_with <T> terminator || Terminator is connected with Read n which is connected with n=n*n which is further connected with Print n and finally connected with terminator. 
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No then Output B and if A>=B is Yes, then Output A.
<H> Begin <R> connected_with <T> Input_X,Y <H> Input_X,Y <R> connected_with <T> X>=Y <H> X>=Y <R> 0 <T> Display_Y <H> X>=Y <R> 1 <T> Display_X || Begin is connected with Input X,Y and is connected with X>=Y which if 0 then display Y and if 1 then display X.
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=0 <H> sum=0_i=0 <R> connected_with <T> sum=sum+1 <H> sum=sum+1 <R> connected_with <T> i=n? <H> i=n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+1 <H> i=n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=0 which is further connected with sum=sum+1. sum=sum+1 is then connected with i=n? and if i=n? is No then i=i+1 which is connected with sum=sum+1. If i=n? is Yes then output n which is finally connected with End. 
<H> Begin <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> k=1_sum=0 <H> k=1_sum=0 <R> connected_with <T> sum=sum+k <H> sum=sum+k <R> connected_with <T> k==n? <H> k==n? <R> 0 <T> k=k+1 <H> k=k+1 <R> connected_with <T> sum=sum+k <H> k==n? <R> 1 <T> Disp_sum <H> Disp_sum <R> connected_with <T> Finish || Begin is connected with Input n and is then connected with k=1 and Sum=0 which is further connected with Sum=Sum+k. Sum=Sum+k is connected with K==n? which if 0 then k=k+1 and is then connected with Sum=Sum+k. Also, if K==n is 1 then Disp Sum and then disp sum is connected with Finish.
<H> start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=y <H> a=b_b=y <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Start is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=y and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> Begin <R> connected_with <T> Input_n,m <H> Input_n,m <R> connected_with <T> r=n%m <H> r=n%m <R> connected_with <T> r=0? <H> r=0? <R> True <T> Output_m <H> r=0? <R> False <T> n=m_m=r <H> n=m_m=r <R> connected_with <T> r=n%m <H> output_m <R> connected_with <T> End || Begin is connected with Input n,m which is then connected with r=n%m. r=n%m is connected with r=0? which if true, then output m and if r=0? is false then n=m and m=r and is again connected with r=n%m. Output m is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator.
<H> terminator <R> connected_with <T> X>Y <H> X>Y <R> Then <T> T=Y <H> T=Y <R> connected_with <T> Y=X_X=T <H> X>Y <R> else <T> terminator <H> Y=X_X=T <R> connected_with <T> terminator || Terminator is connected with X>Y and if X>Y then T=Y and is then connected with Y=X and X=T, else connected with terminator and also Y=X and X=T is connected with terminator. 
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> Else <T> Input_P <H> P>0 <R> Then <T> Output_P <H> Output_P <R> connected_with <T> End || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 then Output P and it is finally connected with end.
<H> Start <R> connected_with <T> Input_V <H> Input_V <R> connected_with <T> V>0 <H> V>0 <R> True <T> Output_V <H> Output_V <R> connected_with <T> end || Start is connected with Input V and is connected with V>0. If v>0 is True then Output V and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> Display_h(x)g(x) <H> Display_h(x)g(x) <R> connected_with <T> End || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with Display h(x)g(x) and is finally connected with end.
<H> Start <R> connected_with <T> Input_V <H> Input_V <R> connected_with <T> Compute_f(v) <H> Compute_f(v) <R> connected_with <T> Compute_g(V) <H> Compute_g(V) <R> connected_with <T> Output_f(V)+g(V) <H> Output_f(V)+g(V) <R> connected_with <T> Stop || Start is connected with Input V and is connected with Compute f(V) which is then connected with Compute g(V) and is further connected with Output f(V)+g(V) and is finally connected with Stop. 
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[i]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> terminator <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[i]=1_i=3 <R> N <T> Output_T[n] <H> T[1]=T[i]=1_i=3 <R> Y <T> i<n <H> i<n <R> connected_with <T> i++ <H> i++ <R> connected_with <T> T[i]=T[i-1]+T[i-2] <H> output_T[n] <R> connected_with <T> terminator || Terminator is connected with Input n and is connected with T[1]=T[2]=1 and i=3 which if N then output T[n] and also T[1]=T[2]=1 and i=3 is connected with i<n. If i<n is Y, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with T[1]=T[2]=1 and i=3 and Output T[n] is connected with terminator. 
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> input_a,b,c <H> input_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> Y <T> No_solution <H> No_solution <R> connected_with <T> End <H> A<0 <R> N <T> A=0 <H> A=0 <R> Y <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> N <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Start is connected with input a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 is Y then No solution and is then connected with End. A<0 is N then A=0 which if Y, then output -b/2a and is then connected with End. If A=0 is N, then output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> Do_I_want_to_do_this? <H> Do_I_want_to_do_this? <R> No <T> Don't_do_it. <H> Do_I_want_to_do_this? <R> Yes <T> Will_it_likely_end_in_disaster? <H> Will_it_likely_end_in_disaster? <R> No <T> Do_it <H> Will_it_likely_end_in_disaster? <R> Yes <T> will_it_make_a_good_story_anyway? <H> will_it_make_a_good_story_anyway? <R> No <T> Don't_do_it. <H> will_it_make_a_good_story_anyway? <R> Yes <T> Do_it! || Start is connected with Do I want to do this? which if No, then Don't do it. If Do I want to do this? is Yes then will it likely end in disaster? which if No then Do it! and if will it likely end in disaster? is yes then will it make a good story anyway? If will it make a good story anyway? is Yes then Do it! and if No then Don't do it.
<H> Start <R> connected_with <T> Do_I_want_to_do_this <H> Do_I_want_to_do_this <R> Yes <T> Do_it! <H> Do_I_want_to_do_this <R> No <T> Will_it_likely_end_in_disaster? <H> Will_it_likely_end_in_disaster? <R> No <T> Do_it! <H> Will_it_likely_end_in_disaster? <R> Yes <T> will_it_make_a_good_story_anyway? <H> will_it_make_a_good_story_anyway? <R> connected_with <T> Don't_do_it. <H> will_it_make_a_good_story_anyway? <R> Yes <T> Do_it! || Start is connected with Do I want to do this? which if Do I want to do this? is Yes then Do it! which if No then will it likely end in disaster? and if will it likely end in disaster? is No then Do it! and if will it likely end in disaster? is yes then will it make a good story anyway? If will it make a good story anyway? is Yes then Do it! and also If will it make a good story anyway? is connected with Don't do it..
<H> Start <R> connected_with <T> Read_X <H> Read_X <R> connected_with <T> X>0 <H> X>0 <R> False <T> Read_Y <H> X>0 <R> True <T> X=2*X <H> X=2*X <R> connected_with <T> Halt <H> Read_Y <R> connected_with <T> X=X*Y <H> X=X*Y <R> connected_with <T> Halt || Start is connected with Read X which is then connected with X>0. If X>0 is False then Read Y and if X>0 is True then X=2*X which is further connected with Halt. Read Y is connected with X=X*Y and is connected with Halt.
<H> Start <R> connected_with <T> Input_a <H> Input_a <R> connected_with <T> Let_X=a/3 <H> Let_X=a/3 <R> connected_with <T> ls|a-x3|<S? <H> ls|a-x3|<S? <R> Yes <T> Output:The_cube_root_of_a_is_X. <H> Output:The_cube_root_of_a_is_X. <R> connected_with <T> Stop <H> ls|a-x3|<S? <R> No <T> Let_X=X-(X3-a)/3X2 <H> Let_X=X-(X3-a)/3X2 <R> connected_with <T> ls|a-x3|<S? || Start is connected with Input a which is then connected with Let x=a/3 and let x=a/3 is connected with ls|a-x3|<S? If ls|a-x3|<S? is Yes then Output: The Cube root of a is x and is then connected with Stop. If ls|a-x3|<S? is No then Let x=x-(x3-a)/3x2 which is further connected with ls|a-x3|<S?
<H> Work <R> connected_with <T> Tired? <H> Tired? <R> No <T> Work <H> Tired? <R> Yes <T> Go_to_coffee_maker <H> Go_to_coffee_maker <R> connected_with <T> Fresh_coffee? <H> Fresh_coffee? <R> Yes <T> Drink_coffee <H> Drink_coffee <R> connected_with <T> Tired? <H> Fresh_coffee? <R> No <T> Make_coffee <H> Make_coffee <R> connected_with <T> Drink_coffee || Work is connected with Tired? which if Tired? is No then Work and if Tired? is Yes then Go to coffee maker. Go to coffee maker is connected with Fresh coffee? which if Fresh coffee? is Yes then Drink Cofee and Drink Coffee is connected with Tired? If Fresh coffee? is No then Make coffee which is then connected with Drink coffee. 
<H> Start <R> connected_with <T> Request_key_from_mem_cached <H> Request_key_from_mem_cached <R> connected_with <T> Does_key_exist? <H> Does_key_exist? <R> No <T> Load_data_from_database <H> Load_data_from_database <R> connected_with <T> Update_memcached <H> Does_key_exist? <R> Yes <T> Use_data <H> Update_memcached <R> connected_with <T> Use_data || Start is connected with Request Key from mem cached which is then connected with Does key exist? If Does key exist? is No then Load data from database which is then connected with Update memcached. If Does key exist? is Yes then Use data and also update memcached is connected with use data.
<H> terminator <R> connected_with <T> SET_RESULT_TO_ZERO <H> SET_RESULT_TO_ZERO <R> connected_with <T> LSB(MPR)=1? <H> LSB(MPR)=1? <R> No <T> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <H> LSB(MPR)=1? <R> Yes <T> RESULT=RESULT+MPD <H> RESULT=RESULT+MPD <R> connected_with <T> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <H> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <R> connected_with <T> NEXT_LSB_(MPR) <H> NEXT_LSB_(MPR) <R> connected_with <T> DONE_FOR_8_BITS? <H> DONE_FOR_8_BITS? <R> No <T> LSB(MPR)=1? <H> DONE_FOR_8_BITS? <R> Yes <T> terminator || Terminator is connected with SET RESULT TO ZERO which is then connected with LSB(MPR)=1? If LSB(MPR)=1? is No then LEFT SHIFT (1) MPD OR RIGHT SHIFT (1) RES. If LSB(MPR)=1? is Yes then RESULT=RESULT+MPD. RESULT=RESULT+MPD is connected with LEFT SHIFT (1) MPD OR RIGHT SHIFT (1) RES which is further connected with NEXT LSB (MPR). NEXT LSB (MPR) is connected with DONE FOR 8 BITS? which if No then LSB(MPR)=1? and if DONE FOR 8 BITS? is Yes then terminator. 
<H> S <R> connected_with <T> Initialisation <H> Initialisation <R> connected_with <T> Population_of_solutions <H> Population_of_solutions <R> connected_with <T> Terminate? <H> Terminate? <R> Yes <T> Output_Best_Sol. <H> Output_Best_Sol. <R> connected_with <T> T <H> Terminate? <R> No <T> Selection <H> Selection <R> connected_with <T> Promising_Solutions <H> Promising_Solutions <R> connected_with <T> Reproduction <H> Reproduction <R> connected_with <T> New_Solutions <H> New_Solutions <R> connected_with <T> Replacement <H> Replacement <R> connected_with <T> Population_of_solutions || S is connected with Initialisation which is then connected with Population of Solutions. Population of Solutions is connected with Terminate? If Terminate? is Yes then Output Best Sol. which is further connected with T. If Terminate? is No then Selection which is further connected with Promisiong Solutions. Promising Solutions is connected with Reproduction which is then connected with New solutions and further connected with Replacement. Replacement is then connected with Population of solutions.                    
<H> Start <R> connected_with <T> READ_N <H> READ_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> NO <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> YES <T> Print_F <H> Print_F <R> connected_with <T> End || START is connected with READ N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if NO then M=M+1 and is then connected with F=F*M. If M=N is YES then PRINT F and is connected with END. 
<H> Begin <R> connected_with <T> INPUT_X <H> INPUT_X <R> connected_with <T> n=1_R=1 <H> n=1_R=1 <R> connected_with <T> R=R*n <H> R=R*n <R> connected_with <T> n=X <H> n=X <R> Yes <T> DISP_R <H> n=X <R> No <T> n=n+1 <H> n=n+1 <R> connected_with <T> R=R*n <H> Disp_R <R> connected_with <T> Stop || BEGIN is connected with INPUT X and is then connected with n=1 and R=1 which is further connected with R=R*n. R=R*n is connected with n=X and if n=x is NO then n=n+1 and if YES then DISP R. n=n+1 is connected with R=R*n and DISP R is connected with STOP.
<H> terminator <R> connected_with <T> INPUT_X <H> INPUT_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> OUTPUT_X <H> OUTPUT_X <R> connected_with <T> terminator || Terminator is connected with INPUT X which is then connected with X=X*X which is further connected with OUTPUT X and finally connected with terminator.
<H> terminator <R> connected_with <T> READ_n <H> READ_n <R> connected_with <T> n=n*n <H> n=n*n <R> connected_with <T> PRINT_n <H> PRINT_n <R> connected_with <T> terminator || Terminator is connected with READ n which is connected with n=n*n which is further connected with PRINT n and finally connected with terminator.
<H> START <R> connected_with <T> INPUT_A,B <H> INPUT_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> OUTPUT_B <H> A>=B <R> Yes <T> OUTPUT_A || START is connected with INPUT A,B which is then connected with A>=B. If A>=B is NO then OUTPUT B and if A>=B is YES, then OUTPUT A. 
<H> BEGIN <R> connected_with <T> INPUT_X,Y <H> INPUT_X,Y <R> connected_with <T> X>=Y <H> X>=Y <R> 0 <T> DISPLAY_Y <H> X>=Y <R> 1 <T> DISPLAY_X || BEGIN is connected with INPUT X,Y and is connected with X>=Y which if 0 then DISPLAY Y and if 1 then DIAPLAY X.
<H> START <R> connected_with <T> INPUT_n <H> INPUT_n <R> connected_with <T> SUM=0_i=0 <H> SUM=0_i=0 <R> connected_with <T> SUM=SUM+1 <H> SUM=SUM+1 <R> connected_with <T> i=n? <H> i=n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> SUM=SUM+1 <H> i=n? <R> Yes <T> OUTPUT_n <H> OUTPUT_n <R> connected_with <T> END || START is connected with INPUT n which is then connected with SUM=0 and i=0 which is further connected with SUM=SUM+1. SUM=SUM+1 is then connected with i=n? and if i=n? is NO then i=i+1 which is connected with SUM=SUM+1. If i=n? is YES then OUTPUT n which is finally connected with END.
<H> BEGIN <R> connected_with <T> INPUT_n <H> INPUT_n <R> connected_with <T> k=1_SUM=0 <H> k=1_SUM=0 <R> connected_with <T> SUM=SUM+k <H> SUM=SUM+k <R> connected_with <T> k==n? <H> k==n? <R> 0 <T> k=k+1 <H> k=k+1 <R> connected_with <T> SUM=SUM+k <H> k==n? <R> 1 <T> DISP_SUM <H> DISP_SUM <R> connected_with <T> FINISH || BEGIN is connected with INPUT n and is then connected with k=1 and SUM=0 which is further connected with SUM=SUM+k. SUM=SUM+k is connected with K==n? which if 0 then k=k+1 and is then connected with SUM=SUM+k. Also, if K==n is 1 then DISP SUM and then DISP SUM is connected with FINISH.
<H> START <R> connected_with <T> INPUT_a,b <H> INPUT_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> NO <T> a=b_b=y <H> a=b_b=y <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> OUTPUT_b <H> OUTPUT_b <R> connected_with <T> END || START is connected with INPUT a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is NO then a=b and b=y and is again connected with r=a%b. If r=0? is YES then OUTPUT b and OUTPUT b is connected with END. 
<H> BEGIN <R> connected_with <T> INPUT_n,m <H> INPUT_n,m <R> connected_with <T> r=n%m <H> r=n%m <R> connected_with <T> r=0? <H> r=0? <R> TRUE <T> OUTPUT_m <H> r=0? <R> FALSE <T> n=m_m=r <H> n=m_m=r <R> connected_with <T> r=n%m <H> OUTPUT_m <R> connected_with <T> END || BEGIN is connected with INPUT n,m which is then connected with r=n%m. r=n%m is connected with r=0? which if TRUE, then OUTPUT m and if r=0? is FALSE then n=m and m=r and is again connected with r=n%m. OUTPUT m is connected with END.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> YES <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> NO <T> terminator || Terminator is connected with A>B which if YES then T=B and is then connected with B=A and A=T and if A>B is NO then terminator.
<H> terminator <R> connected_with <T> X>Y <H> X>Y <R> THEN <T> T=Y <H> T=Y <R> connected_with <T> Y=X_X=T <H> X>Y <R> ELSE <T> terminator <H> Y=X_X=T <R> connected_with <T> terminator || Terminator is connected with X>Y and if X>Y then T=Y and is then connected with Y=X and X=T, ELSE connected with terminator and also Y=X and X=T is connected with terminator. 
<H> BEGIN <R> connected_with <T> INPUT_P <H> INPUT_P <R> connected_with <T> P>0 <H> P>0 <R> ELSE <T> INPUT_P <H> P>0 <R> THEN <T> OUTPUT_P <H> OUTPUT_P <R> connected_with <T> END || BEGIN is connected with INPUT P and is connected with P>0. If P>0 is FALSE then it is connected with INPUT P and if P>0 then OUTPUT P and it is finally connected with END.
<H> START <R> connected_with <T> INPUT_V <H> INPUT_V <R> connected_with <T> V>0 <H> V>0 <R> TRUE <T> OUTPUT_V <H> OUTPUT_V <R> connected_with <T> END || START is connected with INPUT V and is connected with V>0. If V>0 is TRUE then OUTPUT V and it is connected to END.
<H> BEGIN <R> connected_with <T> ENTER_x <H> ENTER_x <R> connected_with <T> CALCULATE_h(x) <H> CALCULATE_h(x) <R> connected_with <T> CALCULATE_g(x) <H> CALCULATE_g(x) <R> connected_with <T> DISPLAY_h(x)g(x) <H> DISPLAY_h(x)g(x) <R> connected_with <T> END || BEGIN is connected with ENTER x which is then connected with CALCULATE h(x). CALCULATE h(x) is connected with CALCULATE g(x) which is then connected with DISPLAY h(x)g(x) and is finally connected with END.
<H> START <R> connected_with <T> INPUT_V <H> INPUT_V <R> connected_with <T> COMPUTE_f(v) <H> COMPUTE_f(v) <R> connected_with <T> COMPUTE_g(V) <H> COMPUTE_g(V) <R> connected_with <T> OUTPUT_f(V)+g(V) <H> OUTPUT_f(V)+g(V) <R> connected_with <T> STOP || START is connected with INPUT V and is connected with COMPUTE f(V) which is then connected with COMPUTE g(V) and is further connected with OUTPUT f(V)+g(V) and is finally connected with STOP. 
<H> terminator <R> connected_with <T> READ_N <H> READ_N <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[i]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> PRINT_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> PRINT_T[n] <R> connected_with <T> terminator || Terminator is connected with READ n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then PRINT T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and PRINT T[n] is connected with terminator.
<H> terminator <R> connected_with <T> INPUT_n <H> INPUT_n <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[i]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> N <T> OUTPUT_T[n] <H> i<n <R> Y <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> OUTPUT_T[n] <R> connected_with <T> terminator || Terminator is connected with INPUT n and is connected with T[1]=T[2]=1 and i=3 and is then connected with i<n. If i<n is N, then OUTPUT T[i] and if Y, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and OUTPUT T[i] is connected with terminator. 
<H> BEGIN <R> connected_with <T> READ_a,b,c <H> READ_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> THEN <T> NOTHING <H> NOTHING <R> connected_with <T> END <H> A<0 <R> ELSE <T> A=0 <H> A=0 <R> THEN <T> OUTPUT_-b/2a <H> OUTPUT_-b/2a <R> connected_with <T> END <H> A=0 <R> ELSE <T> OUTPUT_-b+c/2a <H> OUTPUT_-b+c/2a <R> connected_with <T> OUTPUT_b-a/2a <H> OUTPUT_b-a/2a <R> connected_with <T> END || BEGIN is connected with READ a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then NOTHING and is then connected with END else A=0 which if A=0 then OUTPUT -b/2a and is then connected with END. A=0 is also connected with OUTPUT -b+c/2a which is then connected with OUTPUT b-a/2a which further connected with END. 
<H> START <R> connected_with <T> INPUT_a,b,c <H> INPUT_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> Y <T> NO_SOLUTION <H> NO_SOLUTION <R> connected_with <T> END <H> A<0 <R> N <T> A=0 <H> A=0 <R> Y <T> OUTPUT_-b/2a <H> OUTPUT_-b/2a <R> connected_with <T> END <H> A=0 <R> N <T> OUTPUT_-b+c/2a <H> OUTPUT_-b+c/2a <R> connected_with <T> OUTPUT_b-a/2a <H> OUTPUT_b-a/2a <R> connected_with <T> END || START is connected with INPUT a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 is Y then NO SOLUTION and is then connected with END. A<0 is N then A=0 which if Y, then OUTPUT -b/2a and is then connected with END. If A=0 is N, then OUTPUT -b+c/2a and is connected with OUTPUT b-a/2a which is then connected with END.
<H> START <R> connected_with <T> DO_I_WANT_TO_DO_THIS? <H> DO_I_WANT_TO_DO_THIS? <R> NO <T> DON'T_DO_IT. <H> DO_I_WANT_TO_DO_THIS? <R> YES <T> WILL_IT_LIKELY_END_IN_DISASTER? <H> WILL_IT_LIKELY_END_IN_DISASTER? <R> NO <T> DO_IT <H> WILL_IT_LIKELY_END_IN_DISASTER? <R> YES <T> WILL_IT_MAKE_A_GOOD_STORY_ANYWAY? <H> WILL_IT_MAKE_A_GOOD_STORY_ANYWAY? <R> NO <T> DON'T_DO_IT. <H> WILL_IT_MAKE_A_GOOD_STORY_ANYWAY? <R> YES <T> DO_IT! || START is connected with DO I WANT TO DO THIS? which if NO, then DON'T DO IT. If DO I WANT TO DO THIS? is YES then WILL IT LIKELY END IN DISASTER? if WILL IT LIKELY END IN DISASTER? is NO then DO IT! and if WILL IT LIKELY END IN DISASTER? is YES then WILL IT MAKE A GOOD STORY ANYWAY? If WILL IT MAKE A GOOD STORY ANYWAY? is YES then DO IT! and and if NO then DON'T DO IT. 
<H> START <R> connected_with <T> DO_I_WANT_TO_DO_THIS <H> DO_I_WANT_TO_DO_THIS <R> YES <T> DO_IT! <H> DO_I_WANT_TO_DO_THIS? <R> NO <T> WILL_IT_LIKELY_END_IN_DISASTER? <H> WILL_IT_LIKELY_END_IN_DISASTER? <R> NO <T> DO_IT! <H> WILL_IT_LIKELY_END_IN_DISASTER? <R> Yes <T> WILL_IT_MAKE_A_GOOD_STORY_ANYWAY? <H> WILL_IT_MAKE_A_GOOD_STORY_ANYWAY? <R> NO <T> DON'T_DO_IT. <H> WILL_IT_MAKE_A_GOOD_STORY_ANYWAY? <R> YES <T> DO_IT! || START is connected with DO I WANT TO DO THIS? which if DO I WANT TO DO THIS? is YES then DO IT! which if NO then WILL IT LIKELY END IN DISASTER? and if WILL IT LIKELY END IN DISASTER? is NO then DO IT! and if WILL IT LIKELY END IN DISASTER? is YES then WILL IT MAKE A GOOD STORY ANYWAY? If WILL IT MAKE A GOOD STORY ANYWAY? is YES then DO IT! and and if NO then DON'T DO IT. 
<H> START <R> connected_with <T> READ_X <H> READ_X <R> connected_with <T> X>0 <H> X>0 <R> FALSE <T> READ_Y <H> X>0 <R> TRUE <T> X=2*X <H> X=2*X <R> connected_with <T> HALT <H> READ_Y <R> connected_with <T> X=X*Y <H> X=X*Y <R> connected_with <T> HALT || START is connected with READ X which is then connected with X>0. If X>0 is FALSE then READ Y and if X>0 is TRUE then X=2*X which is further connected with HALT. READ Y is connected with X=X*Y and is connected with HALT.
<H> START <R> connected_with <T> INPUT_a <H> INPUT_a <R> connected_with <T> LET_X=a/3 <H> Let_X=a/3 <R> connected_with <T> ls|a-x3|<S? <H> ls|a-x3|<S? <R> YES <T> OUTPUT:THE_CUBE_ROOT_OF_A_IS_X. <H> OUTPUT:THE_CUBE_ROOT_OF_A_IS_X. <R> connected_with <T> STOP <H> ls|a-x3|<S? <R> NO <T> LET_X=X-(X3-a)/3X2 <H> LET_X=X-(X3-a)/3X2 <R> connected_with <T> ls|a-x3|<S? || START is connected with INPUT a which is then connected with LET x=a/3 and LET x=a/3 is connected with ls|a-x3|<S? If ls|a-x3|<S? is YES then OUTPUT: THE CUBE ROOT OF A IS X and is then connected with STOP. If ls|a-x3|<S? is NO then LET x=x-(x3-a)/3x2 which is further connected with ls|a-x3|<S?
<H> WORK <R> connected_with <T> TIRED? <H> TIRED? <R> NO <T> WORK <H> TIRED? <R> YES <T> GO_TO_COFEE_MAKER <H> GO_TO_COFEE_MAKER <R> connected_with <T> FRESH_COFEE? <H> FRESH_COFEE? <R> YES <T> DRINK_COFEE <H> DRINK_COFEE <R> connected_with <T> TIRED? <H> FRESH_COFEE? <R> NO <T> MAKE_COFEE <H> MAKE_COFEE <R> connected_with <T> DRINK_COFEE || WORK is connected with TIRED? which if TIRED? is NO then WORK and if TIRED? is YES then GO TO COFEE MAKER. GO TO COFEE MAKER is connected with FRESH COFEE? which if FRESH COFEE? is YES then DRINK COFEE and DRINK COFEE is connected with TIRED? If FRESH COFEE? is NO then MAKE COFEE which is then connected with DRINK COFEE.  
<H> START <R> connected_with <T> REQUEST_KEY_FROM_MEM_CACHED <H> REQUEST_KEY_FROM_MEM_CACHED <R> connected_with <T> DOES_KEY_EXIST? <H> DOES_KEY_EXIST? <R> NO <T> LOAD_DATA_FROM_DATABASE <H> LOAD_DATA_FROM_DATABASE <R> connected_with <T> UPDATE_MEMCACHED <H> DOES_KEY_EXIST? <R> YES <T> USE_DATA <H> UPDATE_MEMCACHED <R> connected_with <T> USE_DATA || START is connected with REQUEST KEY FROM MEM CACHED which is then connected with DOES KEY EXIST? If DOES KEY EXIST? is NO then LOAD DATA FROM DATABASE which is then connected with UPDATE MEMCACHED. If DOES KEY EXIST? is YES then USE DATA and also UPDATE MEMCACHED is connected with USE DATA.
<H> terminator <R> connected_with <T> SET_RESULT_TO_ZERO <H> SET_RESULT_TO_ZERO <R> connected_with <T> LSB(MPR)=1? <H> LSB(MPR)=1? <R> NO <T> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <H> LSB(MPR)=1? <R> YES <T> RESULT=RESULT+MPD <H> RESULT=RESULT+MPD <R> connected_with <T> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <H> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <R> connected_with <T> NEXT_LSB_(MPR) <H> NEXT_LSB_(MPR) <R> connected_with <T> DONE_FOR_8_BITS? <H> DONE_FOR_8_BITS? <R> NO <T> LSB(MPR)=1? <H> DONE_FOR_8_BITS? <R> YES <T> terminator || Terminator is connected with SET RESULT TO ZERO which is then connected with LSB(MPR)=1? If LSB(MPR)=1? is NO then LEFT SHIFT (1) MPD OR RIGHT SHIFT (1) RES. If LSB(MPR)=1? is YES then RESULT=RESULT+MPD. RESULT=RESULT+MPD is connected with LEFT SHIFT (1) MPD OR RIGHT SHIFT (1) RES which is further connected with NEXT LSB (MPR). NEXT LSB (MPR) is connected with DONE FOR 8 BITS? which if NO then LSB(MPR)=1? and if DONE FOR 8 BITS? is YES then terminator. 
<H> S <R> connected_with <T> INITIALIZATION <H> INITIALIZATION <R> connected_with <T> POPULATION_OF_SOLUTIONS <H> POPULATION_OF_SOLUTIONS <R> connected_with <T> TERMINATE? <H> TERMINATE? <R> YES <T> OUTPUT_BEST_SOL. <H> OUTPUT_BEST_SOL. <R> connected_with <T> T <H> TERMINATE? <R> NO <T> SELECTION <H> SELECTION <R> connected_with <T> PROMISING_SOLUTIONS <H> PROMISING_SOLUTIONS <R> connected_with <T> REPRODUCTION <H> REPRODUCTION <R> connected_with <T> NEW_SOLUTIONS <H> NEW_SOLUTIONS <R> connected_with <T> REPLACEMENT <H> REPLACEMENT <R> connected_with <T> POPULATION_OF_SOLUTIONS || S is connected with INITIALIZATION which is then connected with POPULATION OF SOLUTIONS. POPULATION OF SOLUTIONS is connected with Terminate? If Terminate? is YES then OUTPUT BEST SOL. which is further connected with T. If Terminate? is NO then SELECTION which is further connected with PROMISING SOLUTIONS. PROMISING SOLUTIONS is connected with REPRODUCTION which is then connected with NEW SOLUTIONS and further connected with REPLACEMENT. REPLACEMENT is then connected with POPULATION OF SOLUTIONS.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F.M <H> F=F.M <R> connected_with <T> M=N <H> M=N <R> No <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F.M <H> M=N <R> Yes <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F.M. F=F.M is connected with M=N which if NO then M=M+1 and is then connected with F=F.M. If M=N is YES then Print F and is connected with End.
<H> Begin <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> n=1_R=1 <H> n=1_R=1 <R> connected_with <T> R=R*n <H> R=R*n <R> connected_with <T> n=x <H> n=x <R> No <T> n=n+1 <H> n=n+1 <R> connected_with <T> R=R*n <H> n=X <R> Yes <T> Disp_R <H> Disp_R <R> connected_with <T> Stop || Begin is connected with Input X and is then connected with n=1 and R=1 which is further connected with R=R*n. R=R*n is connected with n=X and if n=x is No then n=n+1 and if yes then Disp R. n=n+1 is connected with R=R*n and Disp R is connected with Stop.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> n=n*n <H> n=n*n <R> connected_with <T> Print_n <H> Print_n <R> connected_with <T> terminator || Terminator is connected with Read n which is connected with n=n*n which is further connected with Print n and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No then Output B and if A>=B is Yes, then Output A.
<H> Begin <R> connected_with <T> Input_X,Y <H> Input_X,Y <R> connected_with <T> X>=Y <H> X>=Y <R> 0 <T> Display_Y <H> X>=Y <R> 1 <T> Display_X || Begin is connected with Input X,Y and is connected with X>=Y which if 0 then display Y and if 1 then display X.
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=0 <H> sum=0_i=0 <R> connected_with <T> sum=sum+1 <H> sum=sum+1 <R> connected_with <T> i=n? <H> i=n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+1 <H> i=n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=0 which is further connected with sum=sum+1. sum=sum+1 is then connected with i=n? and if i=n? is No then i=i+1 which is connected with sum=sum+1. If i=n? is Yes then output n which is finally connected with End.
<H> Begin <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> k=1_sum=0 <H> k=1_sum=0 <R> connected_with <T> sum=sum+k <H> sum=sum+k <R> connected_with <T> k==n? <H> k==n? <R> 0 <T> k=k+1 <H> k=k+1 <R> connected_with <T> sum=sum+k <H> k==n? <R> 1 <T> Disp_sum <H> Disp_sum <R> connected_with <T> Finish || Begin is connected with Input n and is then connected with k=1 and Sum=0 which is further connected with Sum=Sum+k. Sum=Sum+k is connected with K==n? which if 0 then k=k+1 and is then connected with Sum=Sum+k. Also, if K==n is 1 then Disp Sum and then disp sum is connected with Finish.
<H> start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0? <H> r=0? <R> No <T> a=b_b=y <H> a=b_b=y <R> connected_with <T> r=a%b <H> r=0? <R> yes <T> Output_b <H> Output_b <R> connected_with <T> End || Start is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=y and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> Begin <R> connected_with <T> Input_n,m <H> Input_n,m <R> connected_with <T> r=n%m <H> r=n%m <R> connected_with <T> r=0? <H> r=0? <R> True <T> Output_m <H> r=0? <R> False <T> n=m_m=r <H> n=m_m=r <R> connected_with <T> r=n%m <H> output_m <R> connected_with <T> End || Begin is connected with Input n,m which is then connected with r=n%m. r=n%m is connected with r=0? which if true, then output m and if r=0? is false then n=m and m=r and is again connected with r=n%m. Output m is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator <H> B=A_A=T <R> connected_with <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator.
<H> terminator <R> connected_with <T> X>Y <H> X>Y <R> Then <T> T=Y <H> T=Y <R> connected_with <T> Y=X_X=T <H> X>Y <R> else <T> terminator <H> Y=X_X=T <R> connected_with <T> terminator || Terminator is connected with X>Y and if X>Y then T=Y and is then connected with Y=X and X=T, else connected with terminator and also Y=X and X=T is connected with terminator.
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> Else <T> Input_P <H> P>0 <R> Then <T> Output_P <H> Output_P <R> connected_with <T> End || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 then Output P and it is finally connected with end.
<H> Start <R> connected_with <T> Input_V <H> Input_V <R> connected_with <T> V>0 <H> V>0 <R> True <T> Output_V <H> Output_V <R> connected_with <T> end || Start is connected with Input V and is connected with V>0. If v>0 is True then Output V and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> Display_h(x)g(x) <H> Display_h(x)g(x) <R> connected_with <T> End || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with Display h(x)g(x) and is finally connected with end.
<H> Start <R> connected_with <T> Input_V <H> Input_V <R> connected_with <T> Compute_f(v) <H> Compute_f(v) <R> connected_with <T> Compute_g(V) <H> Compute_g(V) <R> connected_with <T> Output_f(V)+g(V) <H> Output_f(V)+g(V) <R> connected_with <T> Stop || Start is connected with Input V and is connected with Compute f(V) which is then connected with Compute g(V) and is further connected with Output f(V)+g(V) and is finally connected with Stop.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[i]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator. 
<H> terminator <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[i]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> N <T> Output_T[n] <H> i<n <R> Y <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> output_T[n] <R> connected_with <T> terminator || Terminator is connected with Input n and is connected with T[1]=T[2]=1 and i=3 and is then connected with i<n. If i<n is N, then output T[n] and if Y, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Output T[n] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> input_a,b,c <H> input_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> Y <T> No_solution <H> No_solution <R> connected_with <T> End <H> A<0 <R> N <T> A=0 <H> A=0 <R> Y <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> N <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Start is connected with input a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 is Y then No solution and is then connected with End. A<0 is N then A=0 which if Y, then output -b/2a and is then connected with End. If A=0 is N, then output -b+c/2a and is connected with output b-a/2a which is then connected with End. 
<H> Start <R> connected_with <T> Do_I_want_to_do_this? <H> Do_I_want_to_do_this? <R> No <T> Don't_do_it. <H> Do_I_want_to_do_this? <R> Yes <T> Will_it_likely_end_in_disaster? <H> Will_it_likely_end_in_disaster? <R> No <T> Do_it <H> Will_it_likely_end_in_disaster? <R> Yes <T> will_it_make_a_good_story_anyway? <H> will_it_make_a_good_story_anyway? <R> No <T> Don't_do_it. <H> will_it_make_a_good_story_anyway? <R> Yes <T> Do_it! || Start is connected with Do I want to do this? which if No, then Don't do it. If Do I want to do this? is Yes then will it likely end in disaster? if will it likely end in disaster? is No then Do it! and if will it likely end in disaster? is yes then will it make a good story anyway? If will it make a good story anyway? is Yes then Do it! and and if No then Don't do it. 
<H> Start <R> connected_with <T> Do_I_want_to_do_this <H> Do_I_want_to_do_this <R> Yes <T> Do_it! <H> Do_I_want_to_do_this <R> No <T> Will_it_likely_end_in_disaster? <H> Will_it_likely_end_in_disaster? <R> No <T> Do_it! <H> Will_it_likely_end_in_disaster? <R> Yes <T> will_it_make_a_good_story_anyway? <H> will_it_make_a_good_story_anyway? <R> No <T> Don't_do_it. <H> will_it_make_a_good_story_anyway? <R> Yes <T> Do_it! || Start is connected with Do I want to do this? which if Do I want to do this? is Yes then Do it! which if No then will it likely end in disaster? and if will it likely end in disaster? is No then Do it! and if will it likely end in disaster? is yes then will it make a good story anyway? If will it make a good story anyway? is Yes then Do it! and if No then Don't do it.
<H> Start <R> connected_with <T> Read_X <H> Read_X <R> connected_with <T> X>0 <H> X>0 <R> False <T> Read_Y <H> X>0 <R> connected_with <T> X=2.X <H> X=2.X <R> connected_with <T> Halt <H> Read_Y <R> connected_with <T> X=X.Y <H> X=X.Y <R> connected_with <T> Halt || Start is connected with Read X which is then connected with X>0. If X>0 is False then Read Y and if X>0 is True then X=2*X which is further connected with Halt. Read Y is connected with X=X*Y and is connected with Halt.
<H> Start <R> connected_with <T> Input_a <H> Input_a <R> connected_with <T> Let_X=a/3 <H> Let_X=a/3 <R> connected_with <T> ls|a-x3|<S? <H> ls|a-x3|<S? <R> Yes <T> Output:The_cube_root_of_a_is_X. <H> Output:The_cube_root_of_a_is_X. <R> connected_with <T> Stop <H> ls|a-x3|<S? <R> No <T> Let_X=X-(X3-a)/3X2 <H> Let_X=X-(X3-a)/3X2 <R> connected_with <T> ls|a-x3|<S? || Start is connected with Input a which is then connected with Let x=a/3 and let x=a/3 is connected with ls|a-x3|<S? If ls|a-x3|<S? is Yes then Output: The Cube root of a is x and is then connected with Stop. If ls|a-x3|<S? is No then Let x=x-(x3-a)/3x2 which is further connected with ls|a-x3|<S?
<H> Work <R> connected_with <T> Tired? <H> Tired? <R> No <T> Work <H> Tired? <R> Yes <T> Go_to_coffee_maker <H> Go_to_coffee_maker <R> connected_with <T> Fresh_coffee? <H> Fresh_coffee? <R> Yes <T> Drink_coffee <H> Drink_coffee <R> connected_with <T> Tired? <H> Fresh_coffee? <R> No <T> Make_coffee <H> Make_coffee <R> connected_with <T> Drink_coffee || Work is connected with Tired? which if Tired? is No then Work and if Tired? is Yes then Go to coffee maker. Go to coffee maker is connected with Fresh coffee? which if Fresh coffee? is Yes then Drink Coffee and Drink Coffee is connected with Tired? If Fresh coffee? is No then Make coffee which is then connected with Drink coffee.
<H> Start <R> connected_with <T> Request_key_from_mem_cached <H> Request_key_from_mem_cached <R> connected_with <T> Does_key_exist? <H> Does_key_exist? <R> No <T> Load_data_from_database <H> Load_data_from_database <R> connected_with <T> Update_memcached <H> Does_key_exist? <R> Yes <T> Use_data <H> Update_memcached <R> connected_with <T> Use_data || Start is connected with Request Key from mem cached which is then connected with Does key exist? If Does key exist? is No then Load data from database which is then connected with Update memcached. If Does key exist? is Yes then Use data and also update memcached is connected with use data.
<H> terminator <R> connected_with <T> SET_RESULT_TO_ZERO <H> SET_RESULT_TO_ZERO <R> connected_with <T> LSB(MPR)=1? <H> LSB(MPR)=1? <R> No <T> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <H> LSB(MPR)=1? <R> Yes <T> RESULT=RESULT+MPD <H> RESULT=RESULT+MPD <R> connected_with <T> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <H> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <R> connected_with <T> NEXT_LSB_(MPR) <H> NEXT_LSB_(MPR) <R> connected_with <T> DONE_FOR_8_BITS? <H> DONE_FOR_8_BITS? <R> No <T> LSB(MPR)=1? <H> DONE_FOR_8_BITS? <R> Yes <T> terminator || Terminator is connected with SET RESULT TO ZERO which is then connected with LSB(MPR)=1? If LSB(MPR)=1? is No then LEFT SHIFT (1) MPD OR RIGHT SHIFT (1) RES. If LSB(MPR)=1? is Yes then RESULT=RESULT+MPD. RESULT=RESULT+MPD is connected with LEFT SHIFT (1) MPD OR RIGHT SHIFT (1) RES which is further connected with NEXT LSB (MPR). NEXT LSB (MPR) is connected with DONE FOR 8 BITS? which if No then LSB(MPR)=1? and if DONE FOR 8 BITS? is Yes then terminator.
<H> S <R> connected_with <T> Initialisation <H> Initialisation <R> connected_with <T> Population_of_solutions <H> Population_of_solutions <R> connected_with <T> Terminate? <H> Terminate? <R> Yes <T> Output_Best_Sol. <H> Output_Best_Sol. <R> connected_with <T> T <H> Terminate? <R> No <T> Selection <H> Selection <R> connected_with <T> Promising_Solutions <H> Promising_Solutions <R> connected_with <T> Reproduction <H> Reproduction <R> connected_with <T> New_Solutions <H> New_Solutions <R> connected_with <T> Replacement <H> Replacement <R> connected_with <T> Population_of_solutions || S is connected with Initialisation which is then connected with Population of Solutions. Population of Solutions is connected with Terminate? If Terminate? is Yes then Output Best Sol. which is further connected with T. If Terminate? is No then Selection which is further connected with Promisiong Solutions. Promising Solutions is connected with Reproduction which is then connected with New solutions and further connected with Replacement. Replacement is then connected with Population of solutions.
<H> Start <R> connected_with <T> Read_N <H> Read_N <R> connected_with <T> M=1_F=1 <H> M=1_F=1 <R> connected_with <T> F=F*M <H> F=F*M <R> connected_with <T> M=N <H> M=N <R> NO <T> M=M+1 <H> M=M+1 <R> connected_with <T> F=F*M <H> M=N <R> YES <T> Print_F <H> Print_F <R> connected_with <T> End || Start is connected with Read N which is connected with M=1 and F=1 which is then connected with F=F*M. F=F*M is connected with M=N which if NO then M=M+1 and is then connected with F=F.M. If M=N is YES then Print F and is connected with End.
<H> Begin <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> n=1_R=1 <H> n=1_R=1 <R> connected_with <T> R=R*n <H> R=R*n <R> connected_with <T> n=X <H> n=X <R> Yes <T> Disp_R <H> n=X <R> No <T> n=n+1 <H> n=n+1 <R> connected_with <T> R=R*n <H> Disp_R <R> connected_with <T> Stop || Begin is connected with Input X and is then connected with n=1 and R=1 which is further connected with R=R*n. R=R*n is connected with n=X and if n=x is No then n=n+1 and if yes then Disp R. n=n+1 is connected with R=R*n and Disp R is connected with Stop.
<H> terminator <R> connected_with <T> Input_X <H> Input_X <R> connected_with <T> X=X*X <H> X=X*X <R> connected_with <T> Output_X <H> Output_X <R> connected_with <T> terminator || Terminator is connected with Input X which is then connected with X=X*X which is further connected with Output X and finally connected with terminator.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> n=n*n <H> n=n*n <R> connected_with <T> Print_n <H> Print_n <R> connected_with <T> terminator || Terminator is connected with Read n which is connected with n=n*n which is further connected with Print n and finally connected with terminator.
<H> Start <R> connected_with <T> Input_A,B <H> Input_A,B <R> connected_with <T> A>=B <H> A>=B <R> No <T> Output_B <H> A>=B <R> Yes <T> Output_A || Start is connected with Input A,B which is then connected with A>=B. If A>=B is No then Output B and if A>=B is Yes, then Output A. 
<H> Begin <R> connected_with <T> Input_X,Y <H> Input_X,Y <R> connected_with <T> X>=Y <H> X>=Y <R> 0 <T> Display_Y <H> X>=Y <R> 1 <T> Display_X || Begin is connected with Input X,Y and is connected with X>=Y which if 0 then display Y and if 1 then display X. 
<H> Start <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> sum=0_i=0 <H> sum=0_i=0 <R> connected_with <T> sum=sum+1 <H> sum=sum+1 <R> connected_with <T> i=n? <H> i=n? <R> No <T> i=i+1 <H> i=i+1 <R> connected_with <T> sum=sum+1 <H> i=n? <R> Yes <T> Output_n <H> Output_n <R> connected_with <T> End || Start is connected with Input n which is then connected with sum=0 and i=0 which is further connected with sum=sum+1. sum=sum+1 is then connected with i=n? and if i=n? is No then i=i+1 which is connected with sum=sum+1. If i=n? is Yes then output n which is finally connected with End.
<H> Begin <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> k=1_sum=0 <H> k=1_sum=0 <R> connected_with <T> sum=sum+k <H> sum=sum+k <R> connected_with <T> k==n? <H> k==n? <R> 0 <T> k=k+1 <H> k=k+1 <R> connected_with <T> sum=sum+k <H> k==n? <R> 1 <T> Disp_sum <H> Disp_sum <R> connected_with <T> Finish || Begin is connected with Input n and is then connected with k=1 and Sum=0 which is further connected with Sum=Sum+k. Sum=Sum+k is connected with K==n? which if 0 then k=k+1 and is then connected with Sum=Sum+k. Also, if K==n is 1 then Disp Sum and then disp sum is connected with Finish.
<H> start <R> connected_with <T> Input_a,b <H> Input_a,b <R> connected_with <T> r=a%b <H> r=a%b <R> connected_with <T> r=0 <H> r=0 <R> No <T> a=b_b=y <H> a=b_b=y <R> connected_with <T> r=a%b <H> r=0 <R> yes <T> output_b <H> output_b <R> connected_with <T> End || Start is connected with Input a,b which is then connected with r=a%b. r=a%b is connected with r=0? If r=0? is No then a=b and b=y and is again connected with r=a%b. If r=0? is yes then output b and output b is connected with End.
<H> Begin <R> connected_with <T> Input_n,m <H> Input_n,m <R> connected_with <T> r=n%m <H> r=n%m <R> connected_with <T> r=0? <H> r=0? <R> True <T> Output_m <H> r=0? <R> False <T> n=m_m=r <H> n=m_m=r <R> connected_with <T> r=n%m <H> output_m <R> connected_with <T> End || Begin is connected with Input n,m which is then connected with r=n%m. r=n%m is connected with r=0? which if true, then output m and if r=0? is false then n=m and m=r and is again connected with r=n%m. Output m is connected with End.
<H> terminator <R> connected_with <T> A>B <H> A>B <R> Yes <T> T=B <H> T=B <R> connected_with <T> B=A_A=T <H> A>B <R> No <T> terminator || Terminator is connected with A>B which if Yes then T=B and is then connected with B=A and A=T and if A>B is No then terminator.
<H> terminator <R> connected_with <T> X>Y <H> X>Y <R> Then <T> T=Y <H> T=Y <R> connected_with <T> Y=X_X=T <H> X>Y <R> else <T> terminator <H> Y=X_X=T <R> connected_with <T> terminator || Terminator is connected with X>Y and if X>Y then T=Y and is then connected with Y=X and X=T, else connected with terminator and also Y=X and X=T is connected with terminator.
<H> Begin <R> connected_with <T> Input_P <H> Input_P <R> connected_with <T> P>0 <H> P>0 <R> Else <T> Input_P <H> P>0 <R> Then <T> Output_P <H> Output_P <R> connected_with <T> End || Begin is connected with Input P and is connected with P>0. If P>0 is flase then it is connected with Input P and if P>0 then Output P and it is finally connected with end.
<H> Start <R> connected_with <T> Input_V <H> Input_V <R> connected_with <T> V>0 <H> V>0 <R> True <T> Output_V <H> Output_V <R> connected_with <T> end || Start is connected with Input V and is connected with V>0. If v>0 is True then Output V and it is connected to end.
<H> Begin <R> connected_with <T> Enter_x <H> Enter_x <R> connected_with <T> calculate_h(x) <H> calculate_h(x) <R> connected_with <T> calculate_g(x) <H> calculate_g(x) <R> connected_with <T> Display_h(x)g(x) <H> Display_h(x)g(x) <R> connected_with <T> End || Begin is connected with Enter x which is then connected with calculate h(x). Calculate h(x) is connected with calculate g(x) which is then connected with Display h(x)g(x) and is finally connected with end. 
<H> Start <R> connected_with <T> Input_V <H> Input_V <R> connected_with <T> Compute_f(v) <H> Compute_f(v) <R> connected_with <T> Compute_g(V) <H> Compute_g(V) <R> connected_with <T> Output_f(V)+g(V) <H> Output_f(V)+g(V) <R> connected_with <T> Stop || Start is connected with Input V and is connected with Compute f(V) which is then connected with Compute g(V) and is further connected with Output f(V)+g(V) and is finally connected with Stop.
<H> terminator <R> connected_with <T> Read_n <H> Read_n <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[i]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> 0 <T> Print_T[n] <H> i<n <R> 1 <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> Print_T[n] <R> connected_with <T> terminator || Terminator is connected with Read n and is connected with T[1]=1, T[2]=1 and i=3 and is then connected with i<n. If i<n is 0, then Print T[n] and if i<n is 1, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Print T[n] is connected with terminator.
<H> terminator <R> connected_with <T> Input_n <H> Input_n <R> connected_with <T> T[1]=T[2]=1_i=3 <H> T[1]=T[i]=1_i=3 <R> connected_with <T> i<n <H> i<n <R> N <T> Output_T[n] <H> i<n <R> Y <T> T[i]=T[i-1]+T[i-2] <H> T[i]=T[i-1]+T[i-2] <R> connected_with <T> i++ <H> i++ <R> connected_with <T> i<n <H> output_T[n] <R> connected_with <T> terminator || Terminator is connected with Input n and is connected with T[1]=T[2]=1 and i=3 and is then connected with i<n. If i<n is N, then output T[i] and if Y, then T[i]=T[i-1]+T[i-2] which is then connected with i++. i++ is again connected with i<n and Output T[i] is connected with terminator.
<H> Begin <R> connected_with <T> read_a,b,c <H> read_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> then <T> nothing <H> nothing <R> connected_with <T> End <H> A<0 <R> else <T> A=0 <H> A=0 <R> then <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> else <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Begin is connected with read a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 then nothing and is then connected with End else A=0 which if A=0 then output -b/2a and is then connected with End else output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> input_a,b,c <H> input_a,b,c <R> connected_with <T> A=b2-4ac <H> A=b2-4ac <R> connected_with <T> A<0 <H> A<0 <R> Y <T> No_solution <H> No_solution <R> connected_with <T> End <H> A<0 <R> N <T> A=0 <H> A=0 <R> Y <T> Output_-b/2a <H> Output_-b/2a <R> connected_with <T> End <H> A=0 <R> N <T> Output_-b+c/2a <H> Output_-b+c/2a <R> connected_with <T> output_b-a/2a <H> output_b-a/2a <R> connected_with <T> End || Start is connected with input a,b,c and is connected with A=b2-4ac which is then connected with A<0. If A<0 is Y then No solution and is then connected with End. A<0 is N then A=0 which if Y, then output -b/2a and is then connected with End. If A=0 is N, then output -b+c/2a and is connected with output b-a/2a which is then connected with End.
<H> Start <R> connected_with <T> Do_I_want_to_do_this? <H> Do_I_want_to_do_this? <R> No <T> Don't_do_it. <H> Do_I_want_to_do_this? <R> Yes <T> Will_it_likely_end_in_disaster? <H> Will_it_likely_end_in_disaster? <R> No <T> Do_it <H> Will_it_likely_end_in_disaster? <R> Yes <T> will_it_make_a_good_story_anyway? <H> will_it_make_a_good_story_anyway? <R> No <T> Don't_do_it. <H> will_it_make_a_good_story_anyway? <R> Yes <T> Do_it! || Start is connected with Do I want to do this? which if No, then Don't do it. If Do I want to do this? is Yes then will it likely end in disaster? if will it likely end in disaster? is No then Do it! and if will it likely end in disaster? is yes then will it make a good story anyway? If will it make a good story anyway? is Yes then Do it! and and if No then Don't do it.
<H> Start <R> connected_with <T> Do_I_want_to_do_this <H> Do_I_want_to_do_this <R> Yes <T> Do_it! <H> Do_I_want_to_do_this <R> No <T> Will_it_likely_end_in_disaster? <H> Will_it_likely_end_in_disaster? <R> No <T> Do_it! <H> Will_it_likely_end_in_disaster? <R> Yes <T> will_it_make_a_good_story_anyway? <H> will_it_make_a_good_story_anyway? <R> No <T> Don't_do_it. <H> will_it_make_a_good_story_anyway? <R> Yes <T> Do_it! || Start is connected with Do I want to do this? which if Do I want to do this? is Yes then Do it! which if No then will it likely end in disaster? and if will it likely end in disaster? is No then Do it! and if will it likely end in disaster? is yes then will it make a good story anyway? If will it make a good story anyway? is Yes then Do it! and if No then Don't do it.
<H> Start <R> connected_with <T> Read_X <H> Read_X <R> connected_with <T> X>0 <H> X>0 <R> False <T> Read_Y <H> X>0 <R> True <T> X=2*X <H> X=2*X <R> connected_with <T> Halt <H> Read_Y <R> connected_with <T> X=X*Y <H> X=X*Y <R> connected_with <T> Halt || Start is connected with Read X which is then connected with X>0. If X>0 is False then Read Y and if X>0 is True then X=2*X which is further connected with Halt. Read Y is connected with X=X*Y and is connected with Halt.
<H> Start <R> connected_with <T> Input_a <H> Input_a <R> connected_with <T> Let_X=a/3 <H> Let_X=a/3 <R> connected_with <T> ls|a-x3|<S? <H> ls|a-x3|<S? <R> Yes <T> Output:The_cube_root_of_a_is_X. <H> Output:The_cube_root_of_a_is_X. <R> connected_with <T> Stop <H> ls|a-x3|<S? <R> No <T> Let_X=X-(X3-a)/3X2 <H> Let_X=X-(X3-a)/3X2 <R> connected_with <T> ls|a-x3|<S? || Start is connected with Input a which is then connected with Let x=a/3 and let x=a/3 is connected with ls|a-x3|<S? If ls|a-x3|<S? is Yes then Output: The Cube root of a is x and is then connected with Stop. If ls|a-x3|<S? is No then Let x=x-(x3-a)/3x2 which is further connected with ls|a-x3|<S? 
<H> Work <R> connected_with <T> Tired? <H> Tired? <R> No <T> Work <H> Tired? <R> Yes <T> Go_to_coffee_maker <H> Go_to_coffee_maker <R> connected_with <T> Fresh_coffee? <H> Fresh_coffee? <R> Yes <T> Drink_coffee <H> Drink_coffee <R> connected_with <T> Tired? <H> Fresh_coffee? <R> No <T> Make_coffee <H> Make_coffee <R> connected_with <T> Drink_coffee || Work is connected with Tired? which if Tired? is No then Work and if Tired? is Yes then Go to coffee maker. Go to coffee maker is connected with Fresh coffee? which if Fresh coffee? is Yes then Drink Coffee and Drink Coffee is connected with Tired? If Fresh coffee? is No then Make coffee which is then connected with Drink coffee.
<H> Start <R> connected_with <T> Request_key_from_mem_cached <H> Request_key_from_mem_cached <R> connected_with <T> Does_key_exist? <H> Does_key_exist? <R> No <T> Load_data_from_database <H> Load_data_from_database <R> connected_with <T> Update_memcached <H> Does_key_exist? <R> Yes <T> Use_data <H> Update_memcached <R> connected_with <T> Use_data || Start is connected with Request Key from mem cached which is then connected with Does key exist? If Does key exist? is No then Load data from database which is then connected with Update memcached. If Does key exist? is Yes then Use data and also update memcached is connected with use data. 
<H> terminator <R> connected_with <T> SET_RESULT_TO_ZERO <H> SET_RESULT_TO_ZERO <R> connected_with <T> LSB(MPR)=1? <H> LSB(MPR)=1? <R> No <T> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <H> LSB(MPR)=1? <R> Yes <T> RESULT=RESULT+MPD <H> RESULT=RESULT+MPD <R> connected_with <T> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <H> LEFT_SHIFT_(1)_MPD_OR_RIGHT_SHIFT_(1)_RES <R> connected_with <T> NEXT_LSB_(MPR) <H> NEXT_LSB_(MPR) <R> connected_with <T> DONE_FOR_8_BITS? <H> DONE_FOR_8_BITS? <R> No <T> LSB(MPR)=1? <H> DONE_FOR_8_BITS? <R> Yes <T> terminator || Terminator is connected with SET RESULT TO ZERO which is then connected with LSB(MPR)=1? If LSB(MPR)=1? is No then LEFT SHIFT (1) MPD OR RIGHT SHIFT (1) RES. If LSB(MPR)=1? is Yes then RESULT=RESULT+MPD. RESULT=RESULT+MPD is connected with LEFT SHIFT (1) MPD OR RIGHT SHIFT (1) RES which is further connected with NEXT LSB (MPR). NEXT LSB (MPR) is connected with DONE FOR 8 BITS? which if No then LSB(MPR)=1? and if DONE FOR 8 BITS? is Yes then terminator.
<H> S <R> connected_with <T> Initialisation <H> Initialisation <R> connected_with <T> Population_of_solutions <H> Population_of_solutions <R> connected_with <T> Terminate? <H> Terminate? <R> Yes <T> Output_Best_Sol. <H> Output_Best_Sol. <R> connected_with <T> T <H> Terminate? <R> No <T> Selection <H> Selection <R> connected_with <T> Promising_Solutions <H> Promising_Solutions <R> connected_with <T> Reproduction <H> Reproduction <R> connected_with <T> New_Solutions <H> New_Solutions <R> connected_with <T> Replacement <H> Replacement <R> connected_with <T> Population_of_solutions || S is connected with Initialisation which is then connected with Population of Solutions. Population of Solutions is connected with Terminate? If Terminate? is Yes then Output Best Sol. which is further connected with T. If Terminate? is No then Selection which is further connected with Promisiong Solutions. Promising Solutions is connected with Reproduction which is then connected with New solutions and further connected with Replacement. Replacement is then connected with Population of solutions.